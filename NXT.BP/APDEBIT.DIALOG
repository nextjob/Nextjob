SUBROUTINE APDEBIT.DIALOG(GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: APDEBIT.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 07/22/2014
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
* APPLIED.AMOUNT - $ AMOUNT APPLIED FOR INVOICE
* AP_REC - AP RECORD
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* DIALOG IS CALLED TO CREATE DEBIT FOR VENDOR (WRITES AP RECORD WITH NEG AMOUNT)
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES AP_INVOICE.H
$INCLUDE NXT.INCLUDES VENDORS.H
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
*
*
$INCLUDE GUIBP ATGUIEQUATES
GUIERRORS = ''
PROG_ID   = "APDEBIT.DIALOG"
GUIAPP    = 'APDEBIT'
GUIFRM    = 'APDEBIT'
MSG_LIST  = ''
AP_INV_NBR = ''
AP_REC = ''
VN_ID = ''
VN_REC = ''
GL.CODE = ''
*
GL.CODES.LIST  = ''  ;* LIST FOR GL TRANS CODES
GL.CODES.IDX   = ''
*
CALL LIST.LOAD(C.VALIDATION_FILE,"GL.TRANS.CODES","2",'',GL.CODES.LIST,GL.CODES.IDX,LIST.COUNT,EMSG)
USER_RECORD_ID = "USER*":@LOGNAME
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,USER_RECORD_ID,USER_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)

*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'APDEBIT.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'APDEBIT.DIALOG' ELSE
   CALL ATGUIERROR(3,'APDEBIT.DIALOG','',0,GRFATAL,"'APDEBIT.DIALOG' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('APDEBIT','APDEBIT','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
CALL NXT.PRINTER.SET(PACKSLIP.PRINTER,INVOICE.PRINTER,PROCESS.PRINTER,REPORTS.PRINTER,LABEL.PRINTER, USER_REC, GUIERRORS, GUISTATE)
GOSUB LOAD.LISTS         ;* ADD VENDOR NAMES TO LST1VENNAME / GL CODES TO LSTGLTRANS

*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='APDEBIT'
         BEGIN CASE
            CASE GUIFRM='APDEBIT'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.APDEBIT.APDEBIT.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNFILE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.APDEBIT.APDEBIT.BTNFILE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNPRINT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.APDEBIT.APDEBIT.BTNPRINT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LST1VENNAME'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.APDEBIT.APDEBIT.LST1VENNAME.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LSTGLTRANS'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.APDEBIT.APDEBIT.LSTGLTRANS.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTDATE'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.APDEBIT.APDEBIT.TXTDATE.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTINV'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.APDEBIT.APDEBIT.TXTINV.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTINVAMT'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.APDEBIT.APDEBIT.TXTINVAMT.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTNOTES'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.APDEBIT.APDEBIT.TXTNOTES.VALIDATE;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APDEBIT.APDEBIT.BTNFILE.CLICK: *
*
EMSG = ''
BEGIN CASE
   CASE AP_INV_NBR = ''
      EMSG = 'Missing Debit Amount'
   CASE VN_ID = ''
      EMSG = 'Missing Vendor'
   CASE  GL.CODE = ''
      EMSG = 'Missing GL Trans Code'
   CASE AP_REC<AP_INV_DATE> = ''
      EMSG = 'Missing Debit Date'
END CASE
*
IF EMSG # '' THEN
   PRMPT = EMSG
   CAPTION = "Ap Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
   *
   * ASSEMBLE AP INVOICE LIST
   AP_REC<AP_RECD_DATE> = DATE()
   AP_REC<AP_INV_AMT> = -1 * AP_REC<AP_INV_AMT>
   AP_REC<AP_GL_AMTS>  = AP_REC<AP_INV_AMT>
   AP_REC<AP_GL_CODES> = GL.CODE
   AP_REC<AP_BAL_DUE>  = AP_REC<AP_INV_AMT>
   AP_REC<AP_DUE_DATE> = AP_REC<AP_INV_DATE>
   *
   AP_ID =  VN_ID:'*':AP_INV_NBR
   CALL WRITE.RECORD(AP_ID,AP_REC,C.AP_INVOICE,@FALSE,ERROR_STATUS)
   *
   GL_CODE = GL.CODE
   DB_AMT  = AP_REC<AP_GL_AMTS>
   CR_AMT = DB_AMT
   CALL WRITE.GLT(GL_CODE,DB_AMT,CR_AMT,AP_REC<AP_INV_DATE>,"AP-DBT",AP_ID,GUIERRORS,GUISTATE)
   *
   GOSUB GUI.APDEBIT.APDEBIT.CLOSE;GUIEVT=0
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APDEBIT.APDEBIT.BTNPRINT.CLICK: *

OPTS = 0
EMSG = ''
BEGIN CASE
   CASE AP_INV_NBR = ''
      EMSG = 'Missing Debit Amount'
   CASE VN_ID = ''
      EMSG = 'Missing Vendor'
   CASE  GL.CODE = ''
      EMSG = 'Missing GL Trans Code'
   CASE AP_REC<AP_INV_DATE> = ''
      EMSG = 'Missing Debit Date'
END CASE
IF EMSG = '' THEN
   CALL APD.FORM(AP_INV_NBR,AP_REC,VN_ID,DBFD,OPTS,GUIERRORS,GUISTATE)
   * GET PRINT PDF FLAG
   *
   CALL ATGUIGETPROP(GUIAPP,GUIFRM, "CHKPDF", GPVALUE, 0, 0,CREATE.PDF, GUIERRORS, GUISTATE)
   IF  CREATE.PDF THEN
      PDF.NAME = 'ADP-':AP_INV_NBR:'.PDF'
      DISPLAY.ON.CREATION = @TRUE
      CALL PCL.TO.PDF(DBFD,PDF.NAME,DISPLAY.ON.CREATION,GUIERRORS,GUISTATE)
   END ELSE
      PRINT ON INVOICE.PRINTER DBFD
      PRINTER CLOSE ON INVOICE.PRINTER
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.APDEBIT.APDEBIT.CLOSE: *
* Default form close event handler
*
* DID WE EXIT WITH RECORD LOCKED?
IF RECORDLOCKED(C.FILE.VAR(C.AP_INVOICE),VN_ID:'*':AP_INV_NBR) THEN
   RELEASE C.FILE.VAR(C.AP_INVOICE), VN_ID:'*':AP_INV_NBR
END
*
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APDEBIT.APDEBIT.LST1VENNAME.CLICK: *
IF GUIARGS<1> GT 0 THEN       ;* CLICKED EMPTY LIST TEST
   *
   VN_ID  = VENDORS.LIST<1,GUIARGS<1>,1>
   IF  VN_ID # '' THEN
      BEGIN CASE
         CASE  VN_ID = "$MORE$"      ;* USER NEEDS TO SEE MORE OF SEARCH LIST
            *        VENDORS.START.LIST = NEXT SELECTED ITEM INDEX TO DISPLAY FROM PRIOR GUI_SEARCH2 CALL
            VENDORS.LIST = ''
            LST.IDS = ''
            EMSG = ''
            CALL GUI.SEARCH2 ("VENDORS","","*","VN_NAME","VN_NAME VN_ADDR VN_CITY",VENDORS.MAX.LIST,VENDOR.START.LIST,VENDORS.LIST,LST.IDS,LIST.CT,EMSG)
            *
            CTRLIDS = ''
            PROPS   = ''
            VALUES  = ''
            *
            CTRLIDS<1> = "LST1VENNAME"
            PROPS<1>   = GPITEMS
            VALUES<1>  = VENDORS.LIST
            *
            CTRLIDS<2> =  "LST1VENNAME"
            PROPS<2>   = GPVALUE
            VALUES<2>  = ""
            CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
            IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
            *
         CASE VN_ID = "$TOP$"      ;* USER NEEDS TO SEE TOP OF LIST
            *         VENDORS.START.LIST = NEXT SELECTED ITEM INDEX TO DISPLAY FROM PRIOR GUI_SEARCH2 CALL
            VENDORS.LIST = ''
            LST.IDS = ''
            EMSG = ''
            CALL GUI.SEARCH2 ("VENDORS","","*","VN_NAME","VN_NAME VN_ADDR VN_CITY",VENDORS.MAX.LIST,VENDOR.START.LIST,VENDORS.LIST,LST.IDS,LIST.CT,EMSG)
            *
            CTRLIDS = ''
            PROPS   = ''
            VALUES  = ''
            *
            CTRLIDS<1> = "LST1VENNAME"
            PROPS<1>   = GPITEMS
            VALUES<1>  = VENDORS.LIST
            *
            CTRLIDS<2> = "LST1VENNAME"
            PROPS<2>   = GPVALUE
            VALUES<2>  = ""
            CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
            IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
            *
         CASE 1                     ;* SHOULD BE A VENDOR ID, GET VENDOR REC
            *
            CALL GET.VENDOR(VN_ID,VN_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
            *
            IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH CUST
               LOG.OPTS = "DISPLAY"
               ERROR_NBR = ERR_SYS
               ERROR_MSG = 'Selection of non-existent vendor from list'
               CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
            END ELSE
               *
               AP_INV_NBR  = ''  ;* CHANGE VENDOR MUST RE ENTER DEBIT (INV) NUMBER
               CTRLIDS =  "LBLVENDORVAL"
               PROPS   = GPVALUE
               VALUES  = VN_REC<VN_NAME>

               CTRLIDS<2> = "TXTINV"
               PROPS<2>   = GPENABLED
               VALUES<2>  = 1

               CTRLIDS<3> = "TXTINV"
               PROPS<3>   = GPVALUE
               VALUES<3>  = AP_INV_NBR

               CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
               IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR

            END

      END CASE
   END
END
LST1VENNAME.CLICK.99: *
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APDEBIT.APDEBIT.LSTGLTRANS.CLICK: *
GL.CODE =  GL.CODES.LIST<1,GUIARGS<1>,1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APDEBIT.APDEBIT.TXTDATE.VALIDATE: *
AP_REC<AP_INV_DATE> = ICONV(GUIARGS<2>,"D")
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APDEBIT.APDEBIT.TXTINV.VALIDATE: *
*
* VALIDATE INVOICE NUMBER, CANNOT ALREADY BE ON FILE!
*
TEST_AP_ID = VN_ID:'*':GUIARGS<2>
CALL GET.RECORD("AP_INVOICE",C.AP_INVOICE,TEST_AP_ID,TEST_AP_REC,@TRUE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF TEST_AP_REC = ''  THEN
   AP_INV_NBR  = OCONV(GUIARGS<2>,"MCU")
   *  AP_REC = ''
END ELSE
   *
   * AP ID ALEADY ON FILE, CANNOT USE!
   *
   AP_INV_NBR  = ''
   PRMPT = "Debit ":GUIARGS<2>:" Already on File for Vendor, Re-enter"
   CAPTION = "Ap Debit"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   RELEASE C.FILE.VAR(C.AP_INVOICE), TEST_AP_ID
END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APDEBIT.APDEBIT.TXTINVAMT.VALIDATE: *
IF GUIARGS<2> GE 0 THEN
   AP_REC<AP_INV_AMT> = ICONV(GUIARGS<2>,AP_INV_AMT.CNV)
   *
END ELSE
   PRMPT = "Debit Amount Invalid, Please Correct"
   CAPTION = "Ap Debit"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   *
   AP_REC<AP_INV_AMT> = 0
END
CTRLIDS = "TXTINVAMT"
PROPS   = GPVALUE
VALUES  = OCONV(AP_REC<AP_INV_AMT>,AP_INV_AMT.CNV)
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APDEBIT.APDEBIT.TXTNOTES.VALIDATE: *
AP_REC<AP_NOTES> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
************************************************************
* $PAGE$
************************************************************
LOAD.LISTS: *
*
* LOADS THE LST1VENNAME LIST
*
VENDORS.MAX.LIST = 300
VENDORS.START.LIST = 1
CALL GUI.SEARCH2 ("VENDORS","","*","VN_NAME","VN_NAME VN_ADDR VN_CITY",VENDORS.MAX.LIST,VENDORS.START.LIST,VENDORS.LIST,LST.IDS,LIST.CT,EMSG)
*
IF EMSG<1> = 'No Items Found' THEN  ;* NO ITEMS FOUND
   VALUE = ''
END ELSE
   VALUE = VENDORS.LIST
END
*
CTRLIDS = "LST1VENNAME"
PROPS   =  GPITEMS
VALUES  =  VALUE
*
CTRLIDS<2> = "LSTGLTRANS"
PROPS<2>   =  GPITEMS
VALUES<2>  =  GL.CODES.LIST
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
END

