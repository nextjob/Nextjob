SUBROUTINE PROCESS.MAINT(GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: PROCESS.MAINT
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2008
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* DIALOG IS CALLED TO MAINTAIN PROCESS_STEPS FILE
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES PROCESS_STEPS.H
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "PROCESS.MAINT"
GUIERRORS = ''
GUIAPP = "PROCESS.MAINT"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "FORM1"
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
  CALL ATGUIERROR(3,'PROCESS.MAINT','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
  RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'PROCESS.MAINT' ELSE
  CALL ATGUIERROR(3,'PROCESS.MAINT','',0,GRFATAL,"'PROCESS.MAINT' is not on file.",GUIERRORS)
  RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
  CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('PROCESS.MAINT','FORM1','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
* INIT VARIABLES
*
GET_REC_MSG_LIST = '';* DEFAULT MESSAGE LIST FOR GET.RECORD ROUTINE
NEW_ID = ''          ;* PROCESS_STEP RECORD IDS MUST BE INITED
PROCESS_ID = ''
*
* LOAD CERT DESC DROP DOWN LIST
*
CERT.LIST = ''
CERT.IDX = ''
CALL LIST.LOAD(C.VALIDATION_FILE,"CERT.DESC","2",'',CERT.LIST,CERT.IDX,LIST.COUNT,EMSG)
CALL ATGUISETPROP('PROCESS.MAINT','FORM1',"LSTCERTCODE",GPITEMS,0,0,CERT.LIST,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"PROCESS_STEP_CHECKS",PROCESS_CHECKS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF PROCESS_CHECKS_REC = '' THEN
PROCESS_CHECKS_REC<1> = 'NotOnFile'
PROCESS_CHECKS_REC<2> = 'NotOnFile'
PROCESS_CHECKS_REC<3> = 'NotOnFile'
PROCESS_CHECKS_REC<4> = 'NotOnFile'
PROCESS_CHECKS_REC<5> = 'NotOnFile'
PROCESS_CHECKS_REC<6> = 'NotOnFile'
END
GOSUB LOAD.CHECK.LABELS
*
* load process step drop down list
*
PROCESS.LIST = '' ;* list of  process steps
GOSUB LOAD.LSTPRO
GOSUB CLEAR.BUFFERS
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
  CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN RETURN
  IF GUIEVT EQ GEQUIT THEN
    GUI.DLG.EXIT = 1
  END ELSE
    GUIAPP=OCONV(GUIAPP,'MCU')
    GUIFRM=OCONV(GUIFRM,'MCU')
    GUICTL=OCONV(GUICTL,'MCU')
    GOSUB GUI.DECODE.EVENT
  END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
  GUI.APP.LIST = ''
  CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
  IF GUI.APP.LIST EQ '' THEN
* Quit event fired after last GUI object is deleted - discard it
    CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
* We could call ATGUISHUTDOWN here if we wanted, but there's no
* harm just leaving the GUI environment initialized, in case we
* want to use it again...
  END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
* Add your code here...
END ELSE
* Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
 BEGIN CASE
 CASE GUIAPP='PROCESS.MAINT'
 BEGIN CASE
  CASE GUIFRM='FORM1'
  BEGIN CASE
   CASE GUICTL=''
   BEGIN CASE
    CASE GUIEVT=GECLOSE
    GOSUB GUI.PROCESS.MAINT.FORM1.CLOSE;GUIEVT=0
    END CASE
   CASE GUICTL='BTNCANCEL'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PROCESS.MAINT.FORM1.BTNCANCEL.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='BTNDELETE'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PROCESS.MAINT.FORM1.BTNDELETE.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='BTNFILE'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PROCESS.MAINT.FORM1.BTNFILE.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='BTNNEW'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PROCESS.MAINT.FORM1.BTNNEW.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='BTNSAVEAS'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PROCESS.MAINT.FORM1.BTNSAVEAS.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='CHK1'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PROCESS.MAINT.FORM1.CHK1.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='CHK2'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PROCESS.MAINT.FORM1.CHK2.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='CHK3'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PROCESS.MAINT.FORM1.CHK3.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='CHK4'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PROCESS.MAINT.FORM1.CHK4.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='CHK5'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PROCESS.MAINT.FORM1.CHK5.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='CHK6'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PROCESS.MAINT.FORM1.CHK6.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='LSTCERTCODE'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PROCESS.MAINT.FORM1.LSTCERTCODE.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='LSTPRO'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PROCESS.MAINT.FORM1.LSTPRO.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='LSTWC'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PROCESS.MAINT.FORM1.LSTWC.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='TXTHPP'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.PROCESS.MAINT.FORM1.TXTHPP.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTNEWID'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.PROCESS.MAINT.FORM1.TXTNEWID.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTPROCESSDESC'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.PROCESS.MAINT.FORM1.TXTPROCESSDESC.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTPROCESSNAME'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.PROCESS.MAINT.FORM1.TXTPROCESSNAME.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTSAVEAS'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.PROCESS.MAINT.FORM1.TXTSAVEAS.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTSUHRS'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.PROCESS.MAINT.FORM1.TXTSUHRS.VALIDATE;GUIEVT=0
    END CASE
   END CASE
  END CASE
 END CASE
 IF GUIEVT THEN
  * Unhandled event - may be dynamic
  GOSUB GUI.DYNAMIC.EVENTS
 END
END ELSE
 GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.BTNCANCEL.CLICK: *
*
* USER WANTS TO CANCEL WHAT WE WERE DOING, CHECK TO SEE IF A SAVE IS REQUIRED
*
GOSUB SAVE.PROCESS.CHECK
IF SAVE.PROCESS.CHECK.OK THEN
  GOSUB CLEAR.BUFFERS
  GOSUB LOAD.CONTROLS
  GOSUB RESET.FORM
  ENABLE.STATE = 0
  GOSUB ENABLE.CONTROLS
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.BTNNEW.CLICK: *
* user click new button, must want to add new code,
* if there is not an active edit going on,
* make text window visable and active.
*
GOSUB SAVE.PROCESS.CHECK
IF SAVE.PROCESS.CHECK.OK THEN
  GOSUB CLEAR.BUFFERS
  GOSUB LOAD.CONTROLS
*
  CTRLIDS = "LSTPRO"
  PROPS   = GPENABLED
  VALUES  = 0
*
  CTRLIDS<-1> = "LSTPRO"
  PROPS<-1>   = GPVALUE
  VALUES<-1>  = 0
*
  CTRLIDS<-1> = "FRMNEWID"
  PROPS<-1>   = GPVISIBLE
  VALUES<-1>  = 1
*
*
  CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
  CALL ATGUIACTIVATE(GUIAPP, GUIFRM, "TXTNEWID", GUIERRORS, GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.BTNSAVEAS.CLICK: *
*
CTRLIDS = "LSTPRO"
PROPS   = GPENABLED
VALUES  = 0
*
CTRLIDS<-1> = "LSTPRO"
PROPS<-1>   = GPVALUE
VALUES<-1>  = 0
*
CTRLIDS<-1> = "FRMSAVEAS"
PROPS<-1>   = GPVISIBLE
VALUES<-1>  = 1
*
*
CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
CALL ATGUIACTIVATE(GUIAPP, GUIFRM, "TXTSAVEAS", GUIERRORS, GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.CHK6.CLICK: *
PROCESS_REC<PS_CHK_6> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.CHK5.CLICK: *
PROCESS_REC<PS_CHK_5> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.CHK4.CLICK: *
PROCESS_REC<PS_CHK_4> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.CHK2.CLICK: *
PROCESS_REC<PS_CHK_2> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.CHK1.CLICK: *
PROCESS_REC<PS_CHK_1> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.CHK3.CLICK: *
PROCESS_REC<PS_CHK_3> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.CLOSE: *
* Default form close event handler
GOSUB SAVE.PROCESS.CHECK
IF SAVE.PROCESS.CHECK.OK THEN
  CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
  CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
  IF NUM.FORMS = 0 THEN
    GOSUB GUI.DIALOG.RETURN
    CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
    IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
    GUI.DLG.EXIT = 1
  END
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.BTNDELETE.CLICK: *
IF PROCESS_ID = "CUSTOM"  OR PROCESS_ID = "NOTES" THEN
  PRMPT = "The CUSTOM and NOTES Process Steps Cannot Be Deleted"
  CAPTION = "Process Maint"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
  PRMPT = "Delete Process Step: ":PROCESS_ID
  CAPTION = "Process Maint"
  STYLE   = 2  ;* !
  BUTTONS = 4  ;* YES/NO
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  IF RESPONSE = 6 THEN  ;* YES
    DELETE C.FILE.VAR(C.PROCESS_STEPS), PROCESS_ID
    GOSUB CLEAR.BUFFERS
    GOSUB LOAD.CONTROLS
    GOSUB LOAD.LSTPRO
    GOSUB RESET.FORM
    ENABLE.STATE = 0
    GOSUB ENABLE.CONTROLS

  END
END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.BTNFILE.CLICK: *
*
* VALIDATE PROCESS_STEPS RECORD
*
REC.OK = @TRUE
*
IF PROCESS_REC<PS_PROCESS_DESC> = '' THEN
  EMSG = 'Process Description Required, Please correct'
  REC.OK = @FALSE
END
*
IF PROCESS_REC<PS_CERT_DESC> = '' THEN PROCESS_REC<PS_CERT_DESC> = 'NONE'
*
IF REC.OK THEN
  CALL WRITE.RECORD(PROCESS_ID,PROCESS_REC,C.PROCESS_STEPS,@FALSE,ERROR_STATUS)
  GOSUB CLEAR.BUFFERS
  GOSUB LOAD.CONTROLS
  GOSUB LOAD.LSTPRO
  GOSUB RESET.FORM
*
  ENABLE.STATE = 0
  GOSUB ENABLE.CONTROLS
*
END ELSE
  PRMPT = EMSG
  CAPTION = "Process Maint"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.LSTCERTCODE.CLICK: *
CERT.ID = GUIARGS<1>
PROCESS_REC<PS_CERT_DESC> = CERT.LIST<1,CERT.ID,1>   ;* REM COMBO BOX CLICK RETURNS ACTUAL VALUE CLICK ON
IF CERT.ID > 0 THEN
  CALL ATGUISETPROP('PROCESS.MAINT','FORM1',"LBLCERTDESC",GPVALUE,0,0,CERT.LIST<1,CERT.ID,2>,GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.LSTPRO.CLICK: *
NEW_ID  =  PROCESS.LIST<1,GUIARGS<1>,1>
IF NEW_ID # '' THEN
*
* IF WE SELECTED A NEW PROCESS, DO WE NEED TO SAVE THE OLD ONE?
  IF NEW_ID # PROCESS_ID THEN
    GOSUB SAVE.PROCESS.CHECK
    IF SAVE.PROCESS.CHECK.OK THEN
      RELEASE C.FILE.VAR(C.PROCESS_STEPS), PROCESS_ID
      GOSUB CLEAR.BUFFERS
      PROCESS_ID = NEW_ID
*
      CALL GET.RECORD("PROCESS_STEPS",C.PROCESS_STEPS,PROCESS_ID,PROCESS_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      BEGIN CASE
        CASE ERROR_STATUS = ERR_NOF  ;* USER ENTERED NON - EXISTENT PROCESS_STEP id #
*
* UNLOCK, REPORT AND EXIT
          RELEASE C.FILE.VAR(C.PROCESS_STEPS), PROCESS_ID
          LOG.OPTS = "DISPLAY"
          ERROR_NBR = ERR_SYS
          ERROR_MSG =  "Missing PROCESS_STEPS record: ":PROCESS_ID
          CALL LOG.ERROR(LOG.OPTS,"PROCESS.MAINT", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)

        CASE ERROR_STATUS = ERR_BUSY  ;* USER ENTERED ORDER IS LOCKED BY SOMEONE ELSE
          PRMPT = "PROCESS_STEPS: ":PROCESS_ID:" in use, try later"
          CAPTION = "Process Maint"
          STYLE   = 2  ;* !
          BUTTONS = 0  ;* ok
          HELPID = ""
          CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
        CASE 1
          GOSUB LOAD.CONTROLS
          ENABLE.STATE = 1
          GOSUB ENABLE.CONTROLS
          SAVE_PROCESS_REC = PROCESS_REC
      END CASE
    END
  END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.LSTWC.CLICK: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.TXTHPP.VALIDATE: *
PROCESS_REC<PS_HRS_PPART> = ICONV(GUIARGS<2>,PS_HRS_PPART.CNV)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.TXTNEWID.VALIDATE: *
PROCESS_ID = GUIARGS<2>
*
* FIRST TEST TO MAKE SURE THERE IS NOT A PROCESS GROUP BY THIS NAME
CALL GET.RECORD("PROCESS_GROUPS",C.PROCESS_GROUPS,PROCESS_ID,GROUP_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)

IF GROUP_REC # '' THEN   ;* USER ENTERED AN EXISTING PROCESS_GROUPS id #
*

  PRMPT = "PROCESS_GROUPS: ":PROCESS_ID:" Already on file, Not Allowed"
  CAPTION = "Process Maint"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
END ELSE
*
* NOW LOOK FOR A PROCESS_STEPS RECORD BY THIS NAME, ALSO A NO NO
*
  CALL GET.RECORD("PROCESS_STEPS",C.PROCESS_STEPS,PROCESS_ID,TEST_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
  BEGIN CASE
    CASE ERROR_STATUS = ERR_NOF  ;* USER ENTERED NON - EXISTENT PROCESS_STEP id #
*
* WE EXPECT NEW PROCESS STEP TO NOT BE ON FILE, START ENTERING
      ENABLE.STATE = 1
      GOSUB ENABLE.CONTROLS
      PROCESS_REC = ''
*
      CALL ATGUIACTIVATE(GUIAPP, GUIFRM, "TXTPROCESSDESC", GUIERRORS, GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR

    CASE 1  ;* OTHERWISE WE HAVE ISSUES
      PRMPT = "PROCESS_STEPS: ":PROCESS_ID:" Already on file"
      CAPTION = "Process Maint"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      RELEASE C.FILE.VAR(C.PROCESS_STEPS), PROCESS_ID
  END CASE
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.TXTPROCESSDESC.VALIDATE: *
PROCESS_REC<PS_PROCESS_DESC> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.TXTPROCESSNAME.VALIDATE: *
PROCESS_REC<PS_PROCESS_NAME> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.TXTSAVEAS.VALIDATE: *
SAVEAS_ID = GUIARGS<2>
*
* FIRST TEST TO MAKE SURE THERE IS NOT A PROCESS GROUP BY THIS NAME
CALL GET.RECORD("PROCESS_GROUPS",C.PROCESS_GROUPS,SAVEAS_ID,GROUP_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)

IF GROUP_REC # '' THEN   ;* USER ENTERED AN EXISTING PROCESS_GROUPS id #
*

  PRMPT = "PROCESS_GROUPS: ":SAVEAS_ID:" Already on file, Not Allowed"
  CAPTION = "Process Maint"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
END ELSE
*
* NOW LOOK FOR A PROCESS_STEPS RECORD BY THIS NAME, ALSO A NO NO
*
  CALL GET.RECORD("PROCESS_STEPS",C.PROCESS_STEPS,SAVEAS_ID,SAVEAS_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
  BEGIN CASE
    CASE ERROR_STATUS = ERR_NOF  ;* USER ENTERED NON - EXISTENT PROCESS_STEP id #
*
* WE EXPECT SAVE AS PROCESS STEP TO NOT BE ON FILE
* UNLOCK ORIGINALLY OPENNED STEP
*
      RELEASE C.FILE.VAR(C.PROCESS_STEPS), PROCESS_ID
      PROCESS_ID = SAVEAS_ID
*
      PRMPT = "Click File Button to save ":PROCESS_ID
      CAPTION = "Process Maint"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
*
    CASE 1  ;* OTHERWISE WE HAVE ISSUES
      PRMPT = "PROCESS_STEPS: ":SAVEAS_ID:" Already on file"
      CAPTION = "Process Maint"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      RELEASE C.FILE.VAR(C.PROCESS_STEPS), SAVEAS_ID
  END CASE
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.MAINT.FORM1.TXTSUHRS.VALIDATE: *
PROCESS_REC<PS_SU_HRS> = ICONV(GUIARGS<2>,PS_SU_HRS.CNV)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"PROCESS.MAINT", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
************************************************************
* $PAGE$
************************************************************
CLEAR.BUFFERS:
*
*  INIT VARIBALES
*
PROCESS_ID  = ''
PROCESS_REC = ''        ;* PROCESS_STEP RECORD
SAVE_PROCESS_REC = ''  ;* RECORD AS READ IN (US FOR CHANGED TEST)
*
RETURN
************************************************************
* $PAGE$
************************************************************
ENABLE.CONTROLS: *
* ENBALE OR DISABLE FORM CONTROLS
*  ENABLE.STATE = 1 OR 0 PASSED BY CALLER
*
CTRLIDS = "TXTPROCESSDESC"
PROPS   = GPENABLED
VALUES  = ENABLE.STATE
*
CTRLIDS<2> = "TXTSUHRS"
PROPS<2>   = GPENABLED
VALUES<2>  = ENABLE.STATE
*
CTRLIDS<3> = "TXTHPP"
PROPS<3>   = GPENABLED
VALUES<3>  = ENABLE.STATE
*
CTRLIDS<4> = "BTNFILE"
PROPS<4>   = GPENABLED
VALUES<4>  = ENABLE.STATE
*
CTRLIDS<5> = "BTNDELETE"
PROPS<5>   = GPENABLED
VALUES<5>  = ENABLE.STATE
*
CTRLIDS<6> = "LSTCERTCODE"
PROPS<6>   = GPENABLED
VALUES<6>  = ENABLE.STATE
*
CTRLIDS<7> = "BTNNEW"
PROPS<7>   = GPENABLED
VALUES<7>  = NOT(ENABLE.STATE)
*
CTRLIDS<8> = "TXTPROCESSNAME"
PROPS<8>   = GPENABLED
VALUES<8>  = ENABLE.STATE
*
CTRLIDS<9> = "CHK1"
PROPS<9>   = GPENABLED
VALUES<9>  = ENABLE.STATE
*
CTRLIDS<10> = "CHK2"
PROPS<10>   = GPENABLED
VALUES<10>  = ENABLE.STATE
*
CTRLIDS<11> = "CHK3"
PROPS<11>   = GPENABLED
VALUES<11>  = ENABLE.STATE
*
CTRLIDS<12> = "CHK4"
PROPS<12>   = GPENABLED
VALUES<12>  = ENABLE.STATE
*
CTRLIDS<13> = "CHK5"
PROPS<13>   = GPENABLED
VALUES<13>  = ENABLE.STATE
*
CTRLIDS<14> = "CHK6"
PROPS<14>   = GPENABLED
VALUES<14>  = ENABLE.STATE
*
CTRLIDS<15> = "BTNSAVEAS"
PROPS<15>   = GPENABLED
VALUES<15>  = ENABLE.STATE
*
CTRLIDS<16> = "LSTPRO"
PROPS<16>   = GPENABLED
VALUES<16>  = NOT(ENABLE.STATE)
*
*WE DO NOT HAVE WC SETUP YET.
*LOCATE PROCESS_REC<PS_SU_HRS> IN WC.IDX<1> SETTING IDX THEN
*   CTRLIDS<?> = "LSTWC"
*   PROPS<?>   = GPVALUE
*   VALUES<?>  = IDX
*END
*
CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CONTROLS:
*
CTRLIDS = "TXTPROCESSDESC"
PROPS   = GPVALUE
VALUES  = PROCESS_REC<PS_PROCESS_DESC>
*
CTRLIDS<2> = "TXTSUHRS"
PROPS<2>   = GPVALUE
VALUES<2>  = OCONV(PROCESS_REC<PS_SU_HRS>,PS_SU_HRS.CNV)
*
CTRLIDS<3> = "TXTHPP"
PROPS<3>   = GPVALUE
VALUES<3>  = OCONV(PROCESS_REC<PS_HRS_PPART>,PS_HRS_PPART.CNV)
*
LOCATE PROCESS_REC<PS_CERT_DESC> IN CERT.IDX<1> SETTING IDX THEN
  CTRLIDS<4> = "LSTCERTCODE"
  PROPS<4>   = GPVALUE
  VALUES<4>  = IDX
  CTRLIDS<5> = "LBLCERTDESC"
  PROPS<5>   = GPVALUE
  VALUES<5>  = CERT.LIST<1,IDX,2>
END ELSE
  CTRLIDS<4> = "LSTCERTCODE"
  PROPS<4>   = GPVALUE
  VALUES<4>  = 0
  CTRLIDS<5> = "LBLCERTDESC"
  PROPS<5>   = GPVALUE
  VALUES<5>  = ""
END
*
CTRLIDS<6> = "TXTPROCESSNAME"
PROPS<6>   = GPVALUE
VALUES<6>  = PROCESS_REC<PS_PROCESS_NAME>
*
CTRLIDS<7> = "CHK1"
PROPS<7>   = GPVALUE
VALUES<7>  = PROCESS_REC<PS_CHK_1>
*
CTRLIDS<8> = "CHK2"
PROPS<8>   = GPVALUE
VALUES<8>  = PROCESS_REC<PS_CHK_2>
*
CTRLIDS<9> = "CHK3"
PROPS<9>   = GPVALUE
VALUES<9>  = PROCESS_REC<PS_CHK_3>
*
CTRLIDS<10> = "CHK4"
PROPS<10>   = GPVALUE
VALUES<10>  = PROCESS_REC<PS_CHK_4>
*
CTRLIDS<11> = "CHK5"
PROPS<11>   = GPVALUE
VALUES<11>  = PROCESS_REC<PS_CHK_5>
*
CTRLIDS<12> = "CHK6"
PROPS<12>   = GPVALUE
VALUES<12>  = PROCESS_REC<PS_CHK_6>
*
*
*WE DO NOT HAVE WC SETUP YET.
*LOCATE PROCESS_REC<PS_WORK_STATION> IN WC.IDX<1> SETTING IDX THEN
*   CTRLIDS<?> = "LSTWC"
*   PROPS<?>   = GPVALUE
*   VALUES<?>  = IDX
*END
*
CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CHECK.LABELS: *
CTRLIDS = "CHKLBL1"
PROPS   = GPVALUE
VALUES  = PROCESS_CHECKS_REC<1>
*
CTRLIDS<2> = "CHKLBL2"
PROPS<2>   = GPVALUE
VALUES<2>  = PROCESS_CHECKS_REC<2>
*
CTRLIDS<3> = "CHKLBL3"
PROPS<3>   = GPVALUE
VALUES<3>  = PROCESS_CHECKS_REC<3>
*
CTRLIDS<4> = "CHKLBL4"
PROPS<4>   = GPVALUE
VALUES<4>  = PROCESS_CHECKS_REC<4>
*
CTRLIDS<5> = "CHKLBL5"
PROPS<5>   = GPVALUE
VALUES<5>  = PROCESS_CHECKS_REC<5>
*
CTRLIDS<6> = "CHKLBL6"
PROPS<6>   = GPVALUE
VALUES<6>  = PROCESS_CHECKS_REC<6>
*
CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.LSTPRO: *
*
* LOADS THE LSTPRO THE PROCESS DROP DOWN LIST
*
MAX.LIST = 200
START.LIST = 1
CALL GUI.SEARCH2 ("PROCESS_STEPS","","*","@ID","@ID  PS_PROCESS_DESC",MAX.LIST,START.LIST,PROCESS.LIST,LST.IDS,LIST.CT,EMSG)
*
IF EMSG<1> = 'No Items Found' THEN  ;* NO ITEMS FOUND
  VALUE = ''
END ELSE
  VALUE = PROCESS.LIST
END
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"LSTPRO",GPITEMS,0,0,VALUE,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
SAVE.PROCESS.CHECK: *
*
* TEST TO SEE IF WE NEED TO UPDATE FILES:
* PREOCESS_STEP
SAVE.PROCESS.CHECK.OK = @TRUE
IF SAVE_PROCESS_REC # PROCESS_REC THEN
  PRMPT = "Process Step has changed but not saved.":@SVM:"Select Cancel, then File to save changes ":@SVM:"or Ok to proceed without saving changes to item"
  CAPTION = "Process Maint"
  STYLE   = 2  ;* ?
  BUTTONS = 1  ;* ok / cancel
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  IF RESPONSE = 2 THEN  ;* CANCEL THE CANCEL OR CLOSE REQUEST
    SAVE.PROCESS.CHECK.OK = @FALSE
  END
END
RETURN
************************************************************
* $PAGE$
************************************************************
RESET.FORM:
*
* SETUP FORM FOR NEXT PROCESS STEP SELECTION
*
CTRLIDS = "LSTPRO"
PROPS   = GPENABLED
VALUES  = 1
*
CTRLIDS<1> = "LSTPRO"
PROPS<1>   = GPVALUE
VALUES<1>  = 0
*
CTRLIDS<2> = "FRMNEWID"
PROPS<2>   = GPVISIBLE
VALUES<2>  = 0
*
CTRLIDS<3> = "FRMSAVEAS"
PROPS<3>   = GPVISIBLE
VALUES<3>  = 0
*
CTRLIDS<4> = "TXTNEWID"
PROPS<4>   = GPVALUE
VALUES<4>  = ""
*
CTRLIDS<5> = "TXTSAVEAS"
PROPS<5>   = GPVALUE
VALUES<5>  = ""
*
CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
END
