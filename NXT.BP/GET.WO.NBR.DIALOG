SUBROUTINE GET.WO.NBR.DIALOG(WO.ID,GET.TYPE,CALLER.BASE,CALLER.LEG,CALLER.RELEASE,CALLER.SPLIT,GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: GET.WO.NBR.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 10/15/2013
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
* WO.ID - RETURNED WORK ORDER ID OR NULL
* GET.TYPE - "NEW" FOR CREATING AN ID FOR A NEW WORK ORDER (ERROR IF WO ON FILE)
*          - "ANY" FOR PROMPT FOR EXISTING OR NEW WORK ORDER NUMBER
*          - "MODIFY" FOR PROMPT FOR EXISTING WORK ORDER NUMBER (ERROR IF WO NOT ON FILE)
* CALLER.BASE - PASSED WORD ORDER ID BASE VALUE
* CALLER.LEG  -  AND LEG
* cALLER.RELEASE AND RELEASE
* CALLER.SPLIT   AND SPLIT
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* DIALOG IS CALLED PROMPT FOR A NEW OR EXISTING WORK ORDER ID
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES WO.H
$INCLUDE NXT.INCLUDES WRT.H
*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "GET.WO.NBR.DIALOG"
GUIERRORS = ''
GUIAPP = "GET.WO.NBR"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "GET.WO.NBR"  ;* crease dialog startup time.

* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'GET.WO.NBR.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'GET.WO.NBR.DIALOG' ELSE
   CALL ATGUIERROR(3,'GET.WO.NBR.DIALOG','',0,GRFATAL,"'GET.WO.NBR.DIALOG' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
*
WO.BASE = CALLER.BASE
WO.LEG = CALLER.LEG
WO.RELEASE = CALLER.RELEASE
WO.SPLIT = CALLER.SPLIT
GET.REC.MSG.LIST = ''  ;* INIT FOR GET.RECORD CALLS (USE DEFAULT)
*
WO.ID = ''   ;* INIT WORK ORDER AS NOT FOUND
*
CALL ATGUISHOW('GET.WO.NBR','GET.WO.NBR','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*
GOSUB LOAD.WO.NBR.CTRLS
*-->END GUI STARTUP<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='GET.WO.NBR'
         BEGIN CASE
            CASE GUIFRM='GET.WO.NBR'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.GET.WO.NBR.GET.WO.NBR.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCANCEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.GET.WO.NBR.GET.WO.NBR.BTNCANCEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNOK'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.GET.WO.NBR.GET.WO.NBR.BTNOK.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNSEARCH'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.GET.WO.NBR.GET.WO.NBR.BTNSEARCH.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='CBWONBR'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.GET.WO.NBR.GET.WO.NBR.CBWONBR.CLICK;GUIEVT=0
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.GET.WO.NBR.GET.WO.NBR.CBWONBR.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTLEGID'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.GET.WO.NBR.GET.WO.NBR.TXTLEGID.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTRELID'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.GET.WO.NBR.GET.WO.NBR.TXTRELID.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTSPLITID'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.GET.WO.NBR.GET.WO.NBR.TXTSPLITID.VALIDATE;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.GET.WO.NBR.GET.WO.NBR.CBWONBR.CLICK: *
* USER CLICK ON A WORK ORDER AS DISPLAYED IN THE DROPDOWN LIST
* GUIARGS<1> IS THE CLICKED ON WORK ORDER ID
* PARSE INTO THE CORRESPONDING VARIABLE AND DISPLAY
*
IF GUIARGS<1> # '' THEN
   WO.BASE = FIELD(GUIARGS<1>,'.',1)
   WO.LEG  = FIELD(GUIARGS<1>,'.',2)
   WO.RELEASE = FIELD(GUIARGS<1>,'.',3)
   WO.SPLIT = FIELD(GUIARGS<1>,'.',4)
   GOSUB GUI.GET.WO.NBR.GET.WO.NBR.BTNOK.CLICK

END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.GET.WO.NBR.GET.WO.NBR.CBWONBR.VALIDATE: *
* SET WO.BASE VALUE BASED ON USER ENTRY
WO.BASE =OCONV(GUIARGS<2>,"MCU")
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.GET.WO.NBR.GET.WO.NBR.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.GET.WO.NBR.GET.WO.NBR.BTNCANCEL.CLICK: *
WO.ID = ''
GOSUB GUI.GET.WO.NBR.GET.WO.NBR.CLOSE;GUIEVT=0
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.GET.WO.NBR.GET.WO.NBR.BTNOK.CLICK: *
*
* ASSEMBLE AND VALIDATE WO.ID
* WO.LEG,WO.RELEASE,WO.SPLIT POPULATED, NUMBERIC AND GE 0
* IF GET.TYPE = 'NEW' WO.ID CANNOT BE ON FILE!
EMSG = ''
WO.ID = ''
*
BEGIN CASE
   CASE WO.BASE = ''
      EMSG = 'Invalid Value for Work Order Base'
   CASE WO.LEG < 0
      EMSG = 'Invalid Value for Leg'
   CASE WO.RELEASE < 0
      EMSG = 'Invalid Value for Release'
   CASE WO.SPLIT < 0
      EMSG = 'Invalid Value for Split'
END CASE
*
IF EMSG # '' THEN
   PRMPT = EMSG:' ,Please Correct'
   CAPTION = "Get Work Order Number"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
   **
   ** ASSEMBLE WORK ORDER ID
   WO.ID = WO.BASE:'.':WO.LEG:'.':WO.RELEASE:'.':WO.SPLIT
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"CBWONBR",GPVALUE,0,0, WO.ID,GUIERRORS,GUISTATE)
   **
   ** IF WE ARE CREATING A NEW WORK ORDER, THIS ID CANNOT BE ON FILE
   **
   CALL GET.RECORD("WO",C.WO,WO.ID,TEST_REC,@FALSE,ERROR.STATUS,GET.REC.MSG.LIST,GUIERRORS,GUISTATE)
   BEGIN CASE
      CASE GET.TYPE = 'NEW'
         IF TEST_REC # ''  THEN ;* TEST FOR WORK ORDER ON FILE
            PRMPT = "Provided Work Order Id is Already on File, Cannot Use This Id, Please Correct"
            CAPTION = "Get Work Order Number"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            WO.ID = ''
         END ELSE
            GOSUB GUI.GET.WO.NBR.GET.WO.NBR.CLOSE;GUIEVT=0
         END
         **
      CASE GET.TYPE = "MODIFY"
         IF TEST_REC = '' THEN
            * MUST BE ON FILE, ASSUME USER ENTERED SOMETHING INVALID
            PRMPT = "Work Order Id: ":WO.ID:" Not Found"
            CAPTION = "Get Work Order Number"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            WO.ID = ''
         END ELSE
            GOSUB GUI.GET.WO.NBR.GET.WO.NBR.CLOSE;GUIEVT=0
         END
      CASE GET.TYPE = "ANY"
         *
         * AS LONG AS THIS IS A VALID WORK ORDER FORMAT, JUST RETURN IF
         *
         GOSUB GUI.GET.WO.NBR.GET.WO.NBR.CLOSE;GUIEVT=0
      CASE 1
         *
         * BAD ENTRY TYPE,
         GUI.DLG.EXIT = 1
         LOG.OPTS = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG =  'GET.WO.NBR.DIALOG ENTERED WITH INVALID GET.TYPE: ':GET.TYPE
         CALL LOG.ERROR(LOG.OPTS,"GET.WO.NBR.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         WO.ID = ''
         GOSUB GUI.GET.WO.NBR.GET.WO.NBR.CLOSE;GUIEVT=0
   END CASE
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.GET.WO.NBR.GET.WO.NBR.BTNSEARCH.CLICK: *
*
* LOADS CBWONBR combo box DROP DOWN LIST WITH WORK ORDERS MATCHING WO.BASE AS POPULATED BY GET.WO.NBR.GET.WO.NBR.CBWONBR.VALIDATE
*
* WO.BASE PULLED FROM COMPO BOX VALIDATE
MAX.LIST = 500
START.LIST = 1
WO.BASE.LIST = ''
WO.IDS = ''
IF WO.BASE # '' THEN
   *
   CALL GUI.SEARCH2 ("WO","WO.BASE","":WO.BASE,"@ID","WO_PARTNBR",MAX.LIST,START.LIST,WO.BASE.LIST,WO.IDS,LIST.CT,EMSG)
   *
   IF LIST.CT = 0 THEN  ;* NO ITEMS FOUND
      VALUE = ''
   END ELSE
      VALUE = WO.BASE.LIST
   END
   *
   *
   *   CALL ATGUISETPROP(GUIAPP,GUIFRM,"CBWONBR",GPITEMS,0,0,VALUE,GUIERRORS,GUISTATE)
   * BUG IN ACCUTERM REQUIRES WO VALUE TO BE CLEAR, OTHERWISE CLICK ON DOWN ARROW OF COMBO BOX FIRES CLICK EVENT AND IT SHOULD NOT!
   *
   CTRLIDS = ''
   PROPS   = ''
   VALUES  = ''
   *
   CI = 1
   CTRLIDS<CI> = "CBWONBR"
   PROPS<CI>   = GPVALUE
   VALUES<CI>  = 'Click to See Results'
   *
   CI = 2
   CTRLIDS<CI> = "CBWONBR"
   PROPS<CI>   = GPITEMS
   VALUES<CI>  = VALUE
   *
   CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)


   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.GET.WO.NBR.GET.WO.NBR.TXTLEGID.VALIDATE: *
WO.LEG = GUIARGS<2>
IF  WO.LEG < 0 THEN
   PRMPT = 'Invalid Value for Leg, Please Correct'
   CAPTION = "Get Work Order Number"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   WO.LEG = ''
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.GET.WO.NBR.GET.WO.NBR.TXTRELID.VALIDATE: *
WO.RELEASE = GUIARGS<2>
IF  WO.RELEASE < 0 THEN
   PRMPT = 'Invalid Value for Release, Please Correct'
   CAPTION = "Get Work Order Number"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   WO.RELEASE = ''
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.GET.WO.NBR.GET.WO.NBR.TXTSPLITID.VALIDATE: *
WO.SPLIT = GUIARGS<2>
IF  WO.SPLIT < 0 THEN
   PRMPT = 'Invalid Value for Split, Please Correct'
   CAPTION = "Get Work Order Number"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   WO.SPLIT = ''
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"GET.WO.NBR.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
******************************************************************************************
*
LOAD.WO.NBR.CTRLS:
*
* routine LOADS WORK ORDER controls
*
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CI = 1
CTRLIDS<CI> = "CBWONBR"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO.BASE
*
CI = 2
CTRLIDS<CI> = "TXTLEGID"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO.LEG
*
CI = 3
CTRLIDS<CI> = "TXTRELID"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO.RELEASE
*
CI = 4
CTRLIDS<CI> = "TXTSPLITID"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO.SPLIT
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
*
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
*
*
END
