SUBROUTINE COMP.MAINT(GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: COMP.MAINT
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2008
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
* FILES:
*
*
* DESIGN DESCRIPTION:
* Creates and maintains Company Record
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "COMP.MAINT"
GUIERRORS = ''
GUIAPP = "COMPANY"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "COMPANY"
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
  CALL ATGUIERROR(3,'COMP.MAINT','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
  RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'COMP.MAINT' ELSE
  CALL ATGUIERROR(3,'COMP.MAINT','',0,GRFATAL,"'COMP.MAINT' is not on file.",GUIERRORS)
  RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
  CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
STATUS.LIST = ''  ;* LIST FOR CUSTOMER STATUS SELECTION
CALL LIST.LOAD(C.VALIDATION_FILE,"STATES","2",'',STATES.LIST,STATES.IDX,LIST.COUNT,EMSG)
CALL ATGUISETPROP(GUIAPP,GUIFRM,"LSTSTATE",GPITEMS,0,0,STATES.LIST,GUIERRORS,GUISTATE)
*
CALL ATGUISHOW('COMPANY','COMPANY','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
* COMPANY RECORD
*
GET_REC_MSG_LIST = ''
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"COMPANY_RECORD",COMPANY_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF ERROR_STATUS = ERR_BUSY THEN
  PRMPT = "Company Record in use, Try later"
  CAPTION = "Comp.Maint"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok only
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  RETURN
END ELSE
  IF COMPANY_REC = '' THEN
    PRMPT = "Initial Company Record Creation"
    CAPTION = "Comp.Maint"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok only
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  END
  GOSUB LOAD.FORM
END
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
  CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN RETURN
  IF GUIEVT EQ GEQUIT THEN
    GUI.DLG.EXIT = 1
  END ELSE
    GUIAPP=OCONV(GUIAPP,'MCU')
    GUIFRM=OCONV(GUIFRM,'MCU')
    GUICTL=OCONV(GUICTL,'MCU')
    GOSUB GUI.DECODE.EVENT
  END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
  GUI.APP.LIST = ''
  CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
  IF GUI.APP.LIST EQ '' THEN
    * Quit event fired after last GUI object is deleted - discard it
    CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
    * We could call ATGUISHUTDOWN here if we wanted, but there's no
    * harm just leaving the GUI environment initialized, in case we
    * want to use it again...
  END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
  * Add your code here...
END ELSE
  * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
  BEGIN CASE
    CASE GUIAPP='COMPANY'
      BEGIN CASE
        CASE GUIFRM='COMPANY'
          BEGIN CASE
            CASE GUICTL=''
              BEGIN CASE
                CASE GUIEVT=GECLOSE
                  GOSUB GUI.COMPANY.COMPANY.CLOSE;GUIEVT=0
              END CASE
            CASE GUICTL='BTNCANCEL'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.COMPANY.COMPANY.BTNCANCEL.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNFILE'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.COMPANY.COMPANY.BTNFILE.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='LSTSTATE'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.COMPANY.COMPANY.LSTSTATE.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='TXTADDR'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.COMPANY.COMPANY.TXTADDR.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTADDR2'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.COMPANY.COMPANY.TXTADDR2.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTAPCUTOFF'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.COMPANY.COMPANY.TXTAPCUTOFF.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTCITY'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.COMPANY.COMPANY.TXTCITY.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTCO'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.COMPANY.COMPANY.TXTCO.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTEMAIL'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.COMPANY.COMPANY.TXTEMAIL.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTFAX'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.COMPANY.COMPANY.TXTFAX.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTLABORCUTOFF'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.COMPANY.COMPANY.TXTLABORCUTOFF.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTNAME'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.COMPANY.COMPANY.TXTNAME.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTPHONE'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.COMPANY.COMPANY.TXTPHONE.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTWEB'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.COMPANY.COMPANY.TXTWEB.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTZIP'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.COMPANY.COMPANY.TXTZIP.VALIDATE;GUIEVT=0
              END CASE
          END CASE
      END CASE
  END CASE
  IF GUIEVT THEN
    * Unhandled event - may be dynamic
    GOSUB GUI.DYNAMIC.EVENTS
  END
END ELSE
  GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.BTNCANCEL.CLICK: *
GOSUB GUI.COMPANY.COMPANY.CLOSE;GUIEVT=0
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.BTNFILE.CLICK: *
GOSUB VALIDATE.COMP
IF COMP.VALID THEN
  CALL WRITE.RECORD("COMPANY_RECORD",COMPANY_REC,C.SYSTEM_FILE,@FALSE,ERROR_STATUS)
  GOSUB GUI.COMPANY.COMPANY.CLOSE;GUIEVT=0
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.COMPANY.COMPANY.CLOSE: *
RELEASE C.FILE.VAR(C.SYSTEM_FILE), "COMPANY_RECORD"
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
  GOSUB GUI.DIALOG.RETURN
  CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
  GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.LSTSTATE.CLICK: *
COMPANY_REC<COMP_STATE> =  STATES.LIST<1,GUIARGS<1>,1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.TXTADDR.VALIDATE: *
COMPANY_REC<COMP_ADDR> =  GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.TXTADDR2.VALIDATE: *
COMPANY_REC<COMP_ADDR2> =  GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.TXTAPCUTOFF.VALIDATE: *
DATE.TEST = ICONV(GUIARGS<2>,"D")
BEGIN CASE
  CASE DATE.TEST > DATE()
    PRMPT = 'Cannot Set Cutoff Date to a Future Date , Please correct'
    CAPTION = "Company Maint"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok / cancel
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  CASE COMPANY_REC<COMP_APCUTOFF> + 0 > DATE.TEST
    PRMPT = 'Warning, New Cutoff Date: ':OCONV(DATE.TEST,COMP_CUTOFF.CNV):' Prior to Current: ':OCONV(COMPANY_REC<COMP_APCUTOFF>,COMP_CUTOFF.CNV)
    CAPTION = "Company Maint"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok / cancel
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
    COMPANY_REC<COMP_APCUTOFF> = DATE.TEST
  CASE 1
    COMPANY_REC<COMP_APCUTOFF> = DATE.TEST
END CASE
*
CTRLIDS = "TXTAPCUTOFF"
PROPS   = GPVALUE
VALUES  = OCONV(COMPANY_REC<COMP_APCUTOFF>,COMP_CUTOFF.CNV)
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.TXTCITY.VALIDATE: *
COMPANY_REC<COMP_CITY> =  GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.TXTCO.VALIDATE: *
COMPANY_REC<COMP_COUNTRY> =  GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.TXTEMAIL.VALIDATE: *
COMPANY_REC<COMP_EMAIL> =  GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.TXTFAX.VALIDATE: *
COMPANY_REC<COMP_FAX> =  GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.TXTLABORCUTOFF.VALIDATE: *
*
DATE.TEST = ICONV(GUIARGS<2>,"D")
BEGIN CASE
  CASE DATE.TEST > DATE()
    PRMPT = 'Cannot Set Cutoff Date to a Future Date , Please correct'
    CAPTION = "Company Maint"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok / cancel
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  CASE COMPANY_REC<COMP_LABCUTOFF> + 0 > DATE.TEST
    PRMPT = 'Warning, New Cutoff Date: ':OCONV(DATE.TEST,COMP_CUTOFF.CNV):' Prior to Current: ':OCONV(COMPANY_REC<COMP_LABCUTOFF>,COMP_CUTOFF.CNV)
    CAPTION = "Company Maint"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok / cancel
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
    COMPANY_REC<COMP_APCUTOFF> = DATE.TEST
  CASE 1
    COMPANY_REC<COMP_LABCUTOFF> = DATE.TEST
END CASE
*
CTRLIDS = "TXTLABORCUTOFF"
PROPS   = GPVALUE
VALUES  = OCONV(COMPANY_REC<COMP_LABCUTOFF>,COMP_CUTOFF.CNV)
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.TXTNAME.VALIDATE: *
COMPANY_REC<COMP_NAME> =  GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.TXTPHONE.VALIDATE: *
COMPANY_REC<COMP_PHONE> =  GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.TXTWEB.VALIDATE: *
COMPANY_REC<COMP_WEB> =  GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.COMPANY.COMPANY.TXTZIP.VALIDATE: *
COMPANY_REC<COMP_ZIP> =  GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"COMP.MAINT", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
* $PAGE$
************************************************************
LOAD.FORM:
*
* routine LOADS controls COMPANY RECORD
*
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<-1> = "TXTNAME"
PROPS<-1>   = GPVALUE
VALUES<-1>  = COMPANY_REC<COMP_NAME>
*
CTRLIDS<-1> = "TXTADDR"
PROPS<-1>   = GPVALUE
VALUES<-1>  = COMPANY_REC<COMP_ADDR>
*
CTRLIDS<-1> = "TXTADDR2"
PROPS<-1>   = GPVALUE
VALUES<-1>  = COMPANY_REC<COMP_ADDR2>
*
CTRLIDS<-1> = "TXTCITY"
PROPS<-1>   = GPVALUE
VALUES<-1>  = COMPANY_REC<COMP_CITY>
*
LOCATE COMPANY_REC<COMP_STATE> IN STATES.IDX<1> SETTING IDX THEN
  CTRLIDS<-1> = "LSTSTATE"
  PROPS<-1>   = GPVALUE
  VALUES<-1>  = IDX
END
*
*
CTRLIDS<-1> = "TXTZIP"
PROPS<-1>   = GPVALUE
VALUES<-1>  = COMPANY_REC<COMP_ZIP>
*
CTRLIDS<-1> = "TXTCO"
PROPS<-1>   = GPVALUE
VALUES<-1>  = COMPANY_REC<COMP_COUNTRY>
*
CTRLIDS<-1> = "TXTPHONE"
PROPS<-1>   = GPVALUE
VALUES<-1>  = COMPANY_REC<COMP_PHONE>
*
CTRLIDS<-1> = "TXTFAX"
PROPS<-1>   = GPVALUE
VALUES<-1>  = COMPANY_REC<COMP_FAX>
*
CTRLIDS<-1> = "TXTWEB"
PROPS<-1>   = GPVALUE
VALUES<-1>  = COMPANY_REC<COMP_WEB>
*
CTRLIDS<-1> = "TXTEMAIL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = COMPANY_REC<COMP_EMAIL>
*
CTRLIDS<-1> = "TXTAPCUTOFF"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OCONV(COMPANY_REC<COMP_APCUTOFF>,COMP_CUTOFF.CNV)
*
CTRLIDS<-1> = "TXTLABORCUTOFF"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OCONV(COMPANY_REC<COMP_LABCUTOFF>,COMP_CUTOFF.CNV)
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
**
RETURN
************************************************************
* $PAGE$
************************************************************
VALIDATE.COMP:
COMP.VALID = @TRUE
VALID.MSG = ''
BEGIN CASE
  CASE COMPANY_REC<COMP_NAME> = ''
    VALID.MSG = 'Company Name is a required field'
  CASE COMPANY_REC<COMP_ADDR> = ''
    VALID.MSG = 'Company Address is a required field'
  CASE COMPANY_REC<COMP_CITY> = ''
    VALID.MSG = 'Company City is a required field'
  CASE COMPANY_REC<COMP_STATE> = ''
    VALID.MSG = 'Company State is a required field'
  CASE COMPANY_REC<COMP_ZIP> = ''
    VALID.MSG = 'Company Zip is a required field'
  CASE COMPANY_REC<COMP_PHONE> = ''
    VALID.MSG = 'Company Phone is a required field'
END CASE
IF VALID.MSG # '' THEN
  COMP.VALID = @FALSE
  PRMPT = VALID.MSG:', please correct'
  CAPTION = "Company Maint"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok / cancel
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
END
