SUBROUTINE WOI.DIALOG(GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: WOI.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 05/30/2014
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* DIALOG IS CALLED TO ISSUE PRODUCT TO WORK ORDER
*
* ALL WORK ORDER ISSUES ARE BASED ON A PART BEING ISSUED TO THE WORK ORDER
* THE PART MAY REPRESENT A RAW MATERIAL ITEM OR A SUB ASSEMBLY.
* THE ASSOCIATED COST ISSUED TO THE JOB IS FOUND ON THE RECEIPTS RECORD CREATED WHEN THE PART
* WAS RECEIVED INTO STORES. EITHER VIA PURCHASING OR RECEIPT FROM WORK ORDERS.
* NOTE THERE IS AN ISSUE WITH THIS LOGIC:
* THERE IS A TIME LAG BETWEEN PO / WO RECIEPTS AND THE TIME THE ACTUAL VALUE IS ADDED ONTO THE RECEIPTS RECORD
* FOR PURCHASED ITEMS THIS IS THE TIME IT TAKES TO GET THE INVOICE ENTERED INTO THE SYSTEM.
* FOR WORK ORDER RECEIPTS THIS IS THE TIME IT TAKES FOR COSTING TO BE PERFORMED.
* SO WHEN GENERATING COST INFORMATION FOR THE WORK ORDER TO WHICH AN ITEM IS ISSUED
*  IF THERE IS NO VALUE IN THE RECEIPTS RECORD THE STANDARD COST VALUE IS USED 
*  (FOUND ON THE PART RECORD SUM OF PT_STD_MATL PT_STD_OP PT_STD_LAB)
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES PART_TRANS.H
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
*
*
$INCLUDE GUIBP ATGUIEQUATES
GUIERRORS = ''
PROG_ID   = "WOI.DIALOG"
GUIERRORS = ''
GUIAPP = "WOI"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "WOI"  ;* crease dialog startup time.
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
 CALL ATGUIERROR(3,'WOI','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
 RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'WOI' ELSE
 CALL ATGUIERROR(3,'WOI','',0,GRFATAL,"'WOI' is not on file.",GUIERRORS)
 RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
 CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
 IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('WOI','WOI','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
 CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
 IF GUIERRORS<1> >= 2 THEN RETURN
 IF GUIEVT EQ GEQUIT THEN
  GUI.DLG.EXIT = 1
 END ELSE
  GUIAPP=OCONV(GUIAPP,'MCU')
  GUIFRM=OCONV(GUIFRM,'MCU')
  GUICTL=OCONV(GUICTL,'MCU')
  GOSUB GUI.DECODE.EVENT
 END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
 GUI.APP.LIST = ''
 CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
 IF GUI.APP.LIST EQ '' THEN
  * Quit event fired after last GUI object is deleted - discard it
  CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
  * We could call ATGUISHUTDOWN here if we wanted, but there's no
  * harm just leaving the GUI environment initialized, in case we
  * want to use it again...
 END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
 * Add your code here...
END ELSE
 * Add your code here...
END
RETURN 
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
 BEGIN CASE
 CASE GUIAPP='WOI'
 BEGIN CASE
  CASE GUIFRM='WOI'
  BEGIN CASE
   CASE GUICTL=''
   BEGIN CASE
    CASE GUIEVT=GECLOSE
    GOSUB GUI.WOI.WOI.CLOSE;GUIEVT=0
    END CASE
   CASE GUICTL='BTNCANCEL'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.WOI.WOI.BTNCANCEL.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='BTNISSUE'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.WOI.WOI.BTNISSUE.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='GRDCURRENT'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WOI.WOI.GRDCURRENT.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='GRID1'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATECELL
    GOSUB GUI.WOI.WOI.GRID1.VALIDATECELL;GUIEVT=0
    CASE GUIEVT=GEVALIDATEROW
    GOSUB GUI.WOI.WOI.GRID1.VALIDATEROW;GUIEVT=0
    END CASE
   CASE GUICTL='TXTITEMDESC'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WOI.WOI.TXTITEMDESC.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTPN'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WOI.WOI.TXTPN.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTQTY'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WOI.WOI.TXTQTY.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTWORKORDERL'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WOI.WOI.TXTWORKORDERL.VALIDATE;GUIEVT=0
    END CASE
   END CASE
  END CASE
 END CASE
 IF GUIEVT THEN
  * Unhandled event - may be dynamic
  GOSUB GUI.DYNAMIC.EVENTS
 END
END ELSE
 GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.WOI.WOI.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
 GOSUB GUI.DIALOG.RETURN
 CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
 IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
 GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WOI.WOI.BTNCANCEL.CLICK: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WOI.WOI.BTNISSUE.CLICK: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WOI.WOI.GRDCURRENT.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WOI.WOI.GRID1.VALIDATECELL: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WOI.WOI.GRID1.VALIDATEROW: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WOI.WOI.TXTEMPID.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WOI.WOI.TXTITEMDESC.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WOI.WOI.TXTPN.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WOI.WOI.TXTQTY.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WOI.WOI.TXTWORKORDERL.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
*
END
