SUBROUTINE APCHK.STAT.DIALOG(GUIERRORS,GUISTATE)
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: APCHK.STAT.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2014
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
*
*
* FILES:
*
*
* DESIGN DESCRIPTION:
*  Voids or marks Returned AP Check
*
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES VENDORS.H
$INCLUDE NXT.INCLUDES AP_INVOICE.H
$INCLUDE NXT.INCLUDES AP_CHECKS.H
$INCLUDE NXT.INCLUDES VALIDATION_FILE.H
*
*-->BEGIN GUI HEADER<--*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "APCHK.STAT.DIALOG"
GUIERRORS = ''
GUIAPP = "APCHK"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "APCHK"
*
MSG_LIST = '' ;* FOR GET.RECORD ROUTINE
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
  CALL ATGUIERROR(3,'APCHK.STAT.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
  RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'APCHK.STAT.DIALOG' ELSE
  CALL ATGUIERROR(3,'APCHK.STAT.DIALOG','',0,GRFATAL,"'APCHK.STAT.DIALOG' is not on file.",GUIERRORS)
  RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
  CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('APCHK','APCHK','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
*
* GL TRANSACTION CODESS
*
CALL GET.RECORD("VALIDATION_FILE",C.VALIDATION_FILE,"GL.TRANS.CODES",GLC_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF GLC_REC = '' THEN
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "Missing GL.TRANS.CODES from VALIDATION_FILE"
  CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  GOSUB GUI.APCHK.APCHK.CLOSE;GUIEVT=0
END
*
* BANK CODES
*
CALL GET.RECORD("VALIDATION_FILE",C.VALIDATION_FILE,"BANKS",BANKS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF BANKS_REC = '' THEN
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "Missing BANKS from VALIDATION_FILE"
  CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  GOSUB GUI.APCHK.APCHK.CLOSE;GUIEVT=0
END
*
*
*
* CREATE LISTS FOR  DROP DOWN CONTROLS
*
BANK.LIST  = ''  ;* LIST FOR PAYMENT TERMS SELECTION
BANK.IDX   = ''
*
CALL LIST.LOAD(C.VALIDATION_FILE,"BANKS","2",'',BANK.LIST,BANK.IDX,LIST.COUNT,EMSG)
CTRLIDS = "LSTBANK"
PROPS   = GPITEMS
VALUES  = BANK.LIST
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
  CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN RETURN
  IF GUIEVT EQ GEQUIT THEN
    GUI.DLG.EXIT = 1
  END ELSE
    GUIAPP=OCONV(GUIAPP,'MCU')
    GUIFRM=OCONV(GUIFRM,'MCU')
    GUICTL=OCONV(GUICTL,'MCU')
    GOSUB GUI.DECODE.EVENT
  END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
  GUI.APP.LIST = ''
  CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
  IF GUI.APP.LIST EQ '' THEN
    * Quit event fired after last GUI object is deleted - discard it
    CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
    * We could call ATGUISHUTDOWN here if we wanted, but there's no
    * harm just leaving the GUI environment initialized, in case we
    * want to use it again...
  END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
  * Add your code here...
END ELSE
  * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
  BEGIN CASE
    CASE GUIAPP='APCHK'
      BEGIN CASE
        CASE GUIFRM='APCHK'
          BEGIN CASE
            CASE GUICTL=''
              BEGIN CASE
                CASE GUIEVT=GECLOSE
                  GOSUB GUI.APCHK.APCHK.CLOSE;GUIEVT=0
              END CASE
            CASE GUICTL='BTNCLOSE'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.APCHK.APCHK.BTNCLOSE.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNRTN'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.APCHK.APCHK.BTNRTN.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNVOID'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.APCHK.APCHK.BTNVOID.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='LSTBANK'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.APCHK.APCHK.LSTBANK.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='TXTCHECK'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.APCHK.APCHK.TXTCHECK.VALIDATE;GUIEVT=0
              END CASE
          END CASE
      END CASE
  END CASE
  IF GUIEVT THEN
    * Unhandled event - may be dynamic
    GOSUB GUI.DYNAMIC.EVENTS
  END
END ELSE
  GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.APCHK.APCHK.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
  GOSUB GUI.DIALOG.RETURN
  CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
  GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APCHK.APCHK.BTNCLOSE.CLICK: *
GOSUB CLEAR.BUFFERS
GOSUB LOAD.CONTROLS
IX =1
CTRLIDS = "LSTBANK"
PROPS   = GPVALUE
VALUES  = 0
*
IX = 2
CTRLIDS<IX> = "TXTCHECK"
PROPS<IX>  =  GPVALUE
VALUES<IX>  = ""
**
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
*
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APCHK.APCHK.BTNRTN.CLICK: *
CHECK_REC<AC_RETURNED> = @TRUE
CALL NXT.LOCKWAITING("AP_CHECKS",C.AP_CHECKS,AP_CHECK_ID,GUIERRORS,GUISTATE)
CALL WRITE.RECORD(AP_CHECK_ID,CHECK_REC,C.AP_CHECKS,@FALSE,ERROR_STATUS)
GOSUB GUI.APCHK.APCHK.BTNCLOSE.CLICK
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APCHK.APCHK.BTNVOID.CLICK: *
IF CHECK_REC<AC_RETURNED> THEN
  NULL  ;* SHOULD NOT HAPPEN!
END ELSE
  *
  PAID.INV.LIST = CHECK_REC<AC_INVOICES>
  INV.COUNT = DCOUNT(PAID.INV.LIST<1>,@VM)
  *
  INV.TEXT = ''
  FOR I = 1 TO INV.COUNT
    INV.TEXT := FIELD(PAID.INV.LIST<1,I>,'*',2):' '
  NEXT I
  *
  PRMPT = "Void Check ":FIELD(AP_CHECK_ID,'*',1):' ':FIELD(AP_CHECK_ID,'*',2):"?"
  CAPTION = "AP Check Status"
  STYLE   = 3  ;* ?
  BUTTONS = 1  ;* ok /cancel
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  IF RESPONSE = NXT.OK.RSP THEN
    *
    PRMPT = "Voiding Check ":GUIARGS<2>: "Reestablishes the following ":VN_REC<VN_NAME>:" Invoices: ":INV.TEXT:', Continue?'
    CAPTION = "AP Check Status"
    STYLE   = 3  ;* ?
    BUTTONS = 4  ;* YES/NO
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
    IF RESPONSE = NXT.YES.RSP THEN
      *
      * FIRST DELETE CHECK INFO ON INVOICES AND RESET TOTALS
      *

      FOR I = 1 TO INV.COUNT
        AP_ID = PAID.INV.LIST<1,I>

        CALL NXT.LOCKWAITING("AP_INVOICE",C.AP_INVOICE,AP_ID,GUIERRORS,GUISTATE)
        CALL GET.RECORD("AP_INVOICE",C.AP_INVOICE,AP_ID,AP_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
        IF AP_REC = ''  THEN

          PRMPT = "Invoice ":AP_ID:" Referenced on this AP Check but not found, See SYS ADMIN"
          CAPTION = "AP Check Status"
          STYLE   = 2  ;* !
          BUTTONS = 0  ;* ok
          HELPID = ""
          CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
        END ELSE
          *
          * UPDATE AP INVOICE BAL DUE
          *
          AP_REC<AP_BAL_DUE> = AP_REC<AP_INV_AMT>    ;* NEED TO LOOK AT THE LOGIC FOR PARTIAL PAYMENT, BUT FOR NOW WE PAY IN FULL
          AP_REC<AP_CHECK_KEY> = ''
          CALL WRITE.RECORD(AP_ID,AP_REC,C.AP_INVOICE,@FALSE,ERROR_STATUS)
        END
      NEXT I
      *
      * THEN MARK CHECK AS VOID
      *
      CHECK_REC<AC_VOID> = @TRUE
      *
      * AND WRITE IT OUT
      *
      CALL NXT.LOCKWAITING("AP_CHECKS",C.AP_CHECKS,AP_CHECK_ID,GUIERRORS,GUISTATE)
      CALL WRITE.RECORD(AP_CHECK_ID,CHECK_REC,C.AP_CHECKS,@FALSE,ERROR_STATUS)
      *
      *
      EFF_DATE = DATE()
      DB_AMT = -1 * CHECK_REC<AC_AMOUNT>
      CR_AMT = -1 * CHECK_REC<AC_AMOUNT>
      CALL WRITE.GLT(BANK.GLT.CD,DB_AMT,CR_AMT,EFF_DATE,"AP-CHK",AP_CHECK_ID:'-VOID',GUIERRORS,GUISTATE)
      *
      GOSUB GUI.APCHK.APCHK.BTNCLOSE.CLICK
    END
  END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APCHK.APCHK.LSTBANK.CLICK: *
BANK_CODE = BANK.LIST<1,GUIARGS<1>,1>
GLC.VALUE = BANKS_REC<CODE_VAL2,GUIARGS<1>>    ;* WE ARE ASSUMING THE BANK REC AND THE BANK LIST ARE LAID OUT THE SAME
LOCATE GLC.VALUE IN GLC_REC<1,1> BY "AL" SETTING IDX THEN
  BANK.GLT.CD = GLC.VALUE
END ELSE

  PRMPT = "Bank Code: ":BANK_CODE:' Has an Invalid AP Gl Trans Code: ':GLC.VALUE:', Please Correct'
  CAPTION = "Account Payable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  CALL ATGUISETPROP(GUIAPP,GUIFRM,"LSTBANK",GPVALUE,0,0,0,GUIERRORS,GUISTATE)
  BANK_CODE  =  ''
  BANK.GLT.CD = ''
END



RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APCHK.APCHK.TXTCHECK.VALIDATE: *
*
* VALIDATE CHECK NUMBER
*
CHECK_NBR  = ''

IF BANK_CODE # '' THEN
  AP_CHECK_ID = BANK_CODE:'*':GUIARGS<2>
  CALL GET.RECORD("AP_CHECKS",C.AP_CHECKS,AP_CHECK_ID,CHECK_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
  IF CHECK_REC = ''  THEN
    PRMPT = "Check ":GUIARGS<2>:" Not On File, Re-enter"
    CAPTION = "AP Check Status"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  END ELSE
    *
    * NOW ENABLE CONTROLS BASED ON CHECK STATUS
    *
    BEGIN CASE
      CASE CHECK_REC<AC_RETURNED>
        ENABLE.RETURNED = 0
        ENABLE.VOID = 0
        CHECK_STATUS = 'Returned'
      CASE CHECK_REC<AC_VOID>
        ENABLE.RETURNED = 0
        ENABLE.VOID = 0
        CHECK_STATUS = 'Void'
      CASE 1
        ENABLE.RETURNED = 1
        ENABLE.VOID = 1
        CHECK_STATUS = 'Outstanding'
    END CASE
    GOSUB LOAD.CONTROLS

    *
  END
END ELSE
  PRMPT = "Select Bank Code prior to Check Number Entry"
  CAPTION = "Account Payable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"AP.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
* $PAGE$
************************************************************
CLEAR.BUFFERS:
CHECK_REC = ''
AP_CHECK_ID = ''
VEN_REC   = ''
VN_ID = ''
ENABLE.RETURNED = 0
ENABLE.VOID = 0
CHECK_STATUS = ''
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CONTROLS:
*
* GET VENDOR DATA
*
IF CHECK_REC # '' THEN
  VN_ID  = CHECK_REC<AC_VENDOR>
  CALL GET.VENDOR(VN_ID,VN_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
  *
  IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH VEN
    LOG.OPTS = "DISPLAY"
    ERROR_NBR = ERR_SYS
    ERROR_MSG = AP_CHECK_ID:' AP_Check has of non-existent VENDOR ':VN_ID
    CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)

  END
END
*
IX = 1
CTRLIDS = "LBLVENDNAME"
PROPS   = GPVALUE
VALUES  = VN_REC<VN_NAME>
*
IX =2
CTRLIDS<IX> = "LBLCHKDATE"
PROPS<IX>   = GPVALUE
VALUES<IX>  = OCONV(CHECK_REC<AC_DATE>,AC_DATE.CNV)
*
IX = 3
CTRLIDS<IX> = "LBLCHKAMTV"
PROPS<IX>  =  GPVALUE
VALUES<IX>  = OCONV(CHECK_REC<AC_AMOUNT>,AC_AMOUNT.CNV)
*
IX = 4
CTRLIDS<IX> = "BTNRTN"
PROPS<IX>  =  GPENABLED
VALUES<IX>  = ENABLE.RETURNED
*
IX = 5
CTRLIDS<IX> = "BTNVOID"
PROPS<IX>  =  GPENABLED
VALUES<IX>  = ENABLE.VOID
*
IX = 6
CTRLIDS<IX> = "LBLSTATUS"
PROPS<IX>  =  GPVALUE
VALUES<IX>  = CHECK_STATUS
**
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
GOSUB POP.AP.LIST
*
RETURN
************************************************************
* $PAGE$
************************************************************
POP.AP.LIST: *
*
* create list to populate grid
*
AP.GRID.LIST = ''
AP.LIST.CT = DCOUNT(CHECK_REC<AC_INVOICES>,@VM)
X = 0
FOR AI = 1 TO AP.LIST.CT
  AP_ID = CHECK_REC<AC_INVOICES,AI>
  INVOICE_DATE = ''
  INVOICE_ID = ''
  CALL GET.RECORD("AP_INVOICE",C.AP_INVOICE,AP_ID,AP_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
  IF AP_REC = '' THEN
    LOG.OPTS = "DISPLAY"
    ERROR_NBR = ERR_SYS
    ERROR_MSG = 'AP_INVOICE Record Referenced on AP_CHECK: ':AP_CHECK_ID:' But Cannot  Be Found: ':AP_ID
    CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  END ELSE
    X+=1
    AP.GRID.LIST<1,X,1> = FIELD(AP_ID,"*",2)  ;* INVOICE NUMBER
    AP.GRID.LIST<1,X,2> = OCONV(AP_REC<AP_DUE_DATE>,AP_DUE_DATE.CNV)
    AP.GRID.LIST<1,X,3> = OCONV(AP_REC<AP_INV_AMT>,AP_INV_AMT.CNV)
  END
NEXT AI

CTRLIDS = "GRID1"
PROPS   = GPVALUE
VALUES  = AP.GRID.LIST
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
END
