SUBROUTINE WO.DIALOG(CALLER_WO_ID,CALLER_RETURN_RESULT,GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: WO.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 06/10/2013
* UPDATED:
*
* MAINTENANCE RECORD:
* 3/3/15 - VALIDATE SEQ DATA BEFORE ALLOWING DELETE
* 11/18/15 - ADD CUSTOM FIELDS
*
* EQUATE:
*
*
* VARIABLES:
* CALLER_WO_ID WORK ORDER TO MAINTAIN
**CALLER_RETURN_RESULT - NOT USED AT THIS TIME
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* DIALOG IS CALLED TO MAINTAIN WORK ORDERS FILE
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES NXT.WO.STATUS.DEF
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES WC.H
$INCLUDE NXT.INCLUDES WO.H
$INCLUDE NXT.INCLUDES WRT.H

$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "WO.DIALOG"
GUIAPP = "WO"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "WO"  ;* crease dialog startup time.
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'WO','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'WO' ELSE
   CALL ATGUIERROR(3,'WO','',0,GRFATAL,"'WO' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
PROCESS.STEP.SELECTED = 0    ;* PROCESSES STEP SELECTED
GET_REC_MSG_LIST = ''
*
DIM SEQ.ARRAY(1,1)           ;* PRE CREATE SEQ INFORMATION ARRAY FOR CALLS TO WO.GRDRT.UPDATE
*
WO.RELEASED   = WORK.ORDER.STATUS.LIST<1,WO.RELEASED.IDX,1>
WO.MFG.CLOSED = WORK.ORDER.STATUS.LIST<1,WO.MFG.CLOSE.IDX,1>
WO.FIN.CLOSED = WORK.ORDER.STATUS.LIST<1,WO.FIN.CLOSE.IDX,1>
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
MSG_LIST = ''
CALL ATGUISHOW('WO','WO','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*
*
* GET THE WORK ORDER
*
CALL GET.RECORD("WO",C.WO,CALLER_WO_ID,WO_REC,@TRUE,ERROR.STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF WO_REC = '' THEN
   *CALLED WITH INVALID WORK ORDER ID, REPORT ERROR
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "WO.DIALOG CALLED WITH INVALID WORK ORDER ID: ": CALLER_WO_ID
   CALL LOG.ERROR(LOG.OPTS,"WO.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)

   * AND RETURN TO CALLER
   GOSUB GUI.WO.WO.CLOSE;RETURN
END
SAVE_WO_REC = WO_REC  ;* SAVE COPY OF WORK ORDER RECORD FOR MOD TESTING
SCHD_FLAGS = ''  ;* INIT SCHEDULE FLAGS
*
*-->END GUI STARTUP<--*
*
* Add schedule types to dropdown list (predefined in NXT.WO.STATUS.DEF)
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"LSTSCHDTYPE",GPITEMS,0,0,SCHEDULE.TYPE.LIST,GUIERRORS,GUISTATE)
*
* Add Work Order Status codes to dropdown list(predefined in NXT.WO.STATUS.DEF)
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"LSTSTATUS",GPITEMS,0,0,WORK.ORDER.STATUS.LIST,GUIERRORS,GUISTATE)

*
* LOAD CONTROLS THEN ENABLE THE FRAMES
*
GOSUB LOAD.WO.CTRLS
*
SFS.STATE = 1  ;* ENABLE
GOSUB SET.FRAME.STATE
*
RESCHEDULE.NOTE = @FALSE  ;* FLAG TO REMIND USER TO RESCHEDULE WORK ORDER
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='WO'
         BEGIN CASE
            CASE GUIFRM='WO'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.WO.WO.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTDELSEQ'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.WO.BTNRTDELSEQ.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTINSAFTER'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.WO.BTNRTINSAFTER.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTINSBEFORE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.WO.BTNRTINSBEFORE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTMOD'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.WO.BTNRTMOD.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTPRT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.WO.BTNRTPRT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNSCHD'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.WO.BTNSCHD.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNUPDATE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.WO.BTNUPDATE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='CHKFREEZE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.WO.CHKFREEZE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='GRDRT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.WO.GRDRT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LSTSCHDTYPE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.WO.LSTSCHDTYPE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LSTSTATUS'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.WO.LSTSTATUS.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTACTEND'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTACTEND.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTACTSTART'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTACTSTART.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTASSOC'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTASSOC.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTDESC'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTDESC.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTDRAW'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTDRAW.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTDUEDATE'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTDUEDATE.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTQTY'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTQTY.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTSEQINC'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTSEQINC.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTSTARTDATE'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTSTARTDATE.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTU1'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTU1.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTU2'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTU2.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTU3'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTU3.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTU4'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTU4.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTU5'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTU5.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTU6'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.WO.TXTU6.VALIDATE;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.BTNRTDELSEQ.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
   CURR_SEQ = SEQ.ARRAY(PROCESS.STEP.SELECTED,SQI_ID)
   IF  CURR_SEQ = '' THEN
      PRMPT = 'This Routing Sequence is Undefined,':@SVM:'Cannot Delete'
      CAPTION = "WO.DIALOG"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
   END ELSE

      *
      WR_ID = CALLER_WO_ID:"*":CURR_SEQ
      CALL GET.RECORD("WR",C.WR,WR_ID,WR_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      IF ERROR_STATUS = ERR_NOF THEN
         LOG.OPTS = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG =  ERR_MESSAGE(ERR_SYS):' WR: ': WR_ID : ' Not on file but in Seq List!'
         CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      END ELSE
         GOSUB SEQ.DEL.CHECK
         IF SEQ.DEL.CHECK.OK THEN
            *
            * GET DELETE CONFIRMATION
            *
            PRMPT = 'Delete Routing Seq: ':FIELD(WR_ID,'*',2):'?'
            CAPTION = "WO.DIALOG"
            STYLE   = 0  ;* no icon
            BUTTONS = 4  ;* YES / NO
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            IF RESPONSE = 6 THEN
               *
               * DELETE THE WR RECORD
               *
               DELETE C.FILE.VAR(C.WR), WR_ID
               *  RESET SELECTED HIGHLIGHT
               CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
               IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
               PROCESS.STEP.SELECTED = 0
               OPTS = 0
               CALL  WO.GRDRT.UPDATE(CALLER_WO_ID,MAT SEQ.ARRAY,WR.COUNT,OPTS,"GRDRT",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
               *
               RESCHEDULE.NOTE = @TRUE
            END
         END
      END
   END

END


RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.BTNRTINSAFTER.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
   CURR_SEQ = SEQ.ARRAY(PROCESS.STEP.SELECTED,SQI_ID)
   IF  CURR_SEQ = '' THEN
      PRMPT = 'This Routing Sequence is Undefined,':@SVM:'Cannot Insert After'
      CAPTION = "WO.DIALOG"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
   END ELSE

      * INSERT SELECTED STEP
      *
      * GET SEQ INC NUMBER
      *
      CALL ATGUIGETPROP(GUIAPP,GUIFRM, "TXTSEQINC", GPVALUE, 0, 0,SEQINC, GUIERRORS, GUISTATE)
      *
      * CREATE INSERT SEQ ID
      *
      CALL WRT.CALC.WR.SEQNBR(CURR_SEQ,SEQINC, MAT SEQ.ARRAY,NEW_SEQ_NBR,GUIERRORS,GUISTATE)
      IF NEW_SEQ_NBR # '' THEN
         *
         * ONLY PROCEED IF WE ENDED UP WITH A VALID SEQ NUMBER!
         *RESET BACKGOUND COLOR TO DELFAULT
         *
         WR_ID = CALLER_WO_ID:"*":NEW_SEQ_NBR
         WR_REC = ''
         *
         * CALL THE ROUTING SEQ EDITOR FORM
         *
         CALL RT.DIALOG(PROG_ID,WR_ID,WR_REC,WO_REC<WO_PARTNBR>,WO_REC<WO_PT_DESC>,WO_REC<WO_PT_DRAWING>,WO_REC<WO_ENG_ID>,C.RT,ACTION,GUIERRORS,GUISTATE)
         IF ACTION = RT_FILE THEN
            *
            * WRITE RT RECORD ON FILE
            *
            CALL WRITE.RECORD(WR_ID,WR_REC,C.WR,@FALSE,ERROR_STATUS)
            OPTS = 0
            CALL  WO.GRDRT.UPDATE(CALLER_WO_ID, MAT SEQ.ARRAY,WR.COUNT,OPTS,"GRDRT",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
         END
         *  RESET SELECTED HIGHLIGHT
         CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         PROCESS.STEP.SELECTED = 0
         *
         RESCHEDULE.NOTE = @TRUE
      END
   END

END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.BTNRTINSBEFORE.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
   CURR_SEQ = SEQ.ARRAY(PROCESS.STEP.SELECTED,SQI_ID)
   *
   IF  CURR_SEQ = '' THEN
      PRMPT = 'This Routing Sequence is Undefined,':@SVM:'Cannot Insert Before'
      CAPTION = "WO.DIALOG"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
   END ELSE

      * INSERT SELECTED STEP
      *
      * GET SEQ INC NUMBER
      *
      CALL ATGUIGETPROP(GUIAPP,GUIFRM, "TXTSEQINC", GPVALUE, 0, 0,SEQINC, GUIERRORS, GUISTATE)
      *
      * CREATE INSERT SEQ ID
      *
      SEQINC = SEQINC * -1
      CALL WRT.CALC.WR.SEQNBR(CURR_SEQ,SEQINC, MAT SEQ.ARRAY,NEW_SEQ_NBR,GUIERRORS,GUISTATE)
      IF NEW_SEQ_NBR # '' THEN
         *
         * ONLY PROCEED IF WE ENDED UP WITH A VALID SEQ NUMBER!
         *RESET BACKGOUND COLOR TO DELFAULT
         *
         WR_ID = CALLER_WO_ID:"*":NEW_SEQ_NBR
         WR_REC = ''
         *
         * CALL THE ROUTING SEQ EDITOR FORM
         *
         CALL RT.DIALOG(PROG_ID,WR_ID,WR_REC,WO_REC<WO_PARTNBR>,WO_REC<WO_PT_DESC>,WO_REC<WO_PT_DRAWING>,WO_REC<WO_ENG_ID>,C.RT,ACTION,GUIERRORS,GUISTATE)
         IF ACTION = RT_FILE THEN
            *
            * WRITE RT RECORD ON FILE
            *
            CALL WRITE.RECORD(WR_ID,WR_REC,C.WR,@FALSE,ERROR_STATUS)
            OPTS = 0
            CALL  WO.GRDRT.UPDATE(CALLER_WO_ID, MAT SEQ.ARRAY,WR.COUNT,OPTS,"GRDRT",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
         END
         *  RESET SELECTED HIGHLIGHT
         CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         PROCESS.STEP.SELECTED = 0
         *
         RESCHEDULE.NOTE = @TRUE
      END
   END

END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.BTNRTMOD.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
   CURR_SEQ = SEQ.ARRAY(PROCESS.STEP.SELECTED,SQI_ID)
   *
   IF  CURR_SEQ = '' THEN
      PRMPT = 'This Routing Sequence is Undefined,':@SVM:'Cannot Modify'
      CAPTION = "WO.DIALOG"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
   END ELSE

      *
      WR_ID = CALLER_WO_ID:"*":CURR_SEQ
      CALL GET.RECORD("WR",C.WR,WR_ID,WR_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      IF ERROR_STATUS = ERR_NOF THEN
         LOG.OPTS = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG =  ERR_MESSAGE(ERR_SYS):' WR: ': WR_ID : ' Not on file but in Seq List!'
         CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      END ELSE
         *
         * CALL THE ROUTING SEQ EDITOR FORM
         *
         CALL RT.DIALOG(PROG_ID,WR_ID,WR_REC,WO_REC<WO_PARTNBR>,WO_REC<WO_PT_DESC>,WO_REC<WO_PT_DRAWING>,WO_REC<WO_ENG_ID>,C.RT,ACTION,GUIERRORS,GUISTATE)
         IF ACTION = RT_FILE THEN
            *
            * WRITE RT RECORD ON FILE
            *
            CALL WRITE.RECORD(WR_ID,WR_REC,C.WR,@FALSE,ERROR_STATUS)
            OPTS = 0
            CALL  WO.GRDRT.UPDATE(CALLER_WO_ID, MAT SEQ.ARRAY,WR.COUNT,OPTS,"GRDRT",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
         END ELSE
            RELEASE C.FILE.VAR(C.WR),  WR_ID
         END
         *  RESET SELECTED HIGHLIGHT
         CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         PROCESS.STEP.SELECTED = 0
         *
         RESCHEDULE.NOTE = @TRUE
      END
   END

END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.BTNRTPRT.CLICK: *
*
* GET SELECTED REPORT TYPE:
* EQU WO_RT_CSV_REPORT TO "CSV"
* EQU WO_RT_DFLT_REPORT TO "DFLT"
* EQU WO_RT_CSTM1_REPORT TO "CSTM1"
* EQU WO_RT_CSTM2_REPORT TO "CSTM2"
CALL ATGUIGETPROP(GUIAPP,GUIFRM, "OPTWOPRT", GPVALUE, 0, 0,RPT.IDX, GUIERRORS, GUISTATE)
BEGIN CASE
   CASE RPT.IDX  = 1
      REPORT.TYPE = WO_RT_DFLT_REPORT
   CASE RPT.IDX  = 2
      REPORT.TYPE = WO_RT_CSV_REPORT
   CASE RPT.IDX  = 3
      REPORT.TYPE = WO_RT_CSTM1_REPORT
   CASE RPT.IDX  = 4
      REPORT.TYPE = WO_RT_CSTM2_REPORT
   CASE  1
      REPORT.TYPE = WO_RT_DFLT_REPORT
END CASE
*
CALL WRT.ROUTING.PRINT(REPORT.TYPE,C.WR,CALLER_WO_ID,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.BTNSCHD.CLICK: *
* Add your event code here...
IF WO_REC<WO_FREEZE_SCHD> THEN
   * WORK ORDER SET TO NOT RESCHEDULE, CONFIRM WITH USER
   *  *
   PRMPT = "Warning, Freeze Schedule is set for Work Order, Reschedule?"
   CAPTION = "Work Orders"
   STYLE   = 0  ;* no icon
   BUTTONS = 4  ;* yes / no
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

   IF RESPONSE = 6 THEN  ;* yes, reschedule
      SCHD_FLAGS<1> = @TRUE  ;* SHOW SCHD COMPLETE DIALOG
      CALL WO.SCHEDULE(CALLER_WO_ID,WO_REC,SCHD_FLAGS,GUIERRORS,GUISTATE)
   END
END ELSE
   SCHD_FLAGS<1> = @TRUE  ;* SHOW SCHD COMPLETE DIALOG
   CALL WO.SCHEDULE(CALLER_WO_ID,WO_REC,SCHD_FLAGS,GUIERRORS,GUISTATE)
END
*
* REFRESH THE SEQ GRID AFTER RESCHEDULE
*
OPTS = 0
CALL  WO.GRDRT.UPDATE(CALLER_WO_ID, MAT SEQ.ARRAY,WR.COUNT,OPTS,"GRDRT",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
*
* AND THE WO SCH START AND END DATES
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CI = 1
CTRLIDS<CI> = "TXTSTARTDATE"
PROPS<CI>   = GPVALUE
IF WO_REC<WO_START_DATE> THEN
   VALUES<CI>  = OCONV(WO_REC<WO_START_DATE>,WO_START_DATE.CNV)
END ELSE
   VALUES<CI>  = ''
END
*
CI = 2
CTRLIDS<CI> = "TXTDUEDATE"
PROPS<CI>   = GPVALUE
IF WO_REC<WO_DUE_DATE> THEN
   VALUES<CI>  = OCONV(WO_REC<WO_DUE_DATE>,WO_DUE_DATE.CNV)
END ELSE
   VALUES<CI>  = ''
END
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
*
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RESCHEDULE.NOTE = @FALSE
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.BTNUPDATE.CLICK: *
CALL WRITE.RECORD(CALLER_WO_ID,WO_REC,C.WO,@TRUE,ERROR_STATUS)
*
* IF WORK ORDER STATYS CHANGED FROM RUNNING TO MFG OR FIN CLOSE THEN
* MARK WORK ORDERS SEQUENCES COMPLETE ALSO
*
IF SAVE_WO_REC<WO_STATUS> = WO.RELEASED THEN
   IF (WO_REC<WO_STATUS> = WO.MFG.CLOSED) OR (WO_REC<WO_STATUS> = WO.FIN.CLOSED) THEN
      CALL WRT.CMP.STATUS(CALLER_WO_ID,MAT SEQ.ARRAY,GUIERRORS,GUISTATE)
      OPTS = 0
      CALL  WO.GRDRT.UPDATE(CALLER_WO_ID, MAT SEQ.ARRAY,WR.COUNT,OPTS,"GRDRT",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
   END
END
SAVE_WO_REC = WO_REC
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.CHKFREEZE.CLICK: *
WO_REC<WO_FREEZE_SCHD> =  GUIARGS<1>
IF WO_REC<WO_FREEZE_SCHD> THEN
   *
   * IF SET TO FREEZE, DO NOT PROMPT FOR RESCEDULE
   RESCHEDULE.NOTE = @FALSE
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.WO.WO.CLOSE: *

IF SAVE_WO_REC # WO_REC THEN
   PRMPT = "Warning, Work Order Record Changed but not Saved, (Select ok to Exit without Save)"
   CAPTION = "Work Orders"
   STYLE   = 2  ;* !
   BUTTONS = 1  ;* 1 = OK/Cancel
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

   IF RESPONSE = 2 THEN  ;* cancel exit
      GOTO WO.CLOSE.99
   END
END
*
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
*
* ALWAYS RELEASE THE WORK ORDER
*
RELEASE C.FILE.VAR(C.WO), CALLER_WO_ID
*
WO.CLOSE.99: *
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.GRDRT.CLICK: *
* COUNT ROWS (VIA SEQ.ARRAY DATA)
ROWS = INMAT(SEQ.ARRAY)
IF PROCESS.STEP.SELECTED > 0 THEN
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
END
PROCESS.STEP.SELECTED = GUIARGS<1,2> ;* ROW NUMBER
* ENSURE THAT WE DONT TRY TO SELECT A ROW PAST THE DEFINED ROWS
IF PROCESS.STEP.SELECTED > ROWS<1,1> THEN
   PROCESS.STEP.SELECTED =  ROWS<1,1>
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPROW,"","",PROCESS.STEP.SELECTED,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
END
CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRGRAY,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.LSTSCHDTYPE.CLICK: *
WO_REC<WO_SCHD_TYPE> = SCHEDULE.TYPE.LIST<1,GUIARGS<1>,1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.LSTSTATUS.CLICK: *
WO_REC<WO_STATUS> = WORK.ORDER.STATUS.LIST<1,GUIARGS<1>,1>
WO_REC<WO_STAT_DATE> = DATE()
GOSUB LOAD.WO.CTRLS
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTACTEND.VALIDATE: *
WO_REC<WO_ACT_END>  = ICONV(GUIARGS<2>,"D")
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTACTSTART.VALIDATE: *
WO_REC<WO_ACT_START>  = ICONV(GUIARGS<2>,"D")
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTASSOC.VALIDATE: *
WO_REC<WO_ASSOC>  = TRIM(GUIARGS<2>)
IF WO_REC<WO_ASSOC> # FIELD(CALLER_WO_ID,'.',1) THEN
   PRMPT = "Caution, new Association Value Does Not Match Work Order Base Value: (":FIELD(CALLER_WO_ID,'.',1):")"
   CAPTION = "Work Orders"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTDESC.VALIDATE: *
WO_REC<WO_PT_DESC>  = TRIM(GUIARGS<2>)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTDRAW.VALIDATE: *
WO_REC<WO_PT_DRAWING>  = TRIM(GUIARGS<2>)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTDUEDATE.VALIDATE: *
WO_REC<WO_DUE_DATE>  = ICONV(GUIARGS<2>,"D")
RESCHEDULE.NOTE = @TRUE
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTQTY.VALIDATE: *
IF GUIARGS<2> LE 0 THEN
   PRMPT = "Quantity cannot be <= 0, Please Correct"
   CAPTION = "Work Orders"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
   WO_REC<WO_QTY_TO_MFG> = GUIARGS<2>
   RESCHEDULE.NOTE = @TRUE
END
PRMPT = "NOTE - NEED TO UPDATE WRT RECORDS WITH NEW QTY!"
CAPTION = "Work Orders"
STYLE   = 2  ;* !
BUTTONS = 0  ;* ok only
HELPID = ""
CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTSEQINC.VALIDATE: *
IF GUIARGS<2> < 0 THEN
   PRMPT = 'Warning, Sequence Increment Must Be > 0!'
   CAPTION = "WO.DIALOG"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTSEQINC",GPVALUE,"","","100",GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTSTARTDATE.VALIDATE: *
WO_REC<WO_START_DATE>  = ICONV(GUIARGS<2>,"D")
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTU1.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTU2.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTU3.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTU4.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTU5.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.WO.TXTU6.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"WO.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************

******************************************************************************************
LOAD.WO.CTRLS:
*
* routine LOADS WORK ORDER controls
*
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CI = 1
CTRLIDS<CI> = "TXTSTARTDATE"
PROPS<CI>   = GPVALUE
IF WO_REC<WO_START_DATE> THEN
   VALUES<CI>  = OCONV(WO_REC<WO_START_DATE>,WO_START_DATE.CNV)
END ELSE
   VALUES<CI>  = ''
END
*
CI = 2
CTRLIDS<CI> = "TXTDUEDATE"
PROPS<CI>   = GPVALUE
IF WO_REC<WO_DUE_DATE> THEN
   VALUES<CI>  = OCONV(WO_REC<WO_DUE_DATE>,WO_DUE_DATE.CNV)
END ELSE
   VALUES<CI>  = ''
END
*
LC = 3
CALL GUI.LIST.ITEM.LOCATE(SCHEDULE.TYPE.LIST,WO_REC<WO_SCHD_TYPE>,IDX)
IF IDX > 0 THEN
   CTRLIDS<LC> = "LSTSCHDTYPE"
   PROPS<LC>   = GPVALUE
   VALUES<LC>  = IDX
END ELSE
   CTRLIDS<LC> =  "LSTSCHDTYPE"
   PROPS<LC>   = GPVALUE
   VALUES<LC>  = 0
END
*
LC = 4
CALL GUI.LIST.ITEM.LOCATE(WORK.ORDER.STATUS.LIST,WO_REC<WO_STATUS>,IDX)
IF IDX > 0 THEN
   CTRLIDS<LC> = "LSTSTATUS"
   PROPS<LC>   = GPVALUE
   VALUES<LC>  = IDX
END ELSE
   CTRLIDS<LC> = "LSTSTATUS"
   PROPS<LC>   = GPVALUE
   VALUES<LC>  = 0
END
*
CI = 5
CTRLIDS<CI> = "TXTSTATDATE"
PROPS<CI>   = GPVALUE
IF WO_REC<WO_STAT_DATE> THEN
   VALUES<CI>  = OCONV(WO_REC<WO_STAT_DATE>,WO_STAT_DATE.CNV)
END ELSE
   VALUES<CI>  = ''
END
*
CI = 6
CTRLIDS<CI> = "TXTACTSTART"
PROPS<CI>   = GPVALUE
IF WO_REC<WO_ACT_START> THEN
   VALUES<CI>  = OCONV(WO_REC<WO_ACT_START>,WO_ACT_START.CNV)
END ELSE
   VALUES<CI>  = ''
END
*
CI = 7
CTRLIDS<CI> = "TXTACTEND"
PROPS<CI>   = GPVALUE
IF WO_REC<WO_ACT_END> THEN
   VALUES<CI>  = OCONV(WO_REC<WO_ACT_END>,WO_ACT_END.CNV)
END ELSE
   VALUES<CI>  = ''
END
*
CI = 8
CTRLIDS<CI> = "LBLRELV"   ;* release date not rev level!
PROPS<CI>   = GPVALUE
IF WO_REC<WO_REL_DATE> THEN
   VALUES<CI>  = OCONV(WO_REC<WO_REL_DATE>,WO_REL_DATE.CNV)
END ELSE
   VALUES<CI>  = ''
END
*
CI = 9
CTRLIDS<CI> = "CHKFREEZE"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_FREEZE_SCHD>
*
*
CI = 10
CTRLIDS<CI> = "TXTQTY"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_QTY_TO_MFG>
*
CI = 11
CTRLIDS<CI> = "TXTASSOC"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_ASSOC>
*
CI = 12
CTRLIDS<CI> = "LBLWOENGIDV"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_ENG_ID>
*
CI = 13
CTRLIDS<CI> = "LBLWOV"
PROPS<CI>   = GPVALUE
VALUES<CI>  = CALLER_WO_ID
*
CI = 14
CTRLIDS<CI> = "LBLPNV"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_PARTNBR>
*
CI = 15
CTRLIDS<CI> = "TXTDESC"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_PT_DESC>
*
CI = 16
CTRLIDS<CI> = "TXTDRAW"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_PT_DRAWING>
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
*
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* NOW LOAD THE SEQ GRID WITH THE WORK ORDER ROUTING SEQUENCES
*
OPTS = 0
CALL  WO.GRDRT.UPDATE(CALLER_WO_ID, MAT SEQ.ARRAY,WR.COUNT,OPTS,"GRDRT",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
*
RETURN
***************************************************************************
SET.FRAME.STATE:
*
* SETS FRAME ENABLE STATE:
* SFS.STATE = ENABLE (1) OR DISABLE (0)
*
CTRLIDS = "FRMWO"
PROPS   = GPENABLED
VALUES  = SFS.STATE
*
CTRLIDS<2> = "FRMSCHD"
PROPS<2>   = GPENABLED
VALUES<2>  = SFS.STATE
*
CTRLIDS<3> = "FRMRT"
PROPS<3>   = GPENABLED
VALUES<3>  = SFS.STATE
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
***************************************************************************
SEQ.DEL.CHECK:
*
* CHECK TO SEE IF SEQ DELETE IS ALLOWES
*
SEQ.DEL.CHECK.OK = @TRUE
MSG = ''
BEGIN CASE
      * STATUS CODE MUST BE NS OR Q
   CASE NOT((WR_REC<WR_STATUS> = WORK.ORDER.SEQ.STATUS.LIST<1,WO.NS.IDX,1>) OR (WR_REC<WR_STATUS> = WORK.ORDER.SEQ.STATUS.LIST<1,WO.Q.IDX,1>))
      MSG = 'Seq Status: ':WR_REC<WR_STATUS>
      * cannot HAVE QTY COMPLETE
   CASE WR_REC<WR_QTY_COMP> > 0
      MSG = 'Seq Qty Complete: ':WR_REC<WR_QTY_COMP>
      * CANNOT HAVE QTY SCRAP
   CASE WR_REC<WR_SCRAP> > 0
      MSG = 'Seq Qty Rejected: ':WR_REC<WR_SCRAP>
      * CANNOT HAVE TIME CHARGED
   CASE (WR_REC<WR_ACT_SUEMP> + WR_REC<WR_ACT_SUMACH> + WR_REC<WR_ACT_RNEMP> + WR_REC<WR_ACT_RNMACH>)  > 0
      MSG = 'Time Charged to Seq'
      * CANNOT HAVE QAD_PARENT RECORD ON FILE
   CASE 1
      CALL GET.RECORD("QAD_PARENT",C.QAD_PARENT,WR_ID,QAP_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      IF QAP_REC # '' THEN
         MSG = 'QUALITY DATA on File for Seq'   ;* WE HAVE ALREADY STARTED DATA COLLECTION FOR THIS WO SEQ, DO NOT ALLOW DELETES OF QA DATA !
      END
END CASE
IF MSG # '' THEN
   SEQ.DEL.CHECK.OK = @FALSE
   PRMPT = MSG:', Delete of Seq Not Allowed!'
   CAPTION = "WO.DIALOG"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
***************************************************************************
END
