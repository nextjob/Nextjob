SUBROUTINE PROCESS.GROUP.MAINT(GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: PROCESS.GROUP.MAINT
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2008
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* DIALOG IS CALLED TO MAINTAIN PROCESS_GROUPS FILE
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES PROCESS_STEPS.H
$INCLUDE NXT.INCLUDES PROCESS_GROUPS.H
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "PROCESS.GROUP.MAINT"
GUIERRORS = ''
GUIAPP = "PROCESS.GROUP.MAINT"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "FORM1"
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
  CALL ATGUIERROR(3,'PROCESS.GROUP.MAINT','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
  RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'PROCESS.GROUP.MAINT' ELSE
  CALL ATGUIERROR(3,'PROCESS.GROUP.MAINT','',0,GRFATAL,"'PROCESS.GROUP.MAINT' is not on file.",GUIERRORS)
  RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
  CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('PROCESS.GROUP.MAINT','FORM1','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
* INIT VARIABLES
*
PROCESS.STEP.SELECTED = 0    ;* PROCESSES STEP SELECTED
GET_REC_MSG_LIST = '';* DEFAULT MESSAGE LIST FOR GET.RECORD ROUTINE
NEW_ID = ''          ;* PROCESS_STEP RECORD IDS MUST BE INITED
GROUP_ID = ''
*
* load grdsteps with process steps
*
CALL LOAD.PROCESS.STEPS(PROCESS.STEP.LIST,PROCESS.IDS,LIST.CT,GUIAPP,GUIFRM,"GRDSTEPS",GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* load process group drop down list
*
GROUP.LIST = '' ;* list of  process GROUPS
GOSUB LOAD.LSTPRO
GOSUB CLEAR.BUFFERS
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
  CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN RETURN
  IF GUIEVT EQ GEQUIT THEN
    GUI.DLG.EXIT = 1
  END ELSE
    GUIAPP=OCONV(GUIAPP,'MCU')
    GUIFRM=OCONV(GUIFRM,'MCU')
    GUICTL=OCONV(GUICTL,'MCU')
    GOSUB GUI.DECODE.EVENT
  END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
  GUI.APP.LIST = ''
  CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
  IF GUI.APP.LIST EQ '' THEN
* Quit event fired after last GUI object is deleted - discard it
    CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
* We could call ATGUISHUTDOWN here if we wanted, but there's no
* harm just leaving the GUI environment initialized, in case we
* want to use it again...
  END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
* Add your code here...
END ELSE
* Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
  BEGIN CASE
    CASE GUIAPP='PROCESS.GROUP.MAINT'
      BEGIN CASE
        CASE GUIFRM='FORM1'
          BEGIN CASE
            CASE GUICTL=''
              BEGIN CASE
                CASE GUIEVT=GECLOSE
                  GOSUB GUI.PROCESS.GROUP.MAINT.FORM1.CLOSE;GUIEVT=0
              END CASE
            CASE GUICTL='BTNCANCEL'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.PROCESS.GROUP.MAINT.FORM1.BTNCANCEL.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNDELETE'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.PROCESS.GROUP.MAINT.FORM1.BTNDELETE.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNDELPRO'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.PROCESS.GROUP.MAINT.FORM1.BTNDELPRO.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNFILE'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.PROCESS.GROUP.MAINT.FORM1.BTNFILE.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNINSAFTER'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.PROCESS.GROUP.MAINT.FORM1.BTNINSAFTER.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNINSBEFORE'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.PROCESS.GROUP.MAINT.FORM1.BTNINSBEFORE.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNNEW'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.PROCESS.GROUP.MAINT.FORM1.BTNNEW.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='GRDSTEPS'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.PROCESS.GROUP.MAINT.FORM1.GRDSTEPS.CLICK;GUIEVT=0
                CASE GUIEVT=GEVALIDATECELL
                  GOSUB GUI.PROCESS.GROUP.MAINT.FORM1.GRDSTEPS.VALIDATECELL;GUIEVT=0
              END CASE
            CASE GUICTL='LSTPRO'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.PROCESS.GROUP.MAINT.FORM1.LSTPRO.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='TXTNEWID'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.PROCESS.GROUP.MAINT.FORM1.TXTNEWID.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTPROCESSDESC'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.PROCESS.GROUP.MAINT.FORM1.TXTPROCESSDESC.VALIDATE;GUIEVT=0
              END CASE
          END CASE
      END CASE
  END CASE
  IF GUIEVT THEN
* Unhandled event - may be dynamic
    GOSUB GUI.DYNAMIC.EVENTS
  END
END ELSE
  GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.GROUP.MAINT.FORM1.BTNCANCEL.CLICK: *
*
* USER WANTS TO CANCEL WHAT WE WERE DOING, CHECK TO SEE IF A SAVE IS REQUIRED
*
GOSUB SAVE.PROCESS.CHECK
IF SAVE.PROCESS.CHECK.OK THEN
  GOSUB CLEAR.BUFFERS
  GOSUB LOAD.CONTROLS
  GOSUB LOAD.GRDSTEPS
  GOSUB RESET.FORM
  ENABLE.STATE = 0
  GOSUB ENABLE.CONTROLS
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.GROUP.MAINT.FORM1.BTNDELPRO.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
*RESET BACKGOUND COLOR TO DELFAULT
  CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDSTEPS",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
* REMOVE SELECTED STEP
  DEL GROUP_REC<PG_PROCESS_STEPS,PROCESS.STEP.SELECTED>
*  RESET SELECTED HIGHLIGHT
  CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDSTEPS",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
  PROCESS.STEP.SELECTED = 0
* UPDATE CONTROL
  GOSUB LOAD.GRDSTEPS
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.GROUP.MAINT.FORM1.BTNINSAFTER.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
  IF GROUP_REC<PG_PROCESS_STEPS,PROCESS.STEP.SELECTED> = '' THEN
    PRMPT = 'This Process Step is Undefined,':@SVM:'Cannot Insert After'
    CAPTION = "Process Group Maint"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok only
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
  END ELSE
*RESET BACKGOUND COLOR TO DELFAULT
    CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDSTEPS",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
    IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
* INSERT SELECTED STEP
    INS "NOTES" BEFORE GROUP_REC<PG_PROCESS_STEPS,PROCESS.STEP.SELECTED+1>
*  RESET SELECTED HIGHLIGHT
    CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDSTEPS",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
    IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
    PROCESS.STEP.SELECTED = 0
* UPDATE CONTROL
  END
  GOSUB LOAD.GRDSTEPS
END
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.GROUP.MAINT.FORM1.BTNINSBEFORE.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
*RESET BACKGOUND COLOR TO DELFAULT
  CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDSTEPS",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
* INSERT SELECTED STEP
  INS "NOTES" BEFORE GROUP_REC<PG_PROCESS_STEPS,PROCESS.STEP.SELECTED>
*  RESET SELECTED HIGHLIGHT
  CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDSTEPS",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
  PROCESS.STEP.SELECTED = 0
* UPDATE CONTROL
  GOSUB LOAD.GRDSTEPS
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.GROUP.MAINT.FORM1.BTNNEW.CLICK: *
* user click new button, must want to add new code,
* if there is not an active edit going on,
* make text window visable and active.
*
GOSUB SAVE.PROCESS.CHECK
IF SAVE.PROCESS.CHECK.OK THEN
  GOSUB CLEAR.BUFFERS
  GOSUB LOAD.CONTROLS
*
  CTRLIDS = "LSTPRO"
  PROPS   = GPENABLED
  VALUES  = 0
*
  CTRLIDS<-1> = "LSTPRO"
  PROPS<-1>   = GPVALUE
  VALUES<-1>  = 0
*
  CTRLIDS<-1> = "FRMNEWID"
  PROPS<-1>   = GPVISIBLE
  VALUES<-1>  = 1
*
*
  CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
  CALL ATGUIACTIVATE(GUIAPP, GUIFRM, "TXTNEWID", GUIERRORS, GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.PROCESS.GROUP.MAINT.FORM1.CLOSE: *
* Default form close event handler
GOSUB SAVE.PROCESS.CHECK
IF SAVE.PROCESS.CHECK.OK THEN
  CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
  CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
  IF NUM.FORMS = 0 THEN
    GOSUB GUI.DIALOG.RETURN
    CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
    IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
    GUI.DLG.EXIT = 1
  END
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.GROUP.MAINT.FORM1.BTNDELETE.CLICK: *

PRMPT = "Delete Process Group: ":GROUP_ID
CAPTION = "Process Group Maint"
STYLE   = 2  ;* !
BUTTONS = 4  ;* YES/NO
HELPID = ""
CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
IF RESPONSE = 6 THEN  ;* YES
  DELETE C.FILE.VAR(C.PROCESS_GROUPS), GROUP_ID
  GOSUB CLEAR.BUFFERS
  GOSUB LOAD.CONTROLS
  GOSUB LOAD.LSTPRO
  GOSUB RESET.FORM
  ENABLE.STATE = 0
  GOSUB ENABLE.CONTROLS

END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.GROUP.MAINT.FORM1.BTNFILE.CLICK: *
*
* VALIDATE PROCESS_GROUPS RECORD
*
REC.OK = @TRUE
*
IF GROUP_REC<PG_GROUP_DESC> = '' THEN
  EMSG = 'Process Group Description Required, Please correct'
  REC.OK = @FALSE
END
*
IF REC.OK THEN
  CALL WRITE.RECORD(GROUP_ID,GROUP_REC,C.PROCESS_GROUPS,@FALSE,ERROR_STATUS)
  GOSUB CLEAR.BUFFERS
  GOSUB LOAD.CONTROLS
  GOSUB LOAD.LSTPRO
  GOSUB LOAD.GRDSTEPS
  GOSUB RESET.FORM
*
  ENABLE.STATE = 0
  GOSUB ENABLE.CONTROLS
*
END ELSE
  PRMPT = EMSG
  CAPTION = "Process Group Maint"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.GROUP.MAINT.FORM1.GRDSTEPS.CLICK: *
* RESET PREVIOUS SELECTED STEP COLOR
IF PROCESS.STEP.SELECTED > 0 THEN
  CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDSTEPS",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
PROCESS.STEP.SELECTED = GUIARGS<1,2> ;* ROW NUMBER
* ENSURE THAT STEP SELECTED IS NEXT OPEN STEP (WE DID NOT SKIP A ROW)
IF PROCESS.STEP.SELECTED > DCOUNT(GROUP_REC<PG_PROCESS_STEPS>,@VM) THEN
  PROCESS.STEP.SELECTED =  DCOUNT(GROUP_REC<PG_PROCESS_STEPS>,@VM) + 1
  CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDSTEPS",GPROW,"","",PROCESS.STEP.SELECTED,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDSTEPS",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRGRAY,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.GROUP.MAINT.FORM1.GRDSTEPS.VALIDATECELL: *
*
*  CLICK ON PROCESS STEP ID FROM DROP DOWN LIST IN COLUMN 1 OF GRID, ASSUME ADD TO PROCESS STEPS FOR GROUP
PROCESS.COL = GUIARGS<1,1>
PROCESS.ROW = GUIARGS<1,2>
BEGIN CASE
  CASE PROCESS.COL = 1  ;* PROCESS STEP ID
    SELECTED.ID = GUIARGS<2>
    CALL GET.RECORD("PROCESS_STEPS",C.PROCESS_STEPS,SELECTED.ID,PROCESS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
    IF ERROR_STATUS = '' THEN ;*
      GROUP_REC<PG_PROCESS_STEPS,PROCESS.ROW> = SELECTED.ID
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDSTEPS",GPVALUE,2,PROCESS.ROW,PROCESS_REC<PS_PROCESS_DESC,1>,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      GOSUB LOAD.GRDSTEPS
    END ELSE
      PRMPT = 'Process_Step: ':SELECTED.ID:', Not On File'
      CAPTION = "Process.Group.Maint"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
    END

END CASE
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.GROUP.MAINT.FORM1.LSTPRO.CLICK: *
NEW_ID  =  GROUP.LIST<1,GUIARGS<1>,1>
IF NEW_ID # '' THEN
*
* IF WE SELECTED A NEW PROCESS, DO WE NEED TO SAVE THE OLD ONE?
  IF NEW_ID # GROUP_ID THEN
    GOSUB SAVE.PROCESS.CHECK
    IF SAVE.PROCESS.CHECK.OK THEN
      RELEASE C.FILE.VAR(C.PROCESS_GROUPS), GROUP_ID
      GOSUB CLEAR.BUFFERS
      GROUP_ID = NEW_ID
*
      CALL GET.RECORD("PROCESS_GROUPS",C.PROCESS_GROUPS,GROUP_ID,GROUP_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      BEGIN CASE
        CASE ERROR_STATUS = ERR_NOF  ;* USER ENTERED NON - EXISTENT PROCESS_STEP id #
*
* UNLOCK, REPORT AND EXIT
          RELEASE C.FILE.VAR(C.PROCESS_GROUPS), GROUP_ID
          LOG.OPTS = "DISPLAY"
          ERROR_NBR = ERR_SYS
          ERROR_MSG =  "Missing PROCESS_GROUPS record: ":GROUP_ID
          CALL LOG.ERROR(LOG.OPTS,"PROCESS.GROUP.MAINT", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)

        CASE ERROR_STATUS = ERR_BUSY  ;* USER ENTERED ORDER IS LOCKED BY SOMEONE ELSE
          PRMPT = "PROCESS_GROUPS: ":GROUP_ID:" in use, try later"
          CAPTION = "Process Maint"
          STYLE   = 2  ;* !
          BUTTONS = 0  ;* ok
          HELPID = ""
          CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
        CASE 1
          GOSUB LOAD.CONTROLS
          GOSUB LOAD.GRDSTEPS
          ENABLE.STATE = 1
          GOSUB ENABLE.CONTROLS
          SAVE_GROUP_REC = GROUP_REC
      END CASE
    END
  END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.GROUP.MAINT.FORM1.TXTNEWID.VALIDATE: *
GROUP_ID = GUIARGS<2>
*
* FIRST TEST TO MAKE SURE THERE IS NOT A PROCESS STEP BY THIS NAME
CALL GET.RECORD("PROCESS_STEPS",C.PROCESS_STEPS,GROUP_ID,STEP_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)

IF STEP_REC # '' THEN   ;* USER ENTERED AN EXISTING PROCESS_STEP id #
*

  PRMPT = "PROCESS_STEPS: ":GROUP_ID:" Already on file, Not Allowed"
  CAPTION = "Process Group Maint"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
END ELSE
*
* NOW LOOK FOR A PROCESS_GROUPS RECORD BY THIS NAME, ALSO A NO NO
*
  CALL GET.RECORD("PROCESS_GROUPS",C.PROCESS_GROUPS,GROUP_ID,GROUP_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
  BEGIN CASE
    CASE ERROR_STATUS = ERR_NOF  ;* USER ENTERED NON - EXISTENT PROCESS_GROUP id #
*
* WE EXPECT NEW PROCESS GROUP TO NOT BE ON FILE, START ENTERING
      ENABLE.STATE = 1
      GOSUB ENABLE.CONTROLS
      GROUP_REC = ''
*
      CALL ATGUIACTIVATE(GUIAPP, GUIFRM, "TXTPROCESSDESC", GUIERRORS, GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR

    CASE 1  ;* OTHERWISE WE HAVE ISSUES
      PRMPT = "PROCESS_GROUPS: ":GROUP_ID:" Already on file"
      CAPTION = "Process Group Maint"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      RELEASE C.FILE.VAR(C.PROCESS_GROUPS), GROUP_ID
  END CASE
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PROCESS.GROUP.MAINT.FORM1.TXTPROCESSDESC.VALIDATE: *
GROUP_REC<PG_GROUP_DESC> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"PROCESS.GROUP.MAINT", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
************************************************************
* $PAGE$
************************************************************
CLEAR.BUFFERS:
*
*  INIT VARIBALES
*
GROUP_ID  = ''
GROUP_REC = ''        ;* PROCESS_STEP RECORD
SAVE_GROUP_REC = ''  ;* RECORD AS READ IN (US FOR CHANGED TEST)
*
RETURN
************************************************************
* $PAGE$
************************************************************
ENABLE.CONTROLS: *
* ENBALE OR DISABLE FORM CONTROLS
*  ENABLE.STATE = 1 OR 0 PASSED BY CALLER
*
CTRLIDS = "TXTPROCESSDESC"
PROPS   = GPENABLED
VALUES  = ENABLE.STATE
*
CTRLIDS<2> = "GRDSTEPS"
PROPS<2>   = GPENABLED
VALUES<2>  = ENABLE.STATE
*
CTRLIDS<3> = "BTNFILE"
PROPS<3>   = GPENABLED
VALUES<3>  = ENABLE.STATE
*
CTRLIDS<4> = "BTNDELETE"
PROPS<4>   = GPENABLED
VALUES<4>  = ENABLE.STATE
*
CTRLIDS<5> = "BTNNEW"
PROPS<5>   = GPENABLED
VALUES<5>  = NOT(ENABLE.STATE)
*
CTRLIDS<6> = "BTNINSAFTER"
PROPS<6>   = GPENABLED
VALUES<6>  = ENABLE.STATE
*
CTRLIDS<7> = "BTNINSBEFORE"
PROPS<7>   = GPENABLED
VALUES<7>  = ENABLE.STATE
*
CTRLIDS<8> = "BTNDELPRO"
PROPS<8>   = GPENABLED
VALUES<8>  = ENABLE.STATE
*
*
*
CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CONTROLS:
*
*
CTRLIDS = "TXTPROCESSDESC"
PROPS   = GPVALUE
VALUES  = GROUP_REC<PG_GROUP_DESC>
*

*
CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.LSTPRO: *
*
* LOADS THE LSTPRO THE PROCESS GROUP DROP DOWN LIST
*
MAX.LIST = 200
START.LIST = 1
CALL GUI.SEARCH2 ("PROCESS_GROUPS","","*","@ID","@ID  PG_GROUP_DESC",MAX.LIST,START.LIST,GROUP.LIST,LST.IDS,LIST.CT,EMSG)
*
IF EMSG<1> = 'No Items Found' THEN  ;* NO ITEMS FOUND
  VALUE = ''
END ELSE
  VALUE = GROUP.LIST
END
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"LSTPRO",GPITEMS,0,0,VALUE,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
SAVE.PROCESS.CHECK: *
*
* TEST TO SEE IF WE NEED TO UPDATE FILES:
* PREOCESS_STEP
SAVE.PROCESS.CHECK.OK = @TRUE
IF SAVE_GROUP_REC # GROUP_REC THEN
  PRMPT = "Process Group has changed but not saved.":@SVM:"Select Cancel, then File to save changes ":@SVM:"or Ok to proceed without saving changes to item"
  CAPTION = "Process Group Maint"
  STYLE   = 2  ;* ?
  BUTTONS = 1  ;* ok / cancel
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  IF RESPONSE = 2 THEN  ;* CANCEL THE CANCEL OR CLOSE REQUEST
    SAVE.PROCESS.CHECK.OK = @FALSE
  END
END
RETURN
************************************************************
* $PAGE$
************************************************************
RESET.FORM:
CALL ATGUIRESET(GUIAPP,GUIFRM,GUIERRORS,GUISTATE)  ;* RESET FORM TO INITAL STATE
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* SETUP FORM FOR NEXT PROCESS STEP SELECTION
*
CTRLIDS = "LSTPRO"
PROPS   = GPENABLED
VALUES  = 1
*
CTRLIDS<-1> = "LSTPRO"
PROPS<-1>   = GPVALUE
VALUES<-1>  = 0
*
CTRLIDS<-1> = "FRMNEWID"
PROPS<-1>   = GPVISIBLE
VALUES<-1>  = 0
*
*
CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.GRDSTEPS: *
*
PROCESS.LIST = ''
PROCESS.LIST = ''
PROCESS.CNT = DCOUNT(GROUP_REC<PG_PROCESS_STEPS>,@VM)
FOR I = 1 TO PROCESS.CNT
*
  PROCESS_ID = GROUP_REC<PG_PROCESS_STEPS,I>
  PROCESS.LIST<1,I,1> = PROCESS_ID
  CALL GET.RECORD("PROCESS_STEPS",C.PROCESS_STEPS,PROCESS_ID,PROCESS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
  IF ERROR_STATUS = '' THEN ;* GET CERT CODE ASSOC WITH THIS STEP
    PROCESS.LIST<1,I,2> = PROCESS_REC<PS_PROCESS_DESC,1>
  END ELSE
    PROCESS.LIST<1,I,2> = "Process Step Missing!"
  END

*
NEXT I
*
CTRLIDS = "GRDSTEPS"
PROPS   = GPVALUE
VALUES  = PROCESS.LIST
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,CTRLIDS,PROPS,"","",VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
* RESET PREVIOUS SELECTED STEP COLOR
IF PROCESS.STEP.SELECTED > 0 THEN
  CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDSTEPS",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
RETURN
END
