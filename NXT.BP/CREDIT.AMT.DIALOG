SUBROUTINE CREDIT.AMT.DIALOG(M.QTY,M.PRICE,LOT.CHARGE,GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: CREDIT.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 05/15/2014
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
* LOT.CHARGE - ISSUING CREDIT ON LOT CHARGE ITEM (IGNOR QTY)
* M.QTY - ON ENTRY QTY FROM ORIGINAL INVOICE LINE ON EXIT SAME OR USER EDITTED VALUE
* M.PRICE - ON ENTRY PRICE EACH FROM ORIGINAL INVOICE LINE ON EXIT SAME OR USER EDITTED VALUE
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* DIALOG IS CALLED TO MAINTAIN CUSTOMER CREDIT MEMOS
* USER ENTERS SALES ORDER NUMBER FOR WHICH CREDIT IS TO BE ISSUED
* ROUTINE DISPLAYS INVOICED SALES RECORDS FOR SALES ORDER
* USER SELECTS INDIVIDUAL ITEMS TO ISSUE CREDIT FOR (AND ADJUSTS QTY  (AND TOTAL?) AS NECESSARY)
* USER ENTERS DESCRIPTION FOR CREDIT
* USER FILES CREDIT
* ROUTING PROCESSES CREDIT IN THE SAME FASHION AS INV.DIALOG, CREATING A SALES RECORD FOR EACH LINE ITEM SELECTED
* ROUTING CREATES AR RECORD LINKING SALES ORDERS
* ROUTING WRITES GLT RECORDS
*
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES SALES.H
*
*
$INCLUDE GUIBP ATGUIEQUATES
GUIERRORS = ''
PROG_ID   = "CREDIT.AMT.DIALOG"
GUIERRORS = ''
GUIAPP = "CREDIT.AMT"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "CREDIT.AMT"  ;* crease dialog startup time.
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'CREDIT.AMT.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'CREDIT.AMT.DIALOG' ELSE
   CALL ATGUIERROR(3,'CREDIT.AMT.DIALOG','',0,GRFATAL,"'CREDIT.AMT.DIALOG' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('CREDIT.AMT','CREDIT.AMT','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
GOSUB LOAD.CTRLS   ;* DISPLAY INITIAL USER VALUES
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='CREDIT.AMT'
         BEGIN CASE
            CASE GUIFRM='CREDIT.AMT'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.CREDIT.AMT.CREDIT.AMT.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNOK'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.CREDIT.AMT.CREDIT.AMT.BTNOK.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTPRICE'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.CREDIT.AMT.CREDIT.AMT.TXTPRICE.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTQTY'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.CREDIT.AMT.CREDIT.AMT.TXTQTY.VALIDATE;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.CREDIT.AMT.CREDIT.AMT.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.CREDIT.AMT.CREDIT.AMT.BTNOK.CLICK: *
GOSUB GUI.CREDIT.AMT.CREDIT.AMT.CLOSE;GUIEVT=0
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.CREDIT.AMT.CREDIT.AMT.TXTPRICE.VALIDATE: *
PRICE.VAL = GUIARGS<2>
BEGIN CASE        ;* VALUE USER ENTERED
   CASE NOT(NUM(PRICE.VAL))
      PRMPT = "Price ea: ":PRICE.VAL:" not valid."
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, PROG.ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
   CASE PRICE.VAL < 0
      PRMPT = "Price ea: ":PRICE.VAL" is negative, invalid."
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT,  PROG.ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
   CASE 1
      M.PRICE = PRICE.VAL"R2"
      GOSUB LOAD.CTRLS
END CASE
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.CREDIT.AMT.CREDIT.AMT.TXTQTY.VALIDATE: *
ORDQTY = GUIARGS<2>
IF ORDQTY LE 0 THEN
   PRMPT = "Invalid Order Qty, Please Correct"
   STYLE   = 2  ;* ?
   BUTTONS = 0  ;* ok / cancel
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, PROG.ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   QTY = 0
END ELSE
   M.QTY =  ORDQTY
   GOSUB LOAD.CTRLS
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,PROG.ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
************************************************************
* $PAGE$
************************************************************
LOAD.CTRLS:
*
* routine LOADS controls for ORDER_PARENT *
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<-1> = "TXTQTY"
PROPS<-1>   = GPVALUE
VALUES<-1>  = M.QTY
*
CTRLIDS<-1> = "TXTPRICE"
PROPS<-1>   = GPVALUE
VALUES<-1>  = M.PRICE
*
IF LOT.CHARGE THEN
   TOT.AMT = M.PRICE
END ELSE
   TOT.AMT = M.QTY * M.PRICE
END
CTRLIDS<-1> = "LBLTOTAMT"
PROPS<-1>   = GPVALUE
VALUES<-1>  = TOT.AMT"R2"
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
**
RETURN
END
