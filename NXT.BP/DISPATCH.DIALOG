SUBROUTINE DISPATCH.DIALOG(GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: DISPATCH.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 01/11/2016
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* ROUTINE is called to generate the dispatch report
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES WRT.H
$INCLUDE NXT.INCLUDES WC.H
$INCLUDE NXT.INCLUDES WO.H
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES NXT.WO.STATUS.DEF
*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID = "DISPATCH.DIALOG"
GET_REC_MSG_LIST = ''
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'DISPATCH.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'DISPATCH.DIALOG' ELSE
   CALL ATGUIERROR(3,'DISPATCH.DIALOG','',0,GRFATAL,"'DISPATCH.DIALOG' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"NETWORK_PATH",NETWORK_PATH_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
REPORT.SRVR.TEMP.DIR = OCONV(NETWORK_PATH_REC<SYS_SERVER_REPORT_PATH >,"MCU")
REPORT.SHARE.TEMP.DIR = OCONV(NETWORK_PATH_REC<SYS_SHARE_REPORT_PATH >,"MCU")
*
CALL SHARE.FILE.PATH.CALC(REPORT.SHARE.TEMP.DIR,NETWORK_PATH_REC,SHARE.DIR,'EXPAND')
*

*
* GET THE SEQ STATUS CODES
*
NS =  WORK.ORDER.SEQ.STATUS.LIST<1,WO.NS.IDX,1>
QU =  WORK.ORDER.SEQ.STATUS.LIST<1,WO.Q.IDX,1>
SU =  WORK.ORDER.SEQ.STATUS.LIST<1,WO.SU.IDX,1>
SC =  WORK.ORDER.SEQ.STATUS.LIST<1,WO.SC.IDX,1>
RN =  WORK.ORDER.SEQ.STATUS.LIST<1,WO.RN.IDX,1>
CMP = WORK.ORDER.SEQ.STATUS.LIST<1,WO.C.IDX,1>
RJT =   WORK.ORDER.SEQ.STATUS.LIST<1,WO.RJ.IDX,1>
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('DISPATCH','DISPATCH','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
GUIAPP = 'DISPATCH'
GUIFRM = 'DISPATCH'
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"LAST_SHOP_SCHEDULE",LAST_SS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF LAST_SS_REC = '' THEN
   LAST.SCHD = 'Last Shop Schedule: Not Run'
END ELSE
   LAST.SCHD = 'Last Shop Schedule: ':OCONV(LAST_SS_REC<1>,"D2/")
END

CALL ATGUISETPROP('DISPATCH','DISPATCH',"LBLLASTSS",GPVALUE,"","",LAST.SCHD,GUIERRORS,GUISTATE)
*
*
GOSUB LOAD.WCGRID
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='DISPATCH'
         BEGIN CASE
            CASE GUIFRM='DISPATCH'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.DISPATCH.DISPATCH.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCANCEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.DISPATCH.DISPATCH.BTNCANCEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCREATE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.DISPATCH.DISPATCH.BTNCREATE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNDESELECT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.DISPATCH.DISPATCH.BTNDESELECT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNSELECT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.DISPATCH.DISPATCH.BTNSELECT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNSS'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.DISPATCH.DISPATCH.BTNSS.CLICK;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.DISPATCH.DISPATCH.BTNCREATE.CLICK: *
*
* GET LIST OF WORK ORDER ROUTINE RECORDS TO PROCESS
*
GOSUB GET.WC.LIST
* ALL?
IF WC.SELECT.ALL THEN
   SLIST = "SSELECT WR BY WRT_WCID BY WR_SCHD_START WITH WR_STATUS # 'C' TO 2"
END ELSE
   SLIST = "SSELECT WR BY WRT_WCID BY WR_SCHD_START WITH WR_STATUS # 'C' AND WITH WRT_WCID = ":WC.SELECT.LIST:" TO 2"
END
*
** CRT SLIST
*
EXECUTE SLIST CAPTURING DMMY.OUT
*
IF @SELECTED GE 1 THEN
   *
   READLIST WR.ID.LIST FROM 2 THEN
      GOSUB GEN.REPORT
   END
END ELSE
   PRMPT = 'No Records found for Dispatch Report'
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.DISPATCH.DISPATCH.BTNDESELECT.CLICK: *
FOR I = 1 TO WC.LIST.CT
   WC.LIST<1,I,3> = 0  ;* de SELECTED
NEXT I
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,"GRID1",GPVALUE,WC.LIST,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.DISPATCH.DISPATCH.BTNSELECT.CLICK: *
FOR I = 1 TO WC.LIST.CT
   WC.LIST<1,I,3> = 1  ;* SELECTED
NEXT I
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,"GRID1",GPVALUE,WC.LIST,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.DISPATCH.DISPATCH.BTNSS.CLICK: *
CALL SHOP.SCHEDULE.DIALOG(GUIERRORS,GUISTATE)
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"LAST_SHOP_SCHEDULE",LAST_SS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF LAST_SS_REC = '' THEN
   LAST.SCHD = 'Last Shop Schedule: Not Run'
END ELSE
   LAST.SCHD = 'Last Shop Schedule: ':OCONV(LAST_SS_REC<1>,"D2/")
END

CALL ATGUISETPROP('DISPATCH','DISPATCH',"LBLLASTSS",GPVALUE,"","",LAST.SCHD,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.DISPATCH.DISPATCH.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.DISPATCH.DISPATCH.BTNCANCEL.CLICK: *
GOSUB GUI.DISPATCH.DISPATCH.CLOSE;GUIEVT=0
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
*
LOAD.WCGRID: *
*
* LOADS THE WORK CENTER GRID
*
WC.LIST = ''
WC.LIST.CT = 0
*
SLIST = 'SSELECT WC TO 2'
*
*
EXECUTE SLIST CAPTURING DMMY.OUT
*
IF @SELECTED GE 1 THEN
   *
   READLIST WC.ID.LIST FROM 2 THEN
      WC.LIST.CT = DCOUNT(WC.ID.LIST,@AM)
      *
      FOR I = 1 TO WC.LIST.CT
         WC_ID = WC.ID.LIST<I,1>
         *
         CALL GET.RECORD("WC",C.WC,WC_ID,WC_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
         *
         IF WC_REC = '' THEN
            WC.NAME = "Record Missing?"
            LOG.OPTS = "DISPLAY"
            ERROR_NBR = ERR_SYS
            ERROR_MSG =  "Missing Selected WC Record: ":WC_ID
            CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         END
         * BUILD WC.LIST FOR GRID UPDATE
         WC.LIST<1,I,1> = WC_ID
         WC.LIST<1,I,2> = WC_REC<WC_NAME>
         WC.LIST<1,I,3> = WC_REC<WC_DISPATCH>  ;* SELECTED
      NEXT I
   END
END
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,"GRID1",GPVALUE,WC.LIST,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
*************************************************************
*
* GET LIST OF WORK CENTERS TO PROCESS
*
GET.WC.LIST:
WC.SELECT.LIST = '' ;* RETURNED LIST OF WORK CENTERS SELECTED FOR DISPATCH REPORTING
WC.SELECT.ALL = @TRUE   ;* ALL WORK CENTERS SELECTED
*
FOR I = 1 TO WC.LIST.CT
   IF WC.LIST<1,I,3> THEN   ;*SELECTED ?
      WC.SELECT.LIST := '"':WC.LIST<1,I,1>:'" '
   END ELSE
      WC.SELECT.ALL = @FALSE   ;* AND NON SELECTED RESULTS IN THIS BEING FALSE
   END
NEXT I
RETURN
*************************************************************
* GEN.REPROT ROUTINE
*
*  Because the dispatch reports dates depend on accurate (up to date) WR records we recommend to the user that a shop reschedule be performed
*  prior to dispatch creation
*
*  Note:  This will also update the WC_LOAD records
*
*   WC_LOAD ID "LOAD DATE" * "WO ID" * "SEQ ID"
*     <1> = LOAD HRS
*     <2> = RUN DATE
*
*   WR.ID.LIST - POPULATED BY GUI.DISPATCH.DISPATCH.BTNCREATE.CLICK
*
* Routine creates a CSV file of data (for each wc for each status??)
* Routine call sub routine which takes csv data and produces html page for each wc ??
*  - with link to csv data for download??
*
GEN.REPORT:
*
I = 0  ;* records processed count
PREV.WC = ''
*
*  REM - WR.ID.LIST - POPULATED BY GUI.DISPATCH.DISPATCH.BTNCREATE.CLICK
*
WR.LIST.CT = DCOUNT( WR.ID.LIST,@AM)
*
FIRST.PASS = @TRUE
*
FOR I = 1 TO WR.LIST.CT
   WR_ID = WR.ID.LIST<I,1>
   WO_ID = FIELD(WR_ID,'*',1)
   *
   CALL GET.RECORD("WR",C.WR,WR_ID,WR_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
   CALL GET.RECORD("WO",C.WO,WO_ID,WO_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
   *
   IF WO_REC = ''  OR WR_REC = ''  THEN
      LOG.OPTS = "DISPLAY"
      ERROR_NBR = ERR_SYS
      ERROR_MSG =  "Missing Selected WO/WR Record: ":WO_ID:'/':WR_ID
      CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   END ELSE
      WC_ID = WR_REC<WRT_WCID>
      *
      * NEW WC?
      *
      IF WC_ID <> PREV.WC THEN
         *
         IF FIRST.PASS THEN
            FIRST.PASS = @FALSE
         END ELSE
            *
            * CLOSE PREVIOUS FILES
            CLOSESEQ QUEUE.FILE
            CLOSESEQ NS.FILE
            CLOSESEQ RN.FILE
            *
            * need to add code to append dispatch files to ?wc.csv?
            * then delete queue, ns and rn file
            * also add to last close at end of loop
            *
            CALL !OSCOPY(QUEUE.FILE.NAME, NS.FILE.NAME,@TRUE,@FALSE,@TRUE)
            CALL !OSCOPY(RN.FILE.NAME, NS.FILE.NAME,@TRUE,@FALSE,@TRUE)
            OSDELETE QUEUE.FILE.NAME
            OSDELETE RN.FILE.NAME

         END
         PREV.WC = WC_ID
         *

         NS.FILE.NAME = SHARE.DIR:@DS:WC_ID:'_DISPATCH.CSV'   ;* COMPLETE DISPATCH FOR WC ENDS UP HERE
         QUEUE.FILE.NAME = SHARE.DIR:@DS:WC_ID:'_QU.CSV'
         RN.FILE.NAME = SHARE.DIR:@DS:WC_ID:'_RN.CSV'
         * OPEN DISPATCH FILES  (OR CREATE) FOR WRITING
         OPN.ERROR = ''
         *
         OPENSEQ QUEUE.FILE.NAME OVERWRITE TO QUEUE.FILE THEN
            NULL
         END ELSE
            CREATE QUEUE.FILE THEN NULL ELSE OPN.ERROR := QUEUE.FILE.NAME
         END
         *
         OPENSEQ NS.FILE.NAME OVERWRITE TO NS.FILE THEN
            NULL
         END ELSE
            CREATE NS.FILE THEN NULL ELSE OPN.ERROR := NS.FILE.NAME
         END
         *
         OPENSEQ RN.FILE.NAME OVERWRITE TO RN.FILE THEN
            NULL
         END ELSE
            CREATE RN.FILE THEN NULL ELSE OPN.ERROR := RN.FILE.NAME
         END
         *
         *
         IF OPN.ERROR = '' THEN ;* NO ERRORS OPENING FILES, WRITE HEADERS
            *
            WRITECSV '','','',WC_ID:' Not Started - Creation:':TIMEDATE() TO NS.FILE THEN NULL ELSE OPN.ERROR := NS.FILE.NAME
            WRITECSV '','','',WC_ID:' Queue' TO QUEUE.FILE THEN NULL ELSE OPN.ERROR := QUEUE.FILE.NAME
            WRITECSV '','','',WC_ID:' Running' TO RN.FILE THEN NULL ELSE OPN.ERROR := RN.FILE.NAME
            *
            WRITECSV "WO Number", "Part Number", "Qty to MFG", "Operation Description", "Start Date", "End Date" TO RN.FILE THEN NULL ELSE OPN.ERROR := RN.FILE.NAME
            WRITECSV "WO Number", "Part Number", "Qty to MFG", "Operation Description", "Start Date", "End Date" TO QUEUE.FILE THEN NULL ELSE OPN.ERROR := QUEUE.FILE.NAME
            WRITECSV "WO Number", "Part Number", "Qty to MFG", "Operation Description", "Start Date", "End Date" TO NS.FILE THEN NULL ELSE OPN.ERROR := NS.FILE.NAME
         END
         *
         IF OPN.ERROR <> '' THEN
            *
            * REAL PROBLEMS HERE, NOT ERROR AND BALE
            LOG.OPTS = "DISPLAY"
            ERROR_NBR = ERR_SYS
            ERROR_MSG =  "Process Aborted, Error attempting to open / write file: ":OPN.ERROR
            CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
            GOTO GEN.REPORT.9999
         END
      END

      SEQ.DESC = WR_REC<WRT_DESC>
      START.DT = OCONV(WR_REC<WR_SCHD_START>,WR_SCHD_START.CNV)
      END.DT = OCONV(WR_REC<WR_SCHD_END>,WR_SCHD_END.CNV)
      STATUS = WR_REC<WR_STATUS>
      QTY.MFG = WR_REC<WR_QTY_TO_MFG>
      PART.NBR = WO_REC<WO_PARTNBR>
      *
      * ADD RECORD TO DISPATCH FILE BASED ON SEQ STATUS
      *
      WRT.ERROR = ''
      BEGIN CASE
         CASE STATUS = QU
            WRITECSV WO_ID, PART.NBR, QTY.MFG, SEQ.DESC<1,1>, START.DT, END.DT TO QUEUE.FILE THEN NULL ELSE WRT.ERROR = STATUS()
         CASE STATUS = NS
            WRITECSV WO_ID, PART.NBR, QTY.MFG, SEQ.DESC<1,1>, START.DT, END.DT TO NS.FILE THEN NULL ELSE WRT.ERROR = STATUS()
         CASE 1
            WRITECSV WO_ID, PART.NBR, QTY.MFG, SEQ.DESC<1,1>, START.DT, END.DT TO RN.FILE THEN NULL ELSE WRT.ERROR = STATUS()
      END CASE
      IF WRT.ERROR <> '' THEN
         *
         * REAL PROBLEMS HERE, NOTE ERROR AND BALE
         LOG.OPTS = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG =  "Process Aborted, Error attempting to Write File: ":WRT.ERROR
         CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         GOTO GEN.REPORT.9999
      END
   END
NEXT I
IF FIRST.PASS = @FALSE THEN
   * CLOSE PREVIOUS FILES
   CLOSESEQ QUEUE.FILE
   CLOSESEQ NS.FILE
   CLOSESEQ RN.FILE
   *
   CALL !OSCOPY(QUEUE.FILE.NAME, NS.FILE.NAME,@TRUE,@FALSE,@TRUE)
   CALL !OSCOPY(RN.FILE.NAME, NS.FILE.NAME,@TRUE,@FALSE,@TRUE)
   OSDELETE QUEUE.FILE.NAME
   OSDELETE RN.FILE.NAME
END

GEN.REPORT.9999: *
PRMPT = I:' Records Processed for Dispatch Report'
STYLE   = 2  ;* !
BUTTONS = 0  ;* ok
HELPID = ""
CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
RETURN
*************************************************************
END
