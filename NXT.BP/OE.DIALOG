SUBROUTINE OE.DIALOG(GUIERRORS,GUISTATE)
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: OE.DIALOG
* AUTHOR: MAB
* VERSION: 2.0.1
* CREATED: 11/18/2014
* UPDATED:
*
* MAINTENANCE RECORD:
* 11/14 - CHECK FOR RECORD LOCK GUI.OE.OE.BTN2CANCEL.CLICK
* 11/14 - CONVERT FROM GUISUB.OE TO OE.DIALOG
* 02/15 - CORRECT STANDARD MISSPELLING
* 02/15 - CORRECT PRICE.VALIDATE (DUPLICATE "CASE NOT(NUM(PRICE.EA))" BLOCK IN CASE STATEMENT)
* 02/15 - ADD CHKLOT - SPECIFIES PRICE IS A LOT CHARGE
* 02/18/15 - PREVENT USER FROM SKIPPING ROW ON GRDPRO (CERT / PROCESS STEP ENTRY) ADDED GRDPRO.ACTIVATEROW EVENT
* 06/13/15 - add custom user defined controls to forms
* 01/05/16 - ADD VIEW BUTTON
*
*
*
*
* EQUATE:
*
*
* VARIABLES:
*
*
* FILES:
*
*
* DESIGN DESCRIPTION:
*  ORDER ENTRY SCREEN
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES CUSTOMERS.H
$INCLUDE NXT.INCLUDES SHIP_TO.H
$INCLUDE NXT.INCLUDES ORDER_PARENT.H
$INCLUDE NXT.INCLUDES ORDER_CHILD.H
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES PROCESS_STEPS.H
$INCLUDE NXT.INCLUDES PROCESS_GROUPS.H
$INCLUDE NXT.INCLUDES SALES.H
$INCLUDE NXT.INCLUDES AR.H
*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "OE.DIALOG"
GUIERRORS = ''
GUIAPP = "OE"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "OE"  ;* crease dialog startup time.
*

* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'OE','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'OE' ELSE
   CALL ATGUIERROR(3,'OE','',0,GRFATAL,"'OE' is not on file.",GUIERRORS)
   RETURN
END
*
GET_REC_MSG_LIST = ''     ;* GENERIC GET RECORD ERROR MESSAGE LIST
SAVE_OP_REC = ''          ;* ORDER PARENT AND CHILD RECORDS NEED TO BE INITIALIZED
OP_REC = ''               ;* FOR CLOSE EVENT TO HANDLE RECORDS NOT SAVED CHECK
SAVE_OC_REC = ''
OC_REC = ''
OC_ID  = ''
OP_ID  = ''
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('OE','OE','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
*
* CREATE LISTS FOR  DROP DOWN CONTROLS
*
DFTL.PROCESS.LIST = '' ;* Default process steps
MATL.LIST   = '' ;* ;LIST OF MATERIAL TYPES
MATL.IDX    = ''
TERMS.LIST  = ''  ;* LIST FOR PAYMENT TERMS SELECTION
TERMS.IDX   = ''
TYPE.LIST  = ''  ;* LIST FOR ORDER TYPE
TYPE.IDX   = ''
CLASS.LIST  = ''  ;* LIST FOR CLASS TYPE
CLASS.IDX   = ''
VIA.LIST  = ''  ;* LIST FOR SHIP VIA
VIA.IDX   = ''
SALESPERSON.LIST  = ''  ;* LIST FOR SALESPERSON
SALESPERSON.IDX   = ''
SPC.LIST  = '' ;* LIST FOR SALES PRODUCT CODE (SPC)
SPC.IDX   = ''
TAX.LIST  = '' ;* LIST FOR SALES TAX CODE
TAX.IDX   = ''
GL.CODES.LIST  = ''  ;* LIST FOR GL TRANS CODES
GL.CODES.IDX   = ''
*
CALL LIST.LOAD(C.VALIDATION_FILE,"MATERIAL","2",'',MATL.LIST,MATL.IDX,LIST.COUNT,EMSG)
CALL LIST.LOAD(C.VALIDATION_FILE,"TERMS","2",'',TERMS.LIST,TERMS.IDX,LIST.COUNT,EMSG)
CALL LIST.LOAD(C.VALIDATION_FILE,"ORDER.TYPE","2",'',TYPE.LIST,TYPE.IDX,LIST.COUNT,EMSG)
CALL LIST.LOAD(C.VALIDATION_FILE,"ORDER.CLASS","2",'',CLASS.LIST,CLASS.IDX,LIST.COUNT,EMSG)
CALL LIST.LOAD(C.VALIDATION_FILE,"SALES.PERSONS","",'',SALESPERSON.LIST,SALESPERSON.IDX,LIST.COUNT,EMSG)
CALL LIST.LOAD(C.VALIDATION_FILE,"SHIP.VIA","",'',VIA.LIST,VIA.IDX,LIST.COUNT,EMSG)
CALL LIST.LOAD(C.VALIDATION_FILE,"SALES.CODES","2",'',SPC.LIST,SPC.IDX,LIST.COUNT,EMSG)
CALL LIST.LOAD(C.VALIDATION_FILE,"SALES.TAX","2,3",'"",MD35"',TAX.LIST,TAX.IDX,LIST.COUNT,EMSG)
CALL LIST.LOAD(C.VALIDATION_FILE,"GL.TRANS.CODES","2",'',GL.CODES.LIST,GL.CODES.IDX,LIST.COUNT,EMSG)
*
* get default process steps & cert codes
*
* POPULATE PROCESS ID DROP DOWN LIST IN GRDPRO WITH PROCESS GROUPS & STEPS
CALL LOAD.PROCESS.GROUPS.STEPS(DFLT.PROCESS.LIST,PROCESS.IDS,LIST.CT,GUIAPP,GUIFRM,"GRDPRO",GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* POPULATE CERT CODE DROP DOWN LIST IN GRDPRO WITH CERT CODES
CALL LOAD.PROCESS.CERTS(CERT.LIST,CERT.IDS,CERT.CT,GUIAPP,GUIFRM,"GRDPRO",GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* COMPANY RECORD
*
GET_REC_MSG_LIST = ''
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"COMPANY_RECORD",COMPANY_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF COMPANY_REC = '' THEN
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "Missing COMPANY_RECORD from SYSTEM_FILE"
   CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GOSUB GUI.OE.OE.CLOSE;GUIEVT=0
   RETURN
END
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"NETWORK_PATH",NETWORK_PATH_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
*
* SET CUSTOM FIELDS FOR THIS FORM
*
CFLD.OPTIONS = ''  ;* NO SPECIAL OPTIONS SET
CALL SETUP.CUSTOM.CONTROLS("CFLD*ORDER_PARENT",ORDER_PARENT_CUSTOM_FLDS_REC,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
CALL SETUP.CUSTOM.CONTROLS("CFLD*ORDER_CHILD",ORDER_CHILD_CUSTOM_FLDS_REC,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
*
* LOAD IN LOT CHARGES DESCRIPTIONS INTO QUOTE GRID, PRICE COLUMN
*
CALL GET.RECORD("VALIDTAION_FILE",C.VALIDATION_FILE,"LOT.CHARGES",LOT.CHARGES,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF LOT.CHARGES = '' THEN
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "LOT.CHARGES not found in VALIDATION_FILE"
   CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GOSUB GUI.OE.OE.CLOSE;GUIEVT=0
   RETURN
END ELSE
   DMMY.LIST = ''
   TEMP.LIST = ''
   LOT.CHARGE.LIST  = ''
   CALL LIST.LOAD(C.VALIDATION_FILE,"LOT.CHARGES","2",'',DMMY.LIST,TEMP.LIST,LIST.COUNT,EMSG)
   FOR I = 1 TO LIST.COUNT
      TEMP.ID = LOT.CHARGE.LIST<1,I,1>
      LOT.CHARGE.LIST<1,I,1> = LOT.CHARGE.LIST<1,I,2>
      LOT.CHARGE.LIST<1,I,2> = TEMP.ID
   NEXT I
   *
END
*
*
* LOAD IN EXTRA CHARGE CODES AND DESCRIPTIONS INTO EXTRA CHARGE GRID
*
CALL GET.RECORD("VALIDTAION_FILE",C.VALIDATION_FILE,"EXTRA.CHARGES",EXTRA.CHARGES,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF EXTRA.CHARGES = '' THEN
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "EXTRA.CHARGES not found in VALIDATION_FILE"
   CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GOSUB GUI.OE.OE.CLOSE;GUIEVT=0
   RETURN
END ELSE
   DMMY.LIST = ''
   TEMP.LIST = ''
   EC.CHARGE.LIST  = ''
   CALL LIST.LOAD(C.VALIDATION_FILE,"EXTRA.CHARGES","2",'',TEMP.LIST,DMMY.LIST,LIST.COUNT,EMSG)
   FOR I = 1 TO LIST.COUNT
      EC.CHARGE.LIST<1,1,I> = TEMP.LIST<1,I,1> : '|': TEMP.LIST<1,I,2>
   NEXT I
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDEC",GPCOLITEMS,1,0,EC.CHARGE.LIST,GUIERRORS,GUISTATE)
END
*
* SYSTEM DEFAULTS RECORD
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"DEFAULTS",DEFAULTS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
*
* USER RECORD
*
USER_RECORD_ID = "USER*":@LOGNAME
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,USER_RECORD_ID,USER_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF USER_REC # '' THEN
   IF USER_REC<USER_PRICE_RESTRICTED> THEN
      USER.IS.RESTRICTED = @TRUE
   END ELSE
      USER.IS.RESTRICTED = @FALSE
   END
   *
   IF USER_REC<USER_PACKSLIP_PRINTER> = '' THEN
      PACKSLIP.PRINTER = 0  ;* SET TO DEFAULT PRINTER
      LOG.OPTS  = "DISPLAY"
      ERROR_NBR = ERR_SYS
      ERROR_MSG =  "Missing PACKSLIP_PRINTER from USER record in, SYSTEM_FILE"
      CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   END ELSE
      PACKSLIP.PRINTER = USER_REC<USER_PACKSLIP_PRINTER>
   END
   *
   IF USER_REC<USER_INVOICE_PRINTER> = '' THEN
      INVOICE.PRINTER = 0  ;* SET TO DEFAULT PRINTER
      LOG.OPTS  = "DISPLAY"
      ERROR_NBR = ERR_SYS
      ERROR_MSG =  "Missing INVOICE_PRINTER from USER record in, SYSTEM_FILE"
      CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   END ELSE
      INVOICE.PRINTER = USER_REC<USER_INVOICE_PRINTER>
   END
   *
   IF USER_REC<USER_PROCESS_PRINTER> = '' THEN
      PROCESS.PRINTER = 0  ;* SET TO DEFAULT PRINTER
      LOG.OPTS  = "DISPLAY"
      ERROR_NBR = ERR_SYS
      ERROR_MSG =  "Missing PROCESS_PRINTER from USER record in, SYSTEM_FILE"
      CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   END ELSE
      PROCESS.PRINTER = USER_REC<USER_PROCESS_PRINTER>
   END
   *
   IF USER_REC<USER_LABEL_PRINTER> = '' THEN
      LABEL.PRINTER = 0  ;* SET TO DEFAULT PRINTER
      LOG.OPTS  = "DISPLAY"
      ERROR_NBR = ERR_SYS
      ERROR_MSG =  "Missing LABEL_PRINTER from USER record in, SYSTEM_FILE"
      CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   END ELSE
      LABEL.PRINTER = USER_REC<USER_LABEL_PRINTER>
   END
   *
   GOSUB LOAD.CM.NAME.LIST         ;* ADD CUSTOMER NAMES TO LST1CUSTNAME
   GOSUB LOAD.ORDER.LISTS          ;* LOAD DROP DOWN LISTS
   GOSUB CLEAR.BUFFERS
END ELSE
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "Unknow User: ":@LOGNAME
   CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GOSUB GUI.OE.OE.CLOSE;GUIEVT=0
   RETURN
END
*
* IF PRESHIP, MAKE BUTTONS VISABLE
IF NX_SHIP_METHOD = PRESHIP THEN
   *
   CALL PACKSLIP.TEMPLATE(PACKFM)  ;* GET PACKSLIP FORM TEMPLATE
   CALL CERT.TEMPLATE(CERTFM)  ;* GET PACKSLIP FORM TEMPLATE
   *
   * MAKE PRE SHIP AND SHIP BUTTONS VISIBLE
   *
   CTRLIDS = "BTN2SHIP"
   PROPS   = GPVISIBLE
   VALUES  = 1
   *
   CTRLIDS<2> = "BTN2PRESHIP"
   PROPS<2>   = GPVISIBLE
   VALUES<2>  = 1
   *
   CALL ATGUISETPROPS("OE","OE",CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
END
*
* IF WORK ORDERS AND USER ALLOWED, MAKE WO RELEASE BUTTON ACTIVE
IF   (USER_REC<USER_WORKORDERS> + 0) AND NXT_ENABLE_WCANDRT THEN
   *
   * MAKE WO RELEASE BUTTON ACTIVE
   *
   CTRLIDS = "BTNWOREL"
   PROPS   = GPVISIBLE
   VALUES  = 1
   *
   CALL ATGUISETPROPS("OE","OE",CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
END
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='OE'
         BEGIN CASE
            CASE GUIFRM='OE'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.OE.OE.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTN1EDITBILL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTN1EDITBILL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTN1EDITSHIP'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTN1EDITSHIP.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTN1FIND'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTN1FIND.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTN1NEWBILL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTN1NEWBILL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTN1NEWSHIP'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTN1NEWSHIP.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTN2CANCEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTN2CANCEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTN2FILE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTN2FILE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTN2NEW'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTN2NEW.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTN2PRESHIP'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTN2PRESHIP.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTN2SHIP'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTN2SHIP.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNACT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNACT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCANCEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNCANCEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNDELETEORDER'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNDELETEORDER.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNDELPRO'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNDELPRO.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNFILEORDER'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNFILEORDER.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNINSAFTER'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNINSAFTER.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNINSBEFORE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNINSBEFORE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNLABEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNLABEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNLABEL2'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNLABEL2.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNMOD'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNMOD.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNNEWORDER'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNNEWORDER.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNORDER_LBL_PRT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNORDER_LBL_PRT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNPARTMASTER'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNPARTMASTER.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNPRINTRECLBL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNPRINTRECLBL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNPROLBL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNPROLBL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNROUTER'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNROUTER.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNVIEW'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNVIEW.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNWOREL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.BTNWOREL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='CB1BUYER'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.CB1BUYER.CLICK;GUIEVT=0
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.CB1BUYER.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='CB1SALESPERSON'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.CB1SALESPERSON.CLICK;GUIEVT=0
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.CB1SALESPERSON.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='CB1SHIPVIA'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.CB1SHIPVIA.CLICK;GUIEVT=0
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.CB1SHIPVIA.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='CB2MATL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.CB2MATL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='CB2PRICE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.CB2PRICE.CLICK;GUIEVT=0
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.CB2PRICE.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='CHKHOLD'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.CHKHOLD.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='CHKLOT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.CHKLOT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='CHKTAX'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.CHKTAX.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='CHKTESTPCS'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.CHKTESTPCS.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='GRDEC'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATECELL
                           GOSUB GUI.OE.OE.GRDEC.VALIDATECELL;GUIEVT=0
                        CASE GUIEVT=GEVALIDATEROW
                           GOSUB GUI.OE.OE.GRDEC.VALIDATEROW;GUIEVT=0
                     END CASE
                  CASE GUICTL='GRDLINES'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATEROW
                           GOSUB GUI.OE.OE.GRDLINES.VALIDATEROW;GUIEVT=0
                     END CASE
                  CASE GUICTL='GRDPRO'
                     BEGIN CASE
                        CASE GUIEVT=GEACTIVATEROW
                           GOSUB GUI.OE.OE.GRDPRO.ACTIVATEROW;GUIEVT=0
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.GRDPRO.CLICK;GUIEVT=0
                        CASE GUIEVT=GEVALIDATECELL
                           GOSUB GUI.OE.OE.GRDPRO.VALIDATECELL;GUIEVT=0
                     END CASE
                  CASE GUICTL='LBSPC'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.LBSPC.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LBTAX'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.LBTAX.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LST1CUSTNAME'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.LST1CUSTNAME.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LST1ORDCLASS'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.LST1ORDCLASS.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LST1ORDTYPE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.LST1ORDTYPE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LST1SHIPTO'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.LST1SHIPTO.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LST1TERMS'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.LST1TERMS.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LSTGLTRANS'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.LSTGLTRANS.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LSTITEM'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.LSTITEM.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='MENU'
                     GUIMNU=OCONV(GUIARGS<1,1>,'MCU')
                     BEGIN CASE
                        CASE GUIMNU='CANSHIP'
                           GOSUB GUI.OE.OE.MENU.CANSHIP;GUIEVT=0
                        CASE GUIMNU='CLOSE'
                           GOSUB GUI.OE.OE.MENU.CLOSE;GUIEVT=0
                        CASE GUIMNU='DELITEM'
                           GOSUB GUI.OE.OE.MENU.DELITEM;GUIEVT=0
                        CASE GUIMNU='PRINT'
                           GOSUB GUI.OE.OE.MENU.PRINT;GUIEVT=0
                        CASE GUIMNU='REPRINT'
                           GOSUB GUI.OE.OE.MENU.REPRINT;GUIEVT=0
                     END CASE
                  CASE GUICTL='TABEC'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.TABEC.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='TABIT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.OE.OE.TABIT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT1ENTBY'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXT1ENTBY.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT1ORDDT'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXT1ORDDT.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT1ORDNOTES'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXT1ORDNOTES.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT1ORDVAL'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXT1ORDVAL.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT1POVAL'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXT1POVAL.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT2CMREF'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXT2CMREF.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT2DESC'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXT2DESC.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT2DRAWING'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXT2DRAWING.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT2NOTES'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXT2NOTES.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT2PN'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXT2PN.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT2PRI'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXT2PRI.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT2REV'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXT2REV.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTOCUSER1'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXTOCUSER1.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTOCUSER2'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXTOCUSER2.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTOCUSER3'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXTOCUSER3.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTOCUSER4'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXTOCUSER4.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTOCUSER5'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXTOCUSER5.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTOCUSER6'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXTOCUSER6.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTOPUSER1'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXTOPUSER1.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTOPUSER2'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXTOPUSER2.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTOPUSER3'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXTOPUSER3.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTOPUSER4'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXTOPUSER4.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTOPUSER5'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXTOPUSER5.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTOPUSER6'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.OE.OE.TXTOPUSER6.VALIDATE;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      IF GUIAPP='OE' THEN
         GOSUB GUI.DYNAMIC.EVENTS
         GUIEVT=0
      END
   END
END ELSE
   IF GUIAPP='OE' THEN
      GOSUB GUI.CUSTOM.EVENTS
      GUIEVT=0
   END
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTN2PRESHIP.CLICK: *
IF OC_REC # '' THEN       ;* MUST HAVE RECORD
   IF OC_REC # SAVE_OC_REC THEN  ;* FORCE SAVE BEFORE PRESHIP
      PRMPT = "Item detail must be filed prior to pre ship"
      CAPTION = "Order Entry"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END ELSE
      BEGIN CASE
         CASE OC_REC<OC_CLOSE> = "C"
            PRMPT = "This item marked closed, reopen prior to pre-ship"
            CAPTION = "Order Entry"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok only
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

         CASE OC_REC<OC_HOLD>
            PRMPT = "Hold Shipments checked for this order, must clear prior to shipment"
            CAPTION = "Order Entry"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok only
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         CASE 1
            *
            * USER HIT THE pre SHIP BUTTON,
            * CONFIRM
            *
            PRMPT = "Create pre-ship documents for this item?"
            CAPTION = "Order Entry"
            STYLE   = 2  ;* !
            BUTTONS = 4  ;* yes / no
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            IF RESPONSE = 7 THEN  ;* NO
               PRMPT = "Pre-ship cancelled for this item"
               CAPTION = "Order Entry"
               STYLE   = 2  ;* !
               BUTTONS = 0  ;* yes / no
               HELPID = ""
               CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            END ELSE ;* YES CREATE PRESHIP DOCUMENTS
               * FILL IN THE SALES RECORD,
               * WRITE IT OUT
               * UPDATE ORDER CHILD
               * WRITE IT OUT
               * RESET FOR THE NEXT SHIPMENT
               *
               CALL NXT.NEXTNBR("SALES",SA_ID,ERROR_STATUS,GUIERRORS,GUISTATE)
               IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
               IF SA_ID # '' THEN
                  * PROCESS CREATES SHIPMENT REQUEST
                  * CALCULATE BALANCE DUE ON THIS ITEM
                  * AND SET NEXT.DEL.IDX
                  CALL SHIP.CALC.BAL.DUE(BAL.DUE,NEXT.DEL.IDX,PRESHIP.ACTIVE,PRESHIP.IDX,SCHD.NOTES,OC_REC)
                  IF BAL.DUE LE 0 THEN
                     PRMPT = "Nothing remaining to ship on this order"
                     CAPTION = "Order Entry"
                     STYLE   = 2  ;* !
                     BUTTONS = 0  ;* ok only
                     HELPID = ""
                     CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
                     *
                  END ELSE

                     IF PRESHIP.ACTIVE THEN
                        PRMPT = "Preship active on this order, must complete prior to creating another shipment"
                        CAPTION = "Order Entry"
                        STYLE   = 2  ;* !
                        BUTTONS = 0  ;* ok only
                        HELPID = ""
                        CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

                     END ELSE
                        * FILL IN THE SALES RECORD,
                        * WRITE IT OUT
                        * UPDATE ORDER CHILD
                        * WRITE IT OUT
                        * CREATE CERT RECORD
                        * WRITE IT OUT  -- ALL DONE VIA SHIP.CREATE.SHIPMENT
                        DEL.QTY = 0   ;* ON PRESHIP DELIVERY QTY IS ZERO
                        CALL SHIP.CREATE.SHIPMENT(SA_REC,CT_ID,CT_REC,DEL.QTY,NEXT.DEL.IDX,SCHD.NOTES,OC_ID,SA_ID,OP_REC,OC_REC,CM_REC,SHIPTO_REC)
                        *
                        * PRINT THE PACKSLIP
                        *
                        CALL PACKSLIP.FORM(SA_REC,SA_ID,PACKFM)
                        PACKFM1 = PACKFM:ESC:'*p1000x3050Y':COMPANY_REC<COMP_NAME>:' Copy':ESC:'*p0x0Y'
                        IF NX.PRINT.ENABLE THEN PRINT ON PACKSLIP.PRINTER PACKFM1
                        IF NX.PRINT.ENABLE THEN PRINTER CLOSE ON PACKSLIP.PRINTER
                        PACKFM1 = PACKFM:ESC:'*p1000x3050Y':'Customer Copy':ESC:'*p0x0Y'
                        IF NX.PRINT.ENABLE THEN PRINT ON PACKSLIP.PRINTER PACKFM1
                        IF NX.PRINT.ENABLE THEN PRINTER CLOSE ON PACKSLIP.PRINTER
                        *
                        * PRINT THE CERT
                        *
                        CALL CERT.FORM(CT_REC,CT_ID,CERTFM)
                        IF NX.PRINT.ENABLE THEN PRINT ON PACKSLIP.PRINTER CERTFM
                        IF NX.PRINT.ENABLE THEN PRINTER CLOSE ON PACKSLIP.PRINTER
                        IF NOT(NX.PRINT.ENABLE) THEN
                           PRMPT = "NX.PRINT.ENABLE set to False, No Documents Printed"
                           CAPTION = "Order Entry"
                           STYLE   = 2  ;* !
                           BUTTONS = 0  ;* ok only
                           HELPID = ""
                           CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
                        END
                        **
                        * REFRESH GRID
                        *
                        GOSUB LOAD.SCHD.DETAIL
                        CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDLINES",GPVALUE,0,0,SCHD.DETAIL.LIST,GUIERRORS,GUISTATE)
                        IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
                        *
                     END
                  END
               END
            END
      END CASE
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTN2SHIP.CLICK: *
IF OC_REC # '' THEN       ;* MUST HAVE RECORD
   IF OC_REC # SAVE_OC_REC THEN  ;* FORCE SAVE BEFORE SHIP
      PRMPT = "Item detail must be filed prior to Ship"
      CAPTION = "Order Entry"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END ELSE
      * CALCULATE BALANCE DUE ON THIS ITEM
      * AND SET PRESHIP.IDX
      CALL SHIP.CALC.BAL.DUE(BAL.DUE,NEXT.DEL.IDX,PRESHIP.ACTIVE,PRESHIP.IDX,SCHD.NOTES,OC_REC)
      IF BAL.DUE LE 0 THEN
         PRMPT = "Nothing remaining to ship on this order"
         CAPTION = "Order Entry"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         *
      END ELSE
         IF NOT(PRESHIP.ACTIVE) THEN
            PRMPT = "Pre - Ship not active on this item"
            CAPTION = "Order Entry"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok only
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            *
         END ELSE
            * GET THE QTY TO SHIP
            * NOTE THIS WILL CAUSE A WRITE OF THE ORDER_CHILD RECORD
            CALL PRESHIP.DIALOG(OC_ID,OC_REC,BAL.DUE,PRESHIP.IDX,USR.CANCEL,GUIERRORS,GUISTATE)
            *
            * IF COMPLETED, REFRESH GRID
            *
            IF NOT(USR.CANCEL) THEN
               GOSUB LOAD.SCHD.DETAIL
               CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDLINES",GPVALUE,0,0,SCHD.DETAIL.LIST,GUIERRORS,GUISTATE)
               IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
            END
            *
         END
      END
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNACT.CLICK: *
IF PN_ID # '' AND PARTS_REC # '' THEN
   ACT.OPTS = ''
   CALL ACT.DIALOG(PN_ID,PARTS_REC,ACT.OPTS,RTN.DATA,GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNDELPRO.CLICK: *
IF NOT(USER_REC<USER_PROCESS_STEPS>) THEN
   IF PROCESS.STEP.SELECTED > 0 THEN
      *RESET BACKGOUND COLOR TO DELFAULT
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      * REMOVE SELECTED STEP
      DEL OC_REC<OC_PROCESS_ID,PROCESS.STEP.SELECTED>
      DEL OC_REC<OC_PROCESS_DESC,PROCESS.STEP.SELECTED>
      DEL OC_REC<OC_PROCESS_CERT,PROCESS.STEP.SELECTED>
      DEL OC_REC<OC_PROCESS_CERT_CODE,PROCESS.STEP.SELECTED>
      *  RESET SELECTED HIGHLIGHT
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      PROCESS.STEP.SELECTED = 0
      * UPDATE CONTROL
      GOSUB LOAD.GRDPRO
   END
END ELSE
   PRMPT = "User Access to this function restricted"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNINSAFTER.CLICK: *
IF NOT(USER_REC<USER_PROCESS_STEPS>) THEN
   IF PROCESS.STEP.SELECTED > 0 THEN
      IF OC_REC<OC_PROCESS_ID,PROCESS.STEP.SELECTED> = '' THEN
         PRMPT = 'This Process Step is Undefined,':@SVM:'Cannot Insert After'
         CAPTION = "Order Entry"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         *
      END ELSE
         *RESET BACKGOUND COLOR TO DELFAULT
         CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         * REMOVE SELECTED STEP
         INS "NOTES" BEFORE OC_REC<OC_PROCESS_ID,PROCESS.STEP.SELECTED+1>
         INS " " BEFORE OC_REC<OC_PROCESS_DESC,PROCESS.STEP.SELECTED+1>
         INS "0" BEFORE OC_REC<OC_PROCESS_CERT,PROCESS.STEP.SELECTED+1>
         INS " " BEFORE OC_REC<OC_PROCESS_CERT_CODE,PROCESS.STEP.SELECTED+1>
         *  RESET SELECTED HIGHLIGHT
         CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         PROCESS.STEP.SELECTED = 0
         * UPDATE CONTROL
      END
      GOSUB LOAD.GRDPRO
   END
END ELSE
   PRMPT = "User Access to this function restricted"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNINSBEFORE.CLICK: *
IF NOT(USER_REC<USER_PROCESS_STEPS>) THEN
   IF PROCESS.STEP.SELECTED > 0 THEN
      *RESET BACKGOUND COLOR TO DELFAULT
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      * REMOVE SELECTED STEP
      INS "NOTES" BEFORE OC_REC<OC_PROCESS_ID,PROCESS.STEP.SELECTED>
      INS " " BEFORE OC_REC<OC_PROCESS_DESC,PROCESS.STEP.SELECTED>
      INS "0" BEFORE OC_REC<OC_PROCESS_CERT,PROCESS.STEP.SELECTED>
      INS " " BEFORE OC_REC<OC_PROCESS_CERT_CODE,PROCESS.STEP.SELECTED>
      *  RESET SELECTED HIGHLIGHT
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      PROCESS.STEP.SELECTED = 0
      * UPDATE CONTROL
      GOSUB LOAD.GRDPRO
   END
END ELSE
   PRMPT = "User Access to this function restricted"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNLABEL.CLICK: *
SL.OPTS = 'CM'
CALL SHIPPING.LABEL(CM_REC,SL.OPTS,LABEL.PRINTER,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNLABEL2.CLICK: *
SL.OPTS = 'ST'
CALL SHIPPING.LABEL(SHIPTO_REC,SL.OPTS,LABEL.PRINTER,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNMOD.CLICK: *
IF NOT(USER_REC<USER_PROCESS_STEPS>) THEN
   IF PROCESS.STEP.SELECTED > 0 THEN
      * CANNOT MODIFY UNDEFINED PROCESS STEPS
      IF OC_REC<OC_PROCESS_ID,PROCESS.STEP.SELECTED> = "" THEN
         PRMPT = 'This Process Step is Undefined,':@SVM:'Create by Selecting Process Step Id From Drop Down List'
         CAPTION = "Order Entry"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      END ELSE
         IF OC_REC<OC_PROCESS_ID,PROCESS.STEP.SELECTED> = "CUSTOM" OR OC_REC<OC_PROCESS_ID,PROCESS.STEP.SELECTED> = "NOTES" THEN
            STEP.DESC = OC_REC<OC_PROCESS_DESC,PROCESS.STEP.SELECTED>
            CONVERT @SVM TO @VM IN STEP.DESC
            IF STEP.DESC = '' THEN STEP.DESC = " "
            CALL INPUTBOX("Edit Process Step","Order Entry",STEP.DESC,"",USER.DESC,GUIERRORS,GUISTATE)
            IF USER.DESC # '' THEN
               CONVERT @VM TO @SVM IN USER.DESC
               OC_REC<OC_PROCESS_DESC,PROCESS.STEP.SELECTED> = USER.DESC
            END
            CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
            IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
            PROCESS.STEP.SELECTED = 0
         END ELSE
            PRMPT = 'Only CUSTOM or NOTES Process Steps are Editable'
            CAPTION = "Order Entry"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok only
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         END
      END
      GOSUB LOAD.GRDPRO
   END
END ELSE
   PRMPT = "User Access to this function restricted"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNORDER_LBL_PRT.CLICK: *
IF OC_REC # '' THEN
   CALL ORDER.LBL(OP_REC,OC_REC,OC_ID,CM_REC<CM_NAME>,LABEL.PRINTER,GUIERRORS,GUISTATE)
   PRMPT = "Order Label Sent to Printer"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNPARTMASTER.CLICK: *
IF OC_REC<OC_PART_NBR> # '' AND OC_REC<OC_NONSTD> = @FALSE THEN
   TPN_ID = OC_REC<OC_PART_NBR>
   TPARTS_REC = ''
   CALL PN.DIALOG(TPN_ID,TPARTS_REC,@FALSE,GUIERRORS,GUISTATE)
   *
   * UPDATE CHILD WITH NEW PART DATA?
   *
   IF TPARTS_REC = '' THEN  ;* CANCEL FROM PN.DIALOG
      NULL
   END ELSE
      PARTS_REC = TPARTS_REC
      PRMPT = "Update Part Information from Part Master for this item?"
      CAPTION = "Order Entry"
      STYLE   = 2  ;* !
      BUTTONS = 4  ;* yes / no
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      IF RESPONSE = 6 THEN  ;* YES
         OC_REC<OC_REV>      = PARTS_REC<PT_REV>
         OC_REC<OC_DRAWING>  = PARTS_REC<PT_DRAWING>
         OC_REC<OC_PART_DESC>= PARTS_REC<PT_DESC>
         OC_REC<OC_ITEM_NOTES> = PARTS_REC<PT_NOTES>
         OC_REC<OC_PROCESS_ID> = PARTS_REC<PT_PROCESS_ID>
         OC_REC<OC_PROCESS_DESC> = PARTS_REC<PT_PROCESS_DESC>
         OC_REC<OC_PROCESS_CERT> = PARTS_REC<PT_PROCESS_CERT>
         OC_REC<OC_PROCESS_CERT_CODE> = PARTS_REC<PT_PROCESS_CERT_CODE>
         OC_REC<OC_MATL> = PARTS_REC<PT_MATL>
         GOSUB LOAD.ID.CTRLS
      END
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNPRINTRECLBL.CLICK: *
IF OC_REC # '' THEN
   CALL RECEIVING.LBL(OP_REC,OC_REC,OC_ID,CM_REC<CM_NAME>,OP_REC<OP_PO_NBR>,LABEL.PRINTER,GUIERRORS,GUISTATE)
   PRMPT = "Receiving Label Sent to Printer"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNPROLBL.CLICK: *
IF OC_REC # '' THEN
   IF PROCESS.STEP.SELECTED > 0 THEN
      IF OC_REC<OC_PROCESS_ID,PROCESS.STEP.SELECTED> # '' THEN
         CALL PROCESS.LBL(OC_REC,OC_ID,PROCESS.STEP.SELECTED,CM_REC<CM_NAME>,OP_REC<OP_PO_NBR>,LABEL.PRINTER,GUIERRORS,GUISTATE)
         PRMPT = "Process Label Sent to Printer"
         CAPTION = "Order Entry"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      END
   END ELSE
      PRMPT = "Select Process Step Prior to Button Selection"
      CAPTION = "Order Entry"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNROUTER.CLICK: *
IF OC_REC # '' THEN
   *
   CALL CUSTOM.PROCESS.FORM(OC_REC,OC_ID,CM_REC<CM_NAME>,OP_REC<OP_PO_NBR>,OP_REC<OP_ENTER_BY>,OP_REC<OP_DATE>,PROCESS.PRINTER,GUIERRORS,GUISTATE)
   *
   PRMPT = "Process Sheet Sent to Printer"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNVIEW.CLICK: *
IF PARTS_REC<PT_PICTURE> # '' THEN
   *
   * RESOLVE TO SERVER WHERE FILES ARE STORED
   *
   CALL SHARE.FILE.PATH.CALC( PARTS_REC<PT_PICTURE>,NETWORK_PATH_REC,SHARE.FILE.PATH,'EXPAND')
   IF SHARE.FILE.PATH # "" THEN
      CMD = SHARE.FILE.PATH
      PRINT ESC:STX:'<':CMD:CR:
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNWOREL.CLICK: *
CALLER_WO_ID = ''
CALLER_ACTION = WO_CREATE
CALL WO.TREE.DIALOG(PN_ID, PARTS_REC, OC_ID, CALLER_WO_ID, CALLER_ACTION, GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.CHKHOLD.CLICK: *
OC_REC<OC_HOLD> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.CHKLOT.CLICK: *
OC_REC<OC_LOT_FLAG> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.CHKTAX.CLICK: *
OC_REC<OC_TAX_FLAG> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.CHKTESTPCS.CLICK: *
OC_REC<OC_TEST_SAMPLES> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.OE.OE.CLOSE: *
GOSUB SAVE.CHECK
IF SAVE.CHECK.OK THEN
   * Default form close event handler
   RELEASE C.FILE.VAR(C.ORDER_PARENT)
   RELEASE C.FILE.VAR(C.ORDER_CHILD)
   *
   CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
   CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
   IF NUM.FORMS = 0 THEN
      GOSUB GUI.DIALOG.RETURN
      CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
      GUI.DLG.EXIT = 1
   END
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTN1EDITBILL.CLICK: *
IF USER_REC<USER_OE_CUST_ADD> THEN    ;* IS THIS RESTRICTED FOR USER?
   PRMPT = "User Access to this function restricted"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
   IF CM_ID # '' THEN
      ECM_ID = CM_ID
      NSHIPTO_ID = ''
      ERROR_STATUS = ''
      CALL CM.DIALOG(CM_EDIT,ECM_ID,NSHIPTO_ID,ERROR_STATUS,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      GOSUB CM.RELOAD  ;* DISPLAY UPDATES TO CM / SHIPTO RECORD (IF ANY)
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*************************************************************
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTN1EDITSHIP.CLICK: *
IF USER_REC<USER_OE_CUST_ADD> THEN    ;* IS THIS RESTRICTED FOR USER?
   PRMPT = "User Access to this function restricted"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
   IF CM_ID # '' AND SHIPTO_ID # '' THEN
      ECM_ID = CM_ID
      ESHIPTO_ID = SHIPTO_ID
      ERROR_STATUS = ''
      CALL CM.DIALOG(CM_SHIP_EDIT,ECM_ID,ESHIPTO_ID,ERROR_STATUS,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      GOSUB CM.RELOAD  ;* DISPLAY UPDATES TO CM / SHIPTO RECORD (IF ANY)
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
************************************************************
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTN1FIND.CLICK: *
CALL ORDER.SEARCH(SEARCH_ID,GUIERRORS,GUISTATE)
IF SEARCH_ID # '' THEN
   *
   * FAKE AN ORDER NUMBER ENTRY
   TEMP_ID = FIELD(SEARCH_ID,'*',1) ;* CONVERT TO ORDER ID (IF NECESSARY)
   GUIARGS<2> = TEMP_ID
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXT1ORDVAL",GPVALUE,0,0,TEMP_ID,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   GOSUB  GUI.OE.OE.TXT1ORDVAL.VALIDATE
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTN1NEWBILL.CLICK: *
IF USER_REC<USER_OE_CUST_ADD> THEN    ;* IS THIS RESTRICTED FOR USER?
   PRMPT = "User Access to this function restricted"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
   NCM_ID = ''
   NSHIPTO_ID = ''
   ERROR_STATUS = ''
   CALL CM.DIALOG(CM_NEW,NCM_ID,NSHIPTO_ID,ERROR_STATUS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   GOSUB LOAD.CM.NAME.LIST         ;* ADD CUSTOMER NAMES TO LST1CUSTNAME
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTN1NEWSHIP.CLICK: *
IF USER_REC<USER_OE_CUST_ADD> THEN    ;* IS THIS RESTRICTED FOR USER?
   PRMPT = "User Access to this function restricted"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
   ECM_ID = CM_ID
   NSHIPTO_ID = ''
   ERROR_STATUS = ''
   CALL CM.DIALOG(CM_SHIP_NEW,ECM_ID,NSHIPTO_ID,ERROR_STATUS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   CALL LOAD.CM.SHIPTO.LIST(CM_ID,SHIPTO.LIST,SHIPTO.IDX,GUIAPP,GUIFRM,"LST1SHIPTO",GUIERRORS,GUISTATE)      ;* LOAD NEW SHIPTO TO DROPDOWN LIST
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTN2CANCEL.CLICK: *
*
* CANCEL ORDER CHILD CHANGES?
*
GOSUB SAVE.CHILD.CHECK
IF SAVE.CHILD.CHECK.OK THEN
   *
   * DID WE GET HERE WITH THE CHILD RECORD LOCKED?
   *
   IF RECORDLOCKED(C.FILE.VAR(C.ORDER_CHILD),OC_ID) THEN
      RELEASE C.FILE.VAR(C.ORDER_CHILD), OC_ID
   END
   *
   SAVE_OC_REC = '' ;* ORDER_CHILD ORIGINAL COPY SAVE
   OC_REC      = '' ;* ORDER_CHILD RECORD
   OC_ID       = '' ;*
   GOSUB LOAD.ID.CTRLS   ;* CLEAR OUT FORM
   CALL ENABLE.ID.CONTROLS("RESET",0,USER.IS.RESTRICTED,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
   *
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTN2FILE.CLICK: *
* THIS ROUTINE IS THE ITEM SAVE PROCESS, HOWEVER WE ALSO SAVE THE PARENT
*
* does order_parent need saving?
GOSUB OE.VALIDATE
IF ORDER.VALID THEN
   *
   * ORDER_CHILD NEEDS UPDATING?
   IF SAVE_OC_REC # OC_REC THEN
      *      GOSUB OC.VALIDATE   THIS WAS CALLED BY OE.VALIDATE
      IF CHILD.VALID THEN
         GOSUB ORDER.WRITE
         *
         * SETUP FOR POSSIBLE NEW CHILD ENTRY
         *
         SAVE_OC_REC = '' ;* INIT ORDER_CHILD SAVE COPY
         OC_REC      = '' ;* INIT ORDER_CHILD RECORD
         OC_ID       = '' ;* CHILD ID
         GOSUB LOAD.CHILD.LIST
         GOSUB LOAD.ID.CTRLS   ;* CLEAR OUT FORM
         CALL ENABLE.ID.CONTROLS("RESET",0,USER.IS.RESTRICTED,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)

      END
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTN2NEW.CLICK: *
*
* new item, do we need to save old item first?
*
IF OP.EDIT.MODE = "VIEW" THEN
   PRMPT = "Add item not allowed in view mode"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
   GOSUB SAVE.CHILD.CHECK
   IF SAVE.CHILD.CHECK.OK THEN
      *
      SAVE_OC_REC = '' ;* ORDER_CHILD ORIGINAL COPY SAVE
      OC_REC      = '' ;* ORDER_CHILD RECORD
      PARTS_REC   = ''
      PROCESS.STEP.SELECTED = 0
      GOSUB ASSIGN.NEXT.CHILD
      GOSUB LOAD.ID.CTRLS   ;* CLEAR OUT FORM
      *
      *  display default spc value
      *
      LOCATE DEFAULTS_REC<DFLT_SPC> IN SPC.IDX<1> SETTING IDX THEN
         CALL ATGUISETPROP(GUIAPP,GUIFRM,"LBSPC",GPVALUE,0,0,IDX,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      END
      *
      CALL ENABLE.ID.CONTROLS("NEW",0,USER.IS.RESTRICTED,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
      CALL ATGUIACTIVATE(GUIAPP,GUIFRM,"TXT2PN",GUIERRORS,GUISTATE)
      *
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNCANCEL.CLICK: *
GOSUB SAVE.CHECK
IF SAVE.CHECK.OK THEN
   IF OP_ID # '' THEN
      RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
      IF OC_ID # '' THEN
         RELEASE C.FILE.VAR(C.ORDER_CHILD), OC_ID
      END
   END
   *
   * RESET FOR NEXT ORDER ACTION
   *
   GOSUB OE.RESET
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNDELETEORDER.CLICK: *
IF OP_REC<OP_CHILD> = '' THEN
   PRMPT = "Do You Really Want to Delete Order ":OP_ID:"?"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 4  ;* YES / ON
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   IF RESPONSE = 6 THEN   ;* YES, USER SAID DELETE
      DELETE C.FILE.VAR(C.ORDER_PARENT), OP_ID
      *
      * RESET FOR NEXT ORDER ACTION
      *
      GOSUB OE.RESET
   END
END ELSE
   PRMPT = "Deleting an Order With Items is NOT Allowed":@SVM:"Mark Items Manually Closed to Remove From Open Order Reports"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNFILEORDER.CLICK: *
*
* IF CM RECORD LOOKS GOOD SAVE IT
* IF SHIP TO RECORD IS PRESENT, SAVE IT ALSO
*
GOSUB OE.VALIDATE
IF ORDER.VALID THEN
   *
   * ORDER_PARENT NEEDS UPDATING?
   GOSUB ORDER.WRITE
   *
   *  TEST FOR CHILD RECORDS ON THIS ORDER, IF NONE ASK USER IF THEY REALLY WANT TO QUIT ENTRY OF THIS ORDER
   *
   IF OP_REC<OP_CHILD> = '' THEN   ;* NO CHILD RECORDS
      PRMPT = "Filing Order With No Detail Items, Do You Want to Continue Entering Information For This Order?"
      CAPTION = "Order Entry"
      STYLE   = 2  ;* !
      BUTTONS = 4  ;* YES / ON
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      IF RESPONSE = 6 THEN   ;* YES, USER SAID THEY WANT TO CONTINUE ADDING DETAIL ITEM(S),
         GOTO BTNFILEORDER.CLICK.999
      END
   END
   *
   RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
   *
   * RESET FOR NEXT ORDER ACTION
   *
   GOSUB OE.RESET
   *
BTNFILEORDER.CLICK.999: *
END
RETURN

*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.BTNNEWORDER.CLICK: *
*
* CHECK FOR EXISTING ORDER (PARENT AND CHILD), NEED TO BE SAVED? IF SO SAVE IT
* SEE CM.DIALOG SAVE.CHECK FOR POSSIBLE SAMPLE
* ORDER NUMBER SHOULD BE OBTAINED AND DISPLAYED AND MADE INACTIVE
GOSUB SAVE.CHECK
IF SAVE.CHECK.OK THEN
   CALL ATGUIRESET(GUIAPP,GUIFRM,GUIERRORS,GUISTATE)  ;* RESET FORM TO INITAL STATE
   *
   * RESET ALL
   *
   GOSUB CLEAR.BUFFERS
   CALL NXT.NEXTNBR("ORDER_PARENT",OP_ID,ERROR_STATUS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   *
   CALL NXT.RECORDLOCKU("ORDER_PARENT",C.ORDER_PARENT,OP_ID,MSG_LIST,FILE_LOCKED,GUIERRORS,GUISTATE)
   OP.EDIT.MODE = "EDIT"   ;* set edit mode, always edit on new orders (how could it be busy?)
   *
   CTRLIDS = "TXT1ORDVAL"
   PROPS   = GPVALUE
   VALUES  = OP_ID
   *
   CTRLIDS<-1> = "TXT1ORDVAL"
   PROPS<-1>   = GPENABLED
   VALUES<-1>  = 0
   *
   CTRLIDS<-1> = "TXT1ORDDT"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = OCONV(DATE(),OP_DATE.CNV)
   OP_REC<OP_DATE> = DATE()   ;*
   *
   CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   *
   CALL ENABLE.OE.CONTROLS("NEW",1,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   CALL ENABLE.ID.CONTROLS("RESET",0,USER.IS.RESTRICTED,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.CB1BUYER.CLICK: *
OP_REC<OP_BUYER> = GUIARGS<1>   ;* REM COMBO BOX CLICK RETURNS ACTUAL VALUE CLICK ON
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.CB1BUYER.VALIDATE: *
OP_REC<OP_BUYER> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
************************************************************
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.CB1SALESPERSON.CLICK: *
OP_REC<OP_SALESPERSON> = GUIARGS<1>   ;* REM COMBO BOX CLICK RETURNS ACTUAL VALUE CLICK ON
RETURN
*-->END EVENT HANDLER<--*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.CB1SALESPERSON.VALIDATE: *
OP_REC<OP_SALESPERSON> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
************************************************************

**
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.CB1SHIPVIA.CLICK: *
OP_REC<OP_SHIP_VIA> = GUIARGS<1>   ;* REM COMBO BOX CLICK RETURNS ACTUAL VALUE CLICK ON
RETURN
*-->END EVENT HANDLER<--*
*
************************************************************
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.CB1SHIPVIA.VALIDATE: *
OP_REC<OP_SHIP_VIA> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
***********************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.CB2MATL.CLICK: *
OC_REC<OC_MATL> = GUIARGS<1>   ;* REM COMBO BOX CLICK RETURNS ACTUAL VALUE CLICK ON
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.CB2PRICE.CLICK: *
PRICE.EA = GUIARGS<1>          ;* VALUE USER CLICKED ON
GOSUB PRICE.VALIDATE
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.CB2PRICE.VALIDATE: *
PRICE.EA = GUIARGS<2>          ;* VALUE USER ENTERED
GOSUB PRICE.VALIDATE
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.GRDEC.VALIDATECELL: *
*
* VALIDATE EXTRA CHARGE CODE (IN COLUMN 1)
GRD.COL = GUIARGS<1,1>
GRD.ROW = GUIARGS<1,2>
IF GRD.COL = 1 THEN
   EC.CODE = GUIARGS<2>
   IF   EC.DETAIL.LIST<1,GRD.ROW,5> = '' THEN   ;* LINE ALREADY INVOICED TEST
      * not INVOICED, ok to modify
      *
      *  IS THIS AN EXISTING SCHEDULE LINE OR A NEW ONE?
      *
      IF OC_REC<OC_EC_CODE,GRD.ROW> = '' THEN
         NEW.EC = @TRUE
      END ELSE
         NEW.EC = @FALSE
      END
      *
      * GET DESRIPTION
      *
      *
      * VALIDATE THE CODE
      *
      IF EC.CODE = "REMOVE"  THEN
         IF NOT(NEW.EC)THEN
            PRMPT = "Delete extra charge?"
            CAPTION = "Order Entry"
            STYLE   = 2  ;* !
            BUTTONS = 4  ;* YES / NO
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            IF RESPONSE = 6 THEN   ;* YES
               DEL OC_REC<OC_EC_CODE,GRD.ROW>
               DEL OC_REC<OC_EC_DESC,GRD.ROW>
               DEL OC_REC<OC_EC_AMT,GRD.ROW>
               SALES.ID = OC_REC<OC_EC_SALES_ID,GRD.ROW>
               DEL OC_REC<OC_EC_SALES_ID,GRD.ROW>
               * MUST REMOVE SALES RECORD
               DELETE C.FILE.VAR(C.SALES), SALES.ID
               * redisplay DATA
               *
               GOSUB LOAD.EC.DETAIL
               *
               CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDEC",GPVALUE,0,0,EC.DETAIL.LIST,GUIERRORS,GUISTATE)
               IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
            END
         END
         *

      END ELSE
         LOCATE EC.CODE IN EXTRA.CHARGES<1,1> SETTING IDX THEN
            EC.DESC  = EXTRA.CHARGES<2,IDX>
            *
            * PLACE DESCRIPTION IN ADJACENT CELL
            *
            CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDEC",GPVALUE,2,GRD.ROW,EC.DESC,GUIERRORS,GUISTATE)
            IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         END ELSE
            LOG.OPTS  = "DISPLAY"
            ERROR_NBR = ERR_SYS
            ERROR_MSG =  "Missing extra charge code: ":EC.CODE:" from VALIDATION_FILE, EXTRA.CHARGES"
            CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         END
      END
   END ELSE
      PRMPT = "This extra charge is invoiced, modifications not allowed"
      CAPTION = "Order Entry"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.GRDEC.VALIDATEROW: *
GRD.ROW = GUIARGS<1,1>
ROW.DAT = GUIARGS<2>
IF EC.DETAIL.LIST<1,GRD.ROW,5> = '' THEN   ;* LINE ALREADY INVOICED TEST
   * not INVOICED, ok to modify
   *
   *  IS THIS AN EXISTING SCHEDULE LINE OR A NEW ONE?
   *
   IF OC_REC<OC_EC_CODE,GRD.ROW> = '' THEN
      NEW.EC = @TRUE
   END ELSE
      NEW.EC = @FALSE
   END
   *
   EC.CODE  = ROW.DAT<1,1,1>
   EC.DESC  = ROW.DAT<1,1,2>
   EC.AMT   = ROW.DAT<1,1,3>

   *
   * STUFF DATA INTO ORDER CHILD RECORD
   *
   *
   *  NEW SCHEDULE ITEM
   *
   IF NEW.EC THEN
      IF GRD.ROW = 1 THEN
         *
         *  FIRST SCHEDULE IN NEW ITEM
         *
         EC.IDX = 1
         *
         * FIGURE OUT WHERE IN RECORD THIS GRID DATA SHOULD GO
         *
      END ELSE
         EC.CNT = DCOUNT(OC_REC<OC_EC_CODE>,@VM)
         IF GRD.ROW > EC.CNT + 1 THEN  ;* USER SKIPPED OPEN GRIND ROW?
            GRD.ROW = EC.CNT + 1       ;* FORCE TO NEXT UNUSED GRID ROW
         END
         EC.IDX = GRD.ROW           ;* VALUE INDEX INTO ORDER CHILD RECORD
      END
   END ELSE
      *
      * UPDATE OF EXISTING ITEM
      *
      EC.IDX = GRD.ROW
   END
   *
   * CREATE / UPDATE SALES RECORD
   *
   IF NEW.EC THEN
      CALL NXT.NEXTNBR("SALES",SA_ID,ERROR_STATUS,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   END ELSE
      SA_ID = OC_REC<OC_EC_SALES_ID,EC.IDX>
   END
   IF SA_ID # '' THEN
      OC_REC<OC_EC_CODE,EC.IDX> = EC.CODE
      OC_REC<OC_EC_DESC,EC.IDX> = EC.DESC
      OC_REC<OC_EC_AMT,EC.IDX>  = ICONV(EC.AMT, OC_EC_AMT.CNV)
      OC_REC<OC_EC_SALES_ID,EC.IDX> = SA_ID
      *
      LOCATE EC.CODE IN EXTRA.CHARGES<1,1> SETTING IDX THEN
         EC.GL  = EXTRA.CHARGES<3,IDX>
      END ELSE
         EC.GL = DEFAULTS_REC<DFLT_SALE_GL_CD>   ;* USE DEFAULT GLT CODE FOR SALES
         PRMPT = "Warning EC Code ":EC.CODE:" Is Missing A GL Code"
         CAPTION = "Order Entry"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      END
      CALL SHIP.CREATE.EXTRA.CHARGE(SA_REC,EC.IDX,EC.GL,OC_ID,SA_ID,OP_REC,OC_REC,CM_REC,SHIPTO_REC)
      CALL WRITE.RECORD(OC_ID,OC_REC,C.ORDER_CHILD,@TRUE,ERROR_STATUS)
   END

   *
ECV900: *
   * redisplay date
   *
   GOSUB LOAD.EC.DETAIL
   *
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDEC",GPVALUE,0,0,EC.DETAIL.LIST,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   *
END ELSE
   PRMPT = "This extra charge is invoiced, modifications not allowed"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
ECV999: *
RETURN
*
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.GRDLINES.VALIDATEROW: *
GRD.ROW = GUIARGS<1,1>
ROW.DAT = GUIARGS<2>
IF OC_REC<OC_DEL_DATE,GRD.ROW> = '' THEN   ;* LINE ALREADY SHIPPED TEST
   * not shipped, ok to modify
   *
   *  IS THIS AN EXISTING SCHEDULE LINE OR A NEW ONE?
   *
   IF OC_REC<OC_SCHD_ID,GRD.ROW> = '' THEN
      NEW.SCHD = @TRUE
   END ELSE
      NEW.SCHD = @FALSE
   END
   *
   DATE.DUE = ICONV(ROW.DAT<1,1,2>,OC_DUE_DATE.CNV)
   QTY.ORD  = ROW.DAT<1,1,3> + 0
   LINE.NOTES = ROW.DAT<1,1,9>
   *
   *
   *
   * VALIDATE THE QTY
   *
   IF QTY.ORD LE  0  THEN
      IF NOT(NEW.SCHD)THEN
         PRMPT = "Order qty is zero, do you wish to delete this schedule?"
         CAPTION = "Order Entry"
         STYLE   = 2  ;* !
         BUTTONS = 4  ;* YES / NO
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         IF RESPONSE = 6 THEN   ;* YES
            DEL OC_REC<OC_SCHD_ID,GRD.ROW>
            DEL OC_REC<OC_DUE_DATE,GRD.ROW>
            DEL OC_REC<OC_ORD_QTY,GRD.ROW>
            DEL OC_REC<OC_SCHD_NOTES,GRD.ROW>
            GOTO GLV900
         END
      END
      *
      PRMPT = "Order qty is zero, please correct"
      CAPTION = "Order Entry"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDLINES",GPCOLUMN,"","",3,GUIERRORS,GUISTATE)
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDLINES",GPROW,"","",GRD.ROW,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      GOTO GLV999
   END

   *
   * validate date due values
   *
   DUE.CNT = DCOUNT(OC_REC<OC_DUE_DATE>,@VM)
   LAST.DUE = 0
   FOR I = 1 TO DUE.CNT
      IF OC_REC<OC_DUE_DATE,I> < LAST.DUE THEN
         PRMPT = "Warning ... delivery due dates for this item are not in ascending order.":@SVM:"Please verify"
         CAPTION = "Order Entry"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         GOTO VALIDATE.DUE.999:
      END
      LAST.DUE = OC_REC<OC_DUE_DATE,I>
   NEXT I
VALIDATE.DUE.999:
   *
   * STUFF DATA INTO ORDER CHILD RECORD
   *
   SCHD.ID = OC_REC<OC_SCHD_ID,GRD.ROW>
   IF SCHD.ID = '' THEN
      *
      *  NEW SCHEDULE ITEM
      *
      IF GRD.ROW = 1 THEN
         *
         *  FIRST SCHEDULE IN NEW ITEM
         *
         SCHD.IDX = 1
         SCHD.ID  = 1
         *
         * FIGURE OUT WHERE IN RECORD THIS GRID DATA SHOULD GO
         *
      END ELSE
         SCHD.CNT = DCOUNT(OC_REC<OC_SCHD_ID>,@VM)
         IF GRD.ROW > SCHD.CNT + 1 THEN  ;* USER SKIPPED OPEN GRIND ROW?
            GRD.ROW = SCHD.CNT + 1       ;* FORCE TO NEXT UNUSED GRID ROW
         END
         SCHD.IDX = GRD.ROW           ;* VALUE INDEX INTO ORDER CHILD RECORD
         *
         * CALCULATE SCHEDULE ID
         *
         LAST.SCHD.ID = OC_REC<OC_SCHD_ID,GRD.ROW-1>
         SCHD.ID = INT(LAST.SCHD.ID + 1)
      END
      *
      OC_REC<OC_SCHD_ID,SCHD.IDX> = SCHD.ID"R34"
      *
   END ELSE
      *
      * UPDATE OF EXISTING ITEM
      *
      SCHD.IDX = GRD.ROW
   END
   *
   OC_REC<OC_DUE_DATE,SCHD.IDX> = DATE.DUE
   OC_REC<OC_ORD_QTY,SCHD.IDX> = QTY.ORD
   OC_REC<OC_SCHD_NOTES,SCHD.IDX> = LINE.NOTES
   *
   GOSUB CALC.BAL.DUE
   *
   IF BAL.DUE > 0 THEN
      OC_REC<OC_ITEM_STAT> = "I"   ;* INCOMPLETE
   END ELSE
      OC_REC<OC_ITEM_STAT> = "C"   ;* COMPLETE
   END
   *
   *
GLV900: *
   * redisplay date
   *
   GOSUB LOAD.SCHD.DETAIL
   *
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDLINES",GPVALUE,0,0,SCHD.DETAIL.LIST,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   *
END ELSE
   PRMPT = "This delivery line has been shipped, modifications not allowed"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
GLV999: *
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.GRDPRO.ACTIVATEROW: *
*
* USER MOVED OFF A ROW, LETS JUST MAKE SURE WE ARE NOT LEAVING A BLANK ROW SOMEWHERE
*
PREV.ROW = GUIARGS<1,2>
CURR.ROW = GUIARGS<1,1>
ROWS.OF.DATA =  DCOUNT(OC_REC<OC_PROCESS_ID>,@VM)
* IF THE CURRENT ROW THE USER IS ON IS EMPTY AND THE ROW IS LEAVING MORE THAN ONE BLACK ROW ABOVE IT, MOVE TO THE LAST BLANK ROW
IF (OC_REC<OC_PROCESS_ID,CURR.ROW> = "") AND (CURR.ROW >  ROWS.OF.DATA + 1) THEN
   CURR.ROW = ROWS.OF.DATA + 1
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPROW,"","",CURR.ROW,GUIERRORS,GUISTATE)
END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.GRDPRO.CLICK: *
* RESET PREVIOUS SELECTED STEP COLOR
IF PROCESS.STEP.SELECTED > 0 THEN
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
*
PROCESS.STEP.SELECTED = GUIARGS<1,2> ;* ROW NUMBER
* ENSURE THAT STEP SELECTED IS NEXT OPEN STEP (WE DID NOT SKIP A ROW)
IF PROCESS.STEP.SELECTED > DCOUNT(OC_REC<OC_PROCESS_ID>,@VM) THEN
   PROCESS.STEP.SELECTED =  DCOUNT(OC_REC<OC_PROCESS_ID>,@VM) + 1
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPROW,"","",PROCESS.STEP.SELECTED,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END

CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRGRAY,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.GRDPRO.VALIDATECELL: *
IF NOT(USER_REC<USER_PROCESS_STEPS>) THEN
   PROCESS.COL = GUIARGS<1,1>
   PROCESS.ROW = GUIARGS<1,2>
   BEGIN CASE
      CASE PROCESS.COL = 1  ;* PROCESS STEP ID
         SELECTED.ID = GUIARGS<2>
         *
         * LOOK UP SELECTED ID IN PROCESS.IDS TO DETERMINE IF THIS IS A STEP OR GROUP ID
         *
         LOCATE(SELECTED.ID,PROCESS.IDS,1;IDX) THEN
            PROCESS.TYPE = PROCESS.IDS<2,IDX>
            IF PROCESS.TYPE = "STEP" THEN
               CALL GET.RECORD("PROCESS_STEPS",C.PROCESS_STEPS,SELECTED.ID,PROCESS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
               IF ERROR_STATUS = '' THEN ;* GET CERT CODE ASSOC WITH THIS STEP
                  OC_REC<OC_PROCESS_ID,PROCESS.ROW> = SELECTED.ID
                  IF SELECTED.ID = "CUSTOM" OR SELECTED.ID = "NOTES" THEN
                     OC_REC<OC_PROCESS_DESC,PROCESS.ROW> = PROCESS_REC<PS_PROCESS_DESC,1>
                  END
                  OC_REC<OC_PROCESS_CERT_CODE,PROCESS.ROW> = PROCESS_REC<PS_CERT_DESC>
                  CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPDEFVAL,2,PROCESS.ROW,PROCESS_REC<PS_PROCESS_DESC,1>,GUIERRORS,GUISTATE)
                  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
                  CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPDEFVAL,4,PROCESS.ROW,PROCESS_REC<PS_CERT_DESC>,GUIERRORS,GUISTATE)
                  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
               END ELSE
                  PRMPT = 'Process_Step: ':SELECTED.ID:', Not On File'
                  CAPTION = "Order Entry"
                  STYLE   = 2  ;* !
                  BUTTONS = 0  ;* ok only
                  HELPID = ""
                  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
               END

               *
            END ELSE    ;* MUST BE PROCESS GROUP, ADD GROUP STEPS TO PROCESS STEP LIST
               GROUP.ID = SELECTED.ID
               GOSUB GROUP.ADD
            END       ;* DID NOT FIND SELECTED.ID IN PROCESS_IDS THIS SHOULD NOT HAPPEN
            *
         END ELSE
            PRMPT = 'Process_Step: ':SELECTED.ID:', Not On File'
            CAPTION = "Order Entry"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok only
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         END
         *
         *
      CASE PROCESS.COL = 2  ;* STEP DESCRIPTION
         SELECTED.DESC = GUIARGS<2>
         IF OC_REC<OC_PROCESS_ID,PROCESS.ROW> = 'CUSTOM' OR OC_REC<OC_PROCESS_ID,PROCESS.ROW> = 'NOTES' THEN
            SELECTED.DESC = GUIARGS<2>
            CONVERT '<nl>' to @SVM IN SELECTED.DESC
            OC_REC<OC_PROCESS_DESC,PROCESS.ROW> = SELECTED.DESC
         END ELSE
            PRMPT = 'Only CUSTOM or NOTES Process Steps are Editable'
            CAPTION = "Order Entry"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok only
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPDEFVAL,2,PROCESS.ROW,PROCESS_REC<PS_PROCESS_DESC,1>,GUIERRORS,GUISTATE)
            IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         END
         *
      CASE PROCESS.COL = 3
         OC_REC<OC_PROCESS_CERT,PROCESS.ROW> = GUIARGS<2> + 0
      CASE 1   ;* ASSUME COL 4, CERT DESC
         OC_REC<OC_PROCESS_CERT_CODE,PROCESS.ROW> = GUIARGS<2>
   END CASE
END ELSE
   PRMPT = "User Access to this function restricted"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   GOSUB LOAD.GRDPRO
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.LBSPC.CLICK: *
OC_REC<OC_SPC> =  SPC.LIST<1,GUIARGS<1>,1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.LBTAX.CLICK: *
OC_REC<OC_TAX_CODE> =  TAX.LIST<1,GUIARGS<1>,1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.LST1CUSTNAME.CLICK: *
*
UPDATE.CM.SALES.FLAG = @FALSE
IF GUIARGS<1> GT 0 THEN       ;* CLICKED EMPTY LIST TEST
   *
   CM_ID  = CUSTOMER.LIST<1,GUIARGS<1>,1>
   IF CM_ID # '' THEN
      BEGIN CASE
         CASE CM_ID = "$MORE$"      ;* USER NEEDS TO SEE MORE OF SEARCH LIST
            *        CUSTOMER.START.LIST = NEXT SELECTED ITEM INDEX TO DISPLAY FROM PRIOR GUI_SEARCH2 CALL
            CUSTOMER.LIST = ''
            LST.IDS = ''
            EMSG = ''
            CALL GUI.SEARCH2 ("CUSTOMERS","","*","CM_NAME","CM_NAME CM_ADDR CM_CITY",CUSTOMER.MAX.LIST,CUSTOMER.START.LIST,CUSTOMER.LIST,LST.IDS,LIST.CT,EMSG)
            *
            CTRLIDS = ''
            PROPS   = ''
            VALUES  = ''
            *
            CTRLIDS<1> = "LST1CUSTNAME"
            PROPS<1>   = GPITEMS
            VALUES<1>  = CUSTOMER.LIST
            *
            CTRLIDS<2> = "LST1CUSTNAME"
            PROPS<2>   = GPVALUE
            VALUES<2>  = ""
            CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
            IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
            *
         CASE CM_ID = "$TOP$"      ;* USER NEEDS TO SEE TOP OF LIST
            *        CUSTOMER.START.LIST = NEXT SELECTED ITEM INDEX TO DISPLAY FROM PRIOR GUI_SEARCH2 CALL
            CUSTOMER.LIST = ''
            LST.IDS = ''
            EMSG = ''
            CALL GUI.SEARCH2 ("CUSTOMERS","","*","CM_NAME","CM_NAME CM_ADDR CM_CITY",CUSTOMER.MAX.LIST,CUSTOMER.START.LIST,CUSTOMER.LIST,LST.IDS,LIST.CT,EMSG)
            *
            CTRLIDS = ''
            PROPS   = ''
            VALUES  = ''
            *
            CTRLIDS<1> = "LST1CUSTNAME"
            PROPS<1>   = GPITEMS
            VALUES<1>  = CUSTOMER.LIST
            *
            CTRLIDS<2> = "LST1CUSTNAME"
            PROPS<2>   = GPVALUE
            VALUES<2>  = ""
            CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
            IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
            *
         CASE 1                     ;* SHOULD BE A CUSTOMER ID, GET CUSTOMER REC
            IF OP_REC<OP_CUST> # '' THEN  ;* CHANGING CUSTOMER ON ORDER, WARN
               UPDATE.CM.SALES.FLAG = @TRUE
               UPDATE.CM.SALES.FROM.ID = OP_REC<OP_CUST>
               *      PRMPT = "Warning, changing customer on order. Update existing (If Any) A/R records also?"
               *      CAPTION = "Order Entry"
               *      STYLE   = 2  ;* !
               *      BUTTONS = 3  ;* yes (RSP = 6) / no (RSP = 7) / CANCEL (RSP = 2)
               *      HELPID = ""
               *      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RSP, GUIERRORS,GUISTATE)
               *      BEGIN CASE
               *         CASE RSP = 6
               *
               *         CASE RSP = 7
               *            NULL
               *         CASE RSP = 2 ;* CANCEL
               *            GOTO CNC999
               *      END CASE
               *
            END
            *
            CALL GET.CUSTOMER(CM_ID,CM_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
            *
            IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH CUST
               LOG.OPTS = "DISPLAY"
               ERROR_NBR = ERR_SYS
               ERROR_MSG = 'Selection of non-existent customer from list'
               CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
            END ELSE
               CALL LOAD.CM.SHIPTO.LIST(CM_ID,SHIPTO.LIST,SHIPTO.IDX,GUIAPP,GUIFRM,"LST1SHIPTO",GUIERRORS,GUISTATE)      ;* LOAD SHIP TO LIST BOX
               IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN
                  GOSUB GUI.ERROR
               END ELSE
                  *
                  SHIPTO_ID = CM_REC<CM_DEFAULT_SHIPTO>
                  CALL GET.SHIPTO(SHIPTO_ID,SHIPTO_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
                  *
                  IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH DEFAULT SHIP TO
                     LOG.OPTS = "DISPLAY"
                     ERROR_NBR = ERR_SYS
                     ERROR_MSG = CM_ID:' Customer has non-existent default ship to ':SHIPTO_ID
                     CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
                  END ELSE
                     GOSUB LOAD.CM.CTRLS
                     GOSUB LOAD.SHIPTO.CTRLS
                     OP_REC<OP_CUST> = CM_ID
                     OP_REC<OP_SHIPTO> = SHIPTO_ID
                     OP_REC<OP_SHIP_TERMS> = CM_REC<CM_TERMS>
                     IF UPDATE.CM.SALES.FLAG THEN
                        UPDATE.CM.SALE.TO.ID = OP_REC<OP_CUST>
                        GOSUB UPDATE.CM.SALES
                     END
                     CALL ENABLE.OE.CONTROLS("NEW",1,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
                     IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
                  END
               END
            END
      END CASE
   END
END
CNC999: *
RETURN
*-->END EVENT HANDLER<--*
*
*
**************************************************************
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.LST1ORDCLASS.CLICK: *
OP_REC<OP_ORDER_CLASS> =  CLASS.LIST<1,GUIARGS<1>,1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.LST1ORDTYPE.CLICK: *
OP_REC<OP_ORDER_TYPE> =  TYPE.LIST<1,GUIARGS<1>,1>
RETURN
*-->END EVENT HANDLER<--*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.LST1TERMS.CLICK: *
OP_REC<OP_SHIP_TERMS> =  TERMS.LIST<1,GUIARGS<1>,1>
RETURN
*-->END EVENT HANDLER<--*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.LST1SHIPTO.CLICK: *
*
* user selected new ship to
*
IF GUIARGS<1> GT 0 THEN       ;* CLICKED EMPTY LIST TEST
   SHIPTO_ID  = CM_ID:'*':SHIPTO.LIST<1,GUIARGS<1>,1>
   IF SHIPTO_ID # '' THEN

      CALL GET.SHIPTO(SHIPTO_ID,SHIPTO_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
      *
      IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH DEFAULT SHIP TO
         LOG.OPTS = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG = CM_ID:'Selection of non-existent customer ship to ':SHIPTO_ID
         CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      END ELSE
         GOSUB LOAD.SHIPTO.CTRLS
         OP_REC<OP_SHIPTO> = SHIPTO_ID
      END

   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.LSTGLTRANS.CLICK: *
OC_REC<OC_GL_TRANS_CD> =  GL.CODES.LIST<1,GUIARGS<1>,1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.LSTITEM.CLICK: *
*
* VALID CHILD ID AT THIS CLICK ROW?
*
TEST.ID = CHILD.LIST<1,GUIARGS<1>,1>
IF TEST.ID # '' THEN
   *
   * new item, do we need to save old item first?
   *
   GOSUB SAVE.CHILD.CHECK
   IF SAVE.CHILD.CHECK.OK THEN
      * VALID CHILD ID AT CLICK ROW?
      TEST.STAT = CHILD.LIST<1,GUIARGS<1>,4>
      IF TEST.STAT # OE_CHILD_DEL THEN
         *

         IF OC_ID # '' THEN
            RELEASE C.FILE.VAR(C.ORDER_CHILD), OC_ID
         END
         OC_ID = TEST.ID
         *
         SAVE_OC_REC = '' ;* ORDER_CHILD ORIGINAL COPY SAVE
         OC_REC      = '' ;* ORDER_CHILD RECORD
         IF OP.EDIT.MODE = "VIEW" THEN
            LOCK_CHILD = @FALSE
         END ELSE
            LOCK_CHILD = @TRUE
         END
         CALL GET.ORDER.CHILD(OC_ID,OC_REC,LOCK_CHILD,ERROR_STATUS,GUIERRORS,GUISTATE)
         IF ERROR_STATUS = ERR_BUSY THEN      ;* USER ENTERED ORDER IS LOCKED BY SOMEONE ELSE
            OP.EDIT.MODE = "VIEW"             ;* ALLOW VIEW OF ORDER ONLY
         END
         SAVE_OC_REC = OC_REC
         PN_ID = OC_REC<OC_PART_NBR>
         IF PN_ID # '' THEN
            MSG_LIST = ''
            CALL GET.RECORD("PARTS",C.PARTS,PN_ID,PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
         END ELSE
            PARTS_REC = ''
         END
         *
         GOSUB LOAD.ID.CTRLS
         IF OP.EDIT.MODE = "EDIT" THEN   ;* THIS COULD HAVE CHANGED WITH GET.ORDER.DETAIL
            CALL ENABLE.OE.CONTROLS("EDIT",1,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
            CALL ENABLE.ID.CONTROLS("EDIT",1,USER.IS.RESTRICTED,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
         END
         *
      END
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.MENU.CANSHIP: *
*
CALL SHIP.CANCEL.SHIPMENT(DMMY,OC_ID,OC_REC,SHIP.CAN,GUIERRORS,GUISTATE)
IF SHIP.CAN THEN
   *
   * SHIP.CANCEL.SHIPMENT WRITES OUT THE MODIFIED ORDER_CHILD, UPDATE SAVE_REC TO
   * REFLECT THIS
   *
   SAVE_OC_REC = OC_REC
   *
   * REFRESH GRID
   *
   GOSUB LOAD.SCHD.DETAIL
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDLINES",GPVALUE,0,0,SCHD.DETAIL.LIST,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   *
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.MENU.CLOSE: *
IF OC_REC<OC_CLOSE> = 'C' THEN
   PRMPT = 'Item is currently manually closed, reopen?'
   NEW.STAT = 'O'
   VS.STATE = 0
END ELSE
   PRMPT = 'Mark item manually closed?'
   NEW.STAT = 'C'
   VS.STATE = 1
END
CAPTION = "Order Entry"
STYLE   = 2  ;* !
BUTTONS = 4  ;* yes (RSP = 6) / no (RSP = 7)
HELPID = ""
CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RSP, GUIERRORS,GUISTATE)
IF RSP = 6 THEN ;* YES CLICKED
   OC_REC<OC_CLOSE> = NEW.STAT
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"LBLCLOSED",GPVISIBLE,0,0,VS.STATE,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   *
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.MENU.DELITEM: *
* Add your event code here...
*
* CANNOT DECIDE IF WE SHOULD ALLOW ITEMS TO BE DELETED OR ONLY ALLOW MANUAL CLOSE,
* IF WE ALLOW DELETE WE LOSE TRACK OF ITEM.  MAY BE BETTER TO ONLY ALLOW MANAUL CLOSE
* NEED TO THICK ABOUT THIS
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.MENU.PRINT: *
IF OC_ID # '' THEN
   STMT = 'LIST ORDER_CHILD WITH @ID = "':OC_ID:'" ORDER CUST_NAME ORDER_PO ORDER_DATE ORDER_NOTES OC_PART_NBR OC_REV OC_DRAWING OC_PART_DESC OC_SCHD_ID OC_DUE_DATE OC_ORD_QTY OC_PROCESS_DESC LPTR'
   EXECUTE STMT CAPTURING DMMY
   PRMPT = "Copy of order: ":OP_ID:" sent to the printer":@SVM:DMMY
   CAPTION = "Order Entry"
   STYLE   = 0  ;* no icon
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.MENU.REPRINT: *
* REPRINT PACKSLIP / INVOICE FOR ORDER ?
CALL REPRINT.FORMS(OP_ID,INVOICE.PRINTER,PACKSLIP.PRINTER,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TABEC.CLICK: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TABIT.CLICK: *
TAB.VALID = @TRUE
TAB.VALIDATE.MSG = ''
*
IF OP_REC # '' THEN
   BEGIN CASE
         *
      CASE  OP_REC<OP_CUST> = ''
         TAB.VALIDATE.MSG = 'Customer Number is a required field'
         *
      CASE  OP_REC<OP_PO_NBR> = ''
         TAB.VALIDATE.MSG = 'Purchase order is a required field'
         *
      CASE  OP_REC<OP_ENTER_BY> = ''
         TAB.VALIDATE.MSG = 'Entered By is a required field'
         *
      CASE  OP_REC<OP_SHIP_TERMS> = ''
         TAB.VALIDATE.MSG = 'Payment terms is a required field'
         *
   END CASE
   *
   *
   IF TAB.VALIDATE.MSG # '' THEN
      TAB.VALID = @FALSE
      PRMPT = TAB.VALIDATE.MSG:', please correct'
      CAPTION = "Order Entry"
      STYLE   = 2  ;* ?
      BUTTONS = 0  ;* ok / cancel
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"TABM",GPVALUE,0,0,1,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXT1ENTBY.VALIDATE: *
OP_REC<OP_ENTER_BY> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXT1ORDNOTES.VALIDATE: *
OP_REC<OP_NOTES> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXT1ORDVAL.VALIDATE: *
* USER ENTERED SALES ORDER NUMBER
*
*  GET THE ORDER RECORD
*  GET THE CUSTOMER RECORD
*  GET THE SHIPTO RECORD
*  LOAD THE FORM
IF GUIARGS<2> # '' THEN
   GOSUB CLEAR.BUFFERS
   OP_ID = GUIARGS<2>
   *
   CALL GET.ORDER.PARENT(OP_ID,OP_REC,@TRUE,ERROR_STATUS,GUIERRORS,GUISTATE)
   BEGIN CASE
      CASE ERROR_STATUS = ERR_NOF  ;* USER ENTERED NON - EXISTENT ORDER #
         *
         * UNLOCK, REPORT AND EXIT
         RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
         PRMPT = "Order number: ":OP_ID:" is not on file"
         CAPTION = "Order Entry"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

      CASE ERROR_STATUS = ERR_BUSY  ;* USER ENTERED ORDER IS LOCKED BY SOMEONE ELSE
         OP.EDIT.MODE = "VIEW"       ;* ALLOW VIEW OF ORDER ONLY
         GOSUB GET.ORDER.DETAIL
         GOSUB LOAD.CM.CTRLS
         GOSUB LOAD.SHIPTO.CTRLS
         GOSUB LOAD.OP.CTRLS
         GOSUB LOAD.ID.CTRLS
         CALL ENABLE.OE.CONTROLS("VIEW",0,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
         CALL ENABLE.ID.CONTROLS("VIEW",0,USER.IS.RESTRICTED,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
      CASE 1
         OP.EDIT.MODE = "EDIT"       ;* ALLOW EDIT OF ORDER
         SAVE_OP_REC = OP_REC        ;* COPY FOR SAVE REQUIRED TEST
         GOSUB GET.ORDER.DETAIL
         GOSUB LOAD.CM.CTRLS
         GOSUB LOAD.SHIPTO.CTRLS
         GOSUB LOAD.OP.CTRLS
         GOSUB LOAD.ID.CTRLS
         IF OP.EDIT.MODE = "EDIT" THEN   ;* THIS COULD HAVE CHANGED WITH GET.ORDER.DETAIL
            CALL ENABLE.OE.CONTROLS("EDIT",1,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
            IF OC_ID = '' THEN
               CALL ENABLE.ID.CONTROLS("RESET",0,USER.IS.RESTRICTED,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
            END ELSE
               CALL ENABLE.ID.CONTROLS("EDIT",1,USER.IS.RESTRICTED,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
            END
         END
   END CASE
END
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXT1POVAL.VALIDATE: *
OP_REC<OP_PO_NBR> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXT2CMREF.VALIDATE: *
OC_REC<OC_CM_REF> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXT2DESC.VALIDATE: *
OC_REC<OC_PART_DESC> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXT2DRAWING.VALIDATE: *
OC_REC<OC_DRAWING> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXT2NOTES.VALIDATE: *
OC_REC<OC_ITEM_NOTES> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXT1ORDDT.VALIDATE: *
OP_REC<OP_DATE> = ICONV(GUIARGS<2>,"D")
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXT2PN.VALIDATE: *
PN_ID = OCONV(GUIARGS<2>,"MCU")
PGET_MSG = ''
CALL GET.PARTS(PN_ID,PARTS_REC,LOCK_PN,NEW_PN,ERROR_STATUS,PGET_MSG,GUIERRORS,GUISTATE)
*
IF PARTS_REC # '' THEN
   OC_REC<OC_PART_NBR> = PN_ID
   OC_REC<OC_REV>      = PARTS_REC<PT_REV>
   OC_REC<OC_DRAWING>  = PARTS_REC<PT_DRAWING>
   OC_REC<OC_PART_DESC>= PARTS_REC<PT_DESC>
   OC_REC<OC_ITEM_NOTES> = PARTS_REC<PT_NOTES>
   OC_REC<OC_PROCESS_ID> = PARTS_REC<PT_PROCESS_ID>
   OC_REC<OC_PROCESS_DESC> = PARTS_REC<PT_PROCESS_DESC>
   OC_REC<OC_PROCESS_CERT> = PARTS_REC<PT_PROCESS_CERT>
   OC_REC<OC_PROCESS_CERT_CODE> = PARTS_REC<PT_PROCESS_CERT_CODE>
   OC_REC<OC_NONSTD> = @FALSE
   OC_REC<OC_MATL> = PARTS_REC<PT_MATL>
   OC_REC<OC_SPC> = PARTS_REC<PT_SPC>
   *
   * CHECK FOR SALES CODE, IF BLANK SET TO DEFAULT
   *
   IF OC_REC<OC_SPC> = '' THEN
      OC_REC<OC_SPC> = DEFAULTS_REC<DFLT_SPC>
   END
   *
   OC_REC<OC_TEST_SAMPLES> = PARTS_REC<PT_TEST_SAMPLES>
   GOSUB ASSIGN.NEXT.CHILD
   GOSUB LOAD.ID.CTRLS
   CALL ENABLE.ID.CONTROLS("EDIT",1,USER.IS.RESTRICTED,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
END ELSE
   *
   * NON STANDARD PART ??
   *
   PRMPT = "Create order with non standard part: ":PN_ID:"?"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 4  ;* ok / cancel
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   IF RESPONSE = 6 THEN  ;* YES
      OC_REC<OC_PART_NBR> = PN_ID
      OC_REC<OC_ITEM_NOTES> = "Non-Standard Part"
      OC_REC<OC_NONSTD> = @TRUE
      GOSUB ASSIGN.NEXT.CHILD
      CALL ENABLE.ID.CONTROLS("EDIT",1,USER.IS.RESTRICTED,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXT2PRI.VALIDATE: *
OC_REC<OC_PRIORITY> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXT2REV.VALIDATE: *
OC_REC<OC_REV> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXTOCUSER1.VALIDATE: *
CALL CUSTOM.CONTROL.VALIDATE("TXTOCUSER1",ORDER_CHILD_CUSTOM_FLDS_REC,GUIARGS<2>,OC_REC,OC_USER1,CFLD.OPTIONS,CFLD.MSG,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXTOCUSER2.VALIDATE: *
CALL CUSTOM.CONTROL.VALIDATE("TXTOCUSER2",ORDER_CHILD_CUSTOM_FLDS_REC,GUIARGS<2>,OC_REC,OC_USER2,CFLD.OPTIONS,CFLD.MSG,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXTOCUSER3.VALIDATE: *
CALL CUSTOM.CONTROL.VALIDATE("TXTOCUSER3",ORDER_CHILD_CUSTOM_FLDS_REC,GUIARGS<2>,OC_REC,OC_USER3,CFLD.OPTIONS,CFLD.MSG,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXTOCUSER4.VALIDATE: *
CALL CUSTOM.CONTROL.VALIDATE("TXTOCUSER4",ORDER_CHILD_CUSTOM_FLDS_REC,GUIARGS<2>,OC_REC,OC_USER4,CFLD.OPTIONS,CFLD.MSG,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXTOCUSER5.VALIDATE: *
CALL CUSTOM.CONTROL.VALIDATE("TXTOCUSER5",ORDER_CHILD_CUSTOM_FLDS_REC,GUIARGS<2>,OC_REC,OC_USER5,CFLD.OPTIONS,CFLD.MSG,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXTOCUSER6.VALIDATE: *
CALL CUSTOM.CONTROL.VALIDATE("TXTOCUSER6",ORDER_CHILD_CUSTOM_FLDS_REC,GUIARGS<2>,OC_REC,OC_USER6,CFLD.OPTIONS,CFLD.MSG,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXTOPUSER1.VALIDATE: *
CALL CUSTOM.CONTROL.VALIDATE("TXTOPUSER1",ORDER_PARENT_CUSTOM_FLDS_REC,GUIARGS<2>,OP_REC,OP_USER1,CFLD.OPTIONS,CFLD.MSG,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXTOPUSER2.VALIDATE: *
CALL CUSTOM.CONTROL.VALIDATE("TXTOPUSER2",ORDER_PARENT_CUSTOM_FLDS_REC,GUIARGS<2>,OP_REC,OP_USER2,CFLD.OPTIONS,CFLD.MSG,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXTOPUSER3.VALIDATE: *
CALL CUSTOM.CONTROL.VALIDATE("TXTOPUSER3",ORDER_PARENT_CUSTOM_FLDS_REC,GUIARGS<2>,OP_REC,OP_USER3,CFLD.OPTIONS,CFLD.MSG,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXTOPUSER4.VALIDATE: *
CALL CUSTOM.CONTROL.VALIDATE("TXTOPUSER4",ORDER_PARENT_CUSTOM_FLDS_REC,GUIARGS<2>,OP_REC,OP_USER4,CFLD.OPTIONS,CFLD.MSG,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXTOPUSER5.VALIDATE: *
CALL CUSTOM.CONTROL.VALIDATE("TXTOPUSER5",ORDER_PARENT_CUSTOM_FLDS_REC,GUIARGS<2>,OP_REC,OP_USER5,CFLD.OPTIONS,CFLD.MSG,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.OE.OE.TXTOPUSER6.VALIDATE: *
CALL CUSTOM.CONTROL.VALIDATE("TXTOPUSER6",ORDER_PARENT_CUSTOM_FLDS_REC,GUIARGS<2>,OP_REC,OP_USER6,CFLD.OPTIONS,CFLD.MSG,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.

RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
LOG.OPTS  = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
* $PAGE$
************************************************************
ASSIGN.NEXT.CHILD:
CHILD.COUNT = DCOUNT(OP_REC<OP_CHILD>,@VM) ;* SET CHILD ID
CHILD.COUNT += 1                           ;*  TO NEXT IN LINE
OC_ID = OP_ID:'*':CHILD.COUNT
RETURN
************************************************************
* $PAGE$
************************************************************
CALC.BAL.DUE:
*
* CALCULATE BALANCE DUE ON THIS ITEM
*
BAL.DUE = 0
ORD.QTY = 0
SHPPD.QTY = 0
*
SCHD.COUNT = DCOUNT(OC_REC<OC_SCHD_ID>,@VM)
FOR I = 1 TO SCHD.COUNT
   ORD.QTY = ORD.QTY + (OC_REC<OC_ORD_QTY,I>+0)
   *
   TST.QTY = OC_REC<OC_DEL_QTY,I>
   SHPPD.QTY = SHPPD.QTY + (TST.QTY + 0)
NEXT I
BAL.DUE = ORD.QTY - SHPPD.QTY  ;* TEST FOR OVER SHIPMENT
IF BAL.DUE < 0 THEN BAL.DUE = 0
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CM.NAME.LIST: *
*
* LOADS THE LST1CUSTNAME LIST
*
CUSTOMER.MAX.LIST = 300
CUSTOMER.START.LIST = 1
CALL GUI.SEARCH2 ("CUSTOMERS","","*","CM_NAME","CM_NAME CM_ADDR CM_CITY",CUSTOMER.MAX.LIST,CUSTOMER.START.LIST,CUSTOMER.LIST,LST.IDS,LIST.CT,EMSG)
*
IF EMSG<1> = 'No Items Found' THEN  ;* NO ITEMS FOUND
   VALUE = ''
END ELSE
   VALUE = CUSTOMER.LIST
END
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"LST1CUSTNAME",GPITEMS,0,0,VALUE,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
SAVE.CHECK: *
*
* TEST TO SEE IF WE NEED TO UPDATE FILES:
* ORDER_PARENT, ORDER_CHILD
SAVE.CHECK.OK = @TRUE
IF OP.EDIT.MODE # "VIEW" THEN
   IF SAVE_OP_REC # OP_REC OR SAVE_OC_REC # OC_REC THEN
      PRMPT = "Order has changed but not saved.":@SVM:"Select Cancel and File to save or ":@SVM:"Ok to exit without saving changes"
      CAPTION = "Order Entry"
      STYLE   = 2  ;* !
      BUTTONS = 1  ;* ok / cancel
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      IF RESPONSE = 2 THEN  ;* CANCEL THE CANCEL OR CLOSE REQUEST
         SAVE.CHECK.OK = @FALSE
      END
   END
END
RETURN
************************************************************
* $PAGE$
************************************************************
SAVE.CHILD.CHECK: *
*
* TEST TO SEE IF WE NEED TO UPDATE FILES:
* ORDER_PARENT, ORDER_CHILD
SAVE.CHILD.CHECK.OK = @TRUE
IF SAVE_OC_REC # OC_REC THEN
   PRMPT = "Item detail has changed but not saved.":@SVM:"Select Cancel, then File to save changes ":@SVM:"or Ok to proceed without saving changes to item"
   CAPTION = "Order Entry"
   STYLE   = 2  ;* ?
   BUTTONS = 1  ;* ok / cancel
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   IF RESPONSE = 2 THEN  ;* CANCEL THE CANCEL OR CLOSE REQUEST
      SAVE.CHILD.CHECK.OK = @FALSE
   END
END
RETURN
************************************************************
* $PAGE$
************************************************************
CLEAR.BUFFERS:
CM_ID       = '' ;* CUSTOMER ID
CM_REC      = '' ;* CUSTOMER RECORD BUFFER
SHIPTO_ID   = '' ;* SHIP TO ID
SHIPTO_REC  = '' ;* SHIP TO RECORD BUFFER
OP_ID       = '' ;* ORDER PARENT ID
SAVE_OP_REC = '' ;* ORDER_PARENT ORIGINAL COPY SAVE
OP_REC      = '' ;* ORDER_PARENT RECORD
OC_ID       = '' ;* ORDER_CHILD ID
SAVE_OC_REC = '' ;* ORDER_CHILD ORIGINAL COPY SAVE
OC_REC      = '' ;* ORDER_CHILD RECORD
PN_ID       = '' ;* PARTS REC ID
PARTS_REC   = '' ;* PARTS RECORD FOR P/N IN ACTIVE ORDER_CHILD RECORD
*
CHILD.LIST  = ''  ;* LIST FOR ORDER CHILD SELECTION ON ITEM DETIAL TAB
*
OP.EDIT.MODE = "EDIT"   ;* ALLOW EDIT OF ORDER (RECORD LOCK SUCCESSFUL)
*
PROCESS.STEP.SELECTED = 0 ;* process STEP SELECTED INDEX
RETURN
************************************************************
* $PAGE$
************************************************************
GET.ORDER.DETAIL:
*
* GET ORDER CHILD AND OP_ID
* ASSIGN AND ACCESS CM_ID / CM_REC, SHIPTO_ID / SHIPTO_REC, OC_ID / OC_REC
* FIND FIRST
GET.ORDER.DETAIL.OK = @TRUE
GOSUB LOAD.CHILD.LIST
OC_ID = FIRST.CHILD.ID
*
* IF WE HAVE A VAILD ID, GET FIRST OPEN (NOT COMPLETE) CHILD RECORD
*
IF OC_ID # '' THEN
   IF OP.EDIT.MODE = "VIEW" THEN
      LOCK_CHILD = @FALSE
   END ELSE
      LOCK_CHILD = @TRUE
   END
   CALL GET.ORDER.CHILD(OC_ID,OC_REC,LOCK_CHILD,ERROR_STATUS,GUIERRORS,GUISTATE)
   SAVE_OC_REC = OC_REC
   PN_ID = OC_REC<OC_PART_NBR>
   IF PN_ID # '' THEN
      MSG_LIST = ''
      CALL GET.RECORD("PARTS",C.PARTS,PN_ID,PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
   END ELSE
      PARTS_REC = ''
   END

   *
   IF ERROR_STATUS = ERR_BUSY THEN ;* USER ENTERED ORDER IS LOCKED BY SOMEONE ELSE
      OP.EDIT.MODE = "VIEW"             ;* ALLOW VIEW OF ORDER ONLY
   END
   *
END
*
* GET CUSTOMER DATA
*
CM_ID  = OP_REC<OP_CUST>
CALL GET.CUSTOMER(CM_ID,CM_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
*
IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH CUST
   LOG.OPTS = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG = OP_ID:' Order has of non-existent customer ':CM_ID
   CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GET.ORDER.DETAIL.OK = @FALSE
END
*
SHIPTO_ID = OP_REC<OP_SHIPTO>
CALL GET.SHIPTO(SHIPTO_ID,SHIPTO_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
*
IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH MISSING SHIP TO
   LOG.OPTS = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG = OP_ID:' Order has of non-existent customer ship to ':SHIPTO_ID
   CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GET.ORDER.DETAIL.OK = @FALSE
END
*

RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CHILD.LIST:
*
* CREATE ORDER CHILD LIST AND SET ID TO FIRST NON DELETED RECORD
*
FIRST.CHILD.ID = ''
CHILD.LIST = ''
*
CHILD.COUNT = DCOUNT(OP_REC<OP_CHILD>,@VM)
FOR I = 1 TO CHILD.COUNT
   TEST.CHILD.ID = OP_ID:'*':I
   *
   CALL GET.RECORD("ORDER_CHILD",C.ORDER_CHILD,TEST.CHILD.ID,TEST.CHILD.REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
   IF ERROR_STATUS = ''  THEN
      CHILD.PN = TEST.CHILD.REC<OC_PART_NBR>
      CHILD.DESC = TEST.CHILD.REC<OC_PART_DESC>
      CHILD.STATUS = TEST.CHILD.REC<OC_ITEM_STAT>
      BEGIN CASE
         CASE CHILD.STATUS = "I" OR CHILD.STATUS = ""
            CHILD.STATUS = OE_CHILD_OPEN
            IF FIRST.CHILD.ID = '' THEN         ;* SAVE FIRST OPEN CHILD RECORD
               FIRST.CHILD.ID = TEST.CHILD.ID
            END
         CASE CHILD.STATUS = "C"
            CHILD.STATUS = OE_CHILD_CLSD
      END CASE
   END ELSE
      *
      * MISSING CHILD RECORD, ASSUME DELETED
      *
      CHILD.PN = "Record Deleted"
      CHILD.DESC = ""
      CHILD.STATUS = OE_CHILD_DEL
   END

   CHILD.LIST<1,I,1> = TEST.CHILD.ID
   CHILD.LIST<1,I,2> = CHILD.PN
   CHILD.LIST<1,I,3> = CHILD.DESC
   CHILD.LIST<1,I,4> = CHILD.STATUS
NEXT I
*
* IF WE DID NOT FIND AN OPEN CHILD RECORD, ASSIGN FIRST.CHILD.ID TO FIRST CHILD
IF FIRST.CHILD.ID = "" AND CHILD.LIST<1,1,1> # '' THEN
   FIRST.CHILD.ID = CHILD.LIST<1,1,1>
END
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CM.CTRLS:
*
* routine LOADS controls for customer *
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<-1> = "LBLCUSTNAME"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_NAME>
*
CTRLIDS<-1> = "LBL1BILLADDR1VAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_ADDR>
*
CTRLIDS<-1> = "LBL1BILLADDR2VAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_ADDR2>
*
CTRLIDS<-1> = "LBL1BILLCITYVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_CITY>
*
CTRLIDS<-1> = "LBL1BILLZIPVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_ZIP>
*
CTRLIDS<-1> = "LBL1BILLSTVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_STATE>
*
CTRLIDS<-1> = "LBL1SHIPCOVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_COUNTRY>
*
LOCATE CM_REC<CM_TERMS> IN TERMS.IDX<1> SETTING IDX THEN
   CTRLIDS<-1> = "LST1TERMS"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = IDX
END
*
BUYER.COUNT = DCOUNT(CM_REC<CM_CONTACT>,@VM)
BUYER.LIST  = ''
FOR I = 1 TO BUYER.COUNT
   IF CM_REC<CM_CONTACT,I> # '' THEN
      BUYER.LIST<1,I,1> = CM_REC<CM_CONTACT,I>
   END
NEXT I
*
CTRLIDS<-1> = "CB1BUYER"
PROPS<-1>   = GPITEMS
VALUES<-1>  = BUYER.LIST
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
**
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.GRDPRO: *
*
*
PROCESS.LIST = ' '
PROCESS.CNT = DCOUNT(OC_REC<OC_PROCESS_ID>,@VM)
FOR I = 1 TO PROCESS.CNT
   *
   PROCESS_ID = OC_REC<OC_PROCESS_ID,I>
   PROCESS.LIST<1,I,1> = PROCESS_ID
   IF PROCESS_ID = "CUSTOM" OR PROCESS_ID = "NOTES" THEN
      PROCESS.LIST<1,I,2> = OC_REC<OC_PROCESS_DESC,I,1> ;* ONLY DISPLAY 1ST LINE!
   END ELSE
      CALL GET.RECORD("PROCESS_STEPS",C.PROCESS_STEPS,PROCESS_ID,PROCESS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      IF ERROR_STATUS = '' THEN ;* GET CERT CODE ASSOC WITH THIS STEP
         PROCESS.LIST<1,I,2> = PROCESS_REC<PS_PROCESS_DESC,1>
      END ELSE
         PROCESS.LIST<1,I,2> = "Process Step Missing!"
      END
   END
   PROCESS.LIST<1,I,3> = OC_REC<OC_PROCESS_CERT,I>
   PROCESS.LIST<1,I,4> = OC_REC<OC_PROCESS_CERT_CODE,I>
   *
NEXT I
*
CTRLIDS = "GRDPRO"
PROPS   = GPVALUE
VALUES  = PROCESS.LIST
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,CTRLIDS,PROPS,0,0,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.ID.CTRLS:
*
* routine LOADS controls for ITEM DETIAL AND EXTRA CHARGE TAB *
*
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
IF CHILD.LIST # '' THEN
   CTRLIDS<-1> = "LSTITEM"
   PROPS<-1>   = GPITEMS
   VALUES<-1>  = CHILD.LIST
END ELSE
   CTRLIDS<-1> = "LSTITEM"
   PROPS<-1>   = GPITEMS
   VALUES<-1>  = " "
END
*
CTRLIDS<-1> = "LBLCLOSED"
PROPS<-1>   = GPVISIBLE
IF OC_REC<OC_CLOSE> = "C" THEN
   VALUES<-1> = 1
END ELSE
   VALUES<-1> = 0
END
*
CTRLIDS<-1> = "TXT2PN"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_PART_NBR>
*
CTRLIDS<-1> = "LBLECITEM"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_ID:' - ':OC_REC<OC_PART_NBR>
*
CTRLIDS<-1> = "TXT2REV"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_REV>
*
CTRLIDS<-1> = "TXT2DESC"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_PART_DESC>
*
CTRLIDS<-1> = "TXT2DRAWING"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_DRAWING>
*
CTRLIDS<-1> = "TXT2CMREF"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_CM_REF>
*
CTRLIDS<-1> = "TXT2NOTES"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_ITEM_NOTES>
*
CTRLIDS<-1> = "CB2MATL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_MATL>
*
CTRLIDS<-1> = "CB2PRICE"
PROPS<-1>   = GPVALUE
IF USER.IS.RESTRICTED THEN
   VALUES<-1>  = '****'
END ELSE
   VALUES<-1>  = OCONV(OC_REC<OC_PRICE_EA>,OC_PRICE_EA.CNV)
END
*
CTRLIDS<-1> = "CHKLOT"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_LOT_FLAG>
*
LOCATE OC_REC<OC_SPC> IN SPC.IDX<1> SETTING IDX THEN
   CTRLIDS<-1> = "LBSPC"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = IDX
END ELSE
   CTRLIDS<-1> = "LBSPC"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = 0
END
*
LOCATE OC_REC<OC_GL_TRANS_CD> IN GL.CODES.IDX<1> SETTING IDX THEN
   CTRLIDS<-1> = "LSTGLTRANS"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = IDX
END ELSE
   CTRLIDS<-1> = "LSTGLTRANS"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = 0
END
*
* SALES TAX
*
CTRLIDS<-1> = "CHKTAX"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_TAX_FLAG>
*
IF OC_REC<OC_TAX_FLAG> THEN
   LOCATE OC_REC<OC_TAX_CODE> IN TAX.IDX<1> SETTING IDX THEN
      CTRLIDS<-1> = "LBTAX"
      PROPS<-1>   = GPVALUE
      VALUES<-1>  = IDX
   END ELSE
      CTRLIDS<-1> = "LBTAX"
      PROPS<-1>   = GPVALUE
      VALUES<-1>  = 0
   END
END ELSE
   CTRLIDS<-1> = "LBTAX"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = 0
END
*
CTRLIDS<-1> = "TXT2PRI"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_PRIORITY>
*
CTRLIDS<-1> = "CHKHOLD"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_HOLD>
*
CTRLIDS<-1> = "CHKTESTPCS"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_TEST_SAMPLES>
*
CTRLIDS<-1> = "TXTOCUSER1"
PROPS<-1>   = GPVALUE
IF ORDER_CHILD_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,1> = '' THEN
   VALUES<-1>  = OC_REC<OC_USER1>
END ELSE
   VALUES<-1>  = OCONV(OC_REC<OC_USER1>,ORDER_CHILD_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,1>)
END
*
CTRLIDS<-1> = "TXTOCUSER2"
PROPS<-1>   = GPVALUE
IF ORDER_CHILD_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,2> = '' THEN
   VALUES<-1>  = OC_REC<OC_USER2>
END ELSE
   VALUES<-1>  = OCONV(OC_REC<OC_USER2>,ORDER_CHILD_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,2>)
END
*
CTRLIDS<-1> = "TXTOCUSER3"
PROPS<-1>   = GPVALUE
IF ORDER_CHILD_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,3> = '' THEN
   VALUES<-1>  = OC_REC<OC_USER3>
END ELSE
   VALUES<-1>  = OCONV(OC_REC<OC_USER3>,ORDER_CHILD_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,3>)
END
*
CTRLIDS<-1> = "TXTOCUSER4"
PROPS<-1>   = GPVALUE
IF ORDER_CHILD_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,4> = '' THEN
   VALUES<-1>  = OC_REC<OC_USER4>
END ELSE
   VALUES<-1>  = OCONV(OC_REC<OC_USER4>,ORDER_CHILD_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,4>)
END
*
CTRLIDS<-1> = "TXTOCUSER5"
PROPS<-1>   = GPVALUE
IF ORDER_CHILD_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,5> = '' THEN
   VALUES<-1>  = OC_REC<OC_USER5>
END ELSE
   VALUES<-1>  = OCONV(OC_REC<OC_USER5>,ORDER_CHILD_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,5>)
END
*
CTRLIDS<-1> = "TXTOCUSER6"
PROPS<-1>   = GPVALUE
IF ORDER_CHILD_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,6> = '' THEN
   VALUES<-1>  = OC_REC<OC_USER6>
END ELSE
   VALUES<-1>  = OCONV(OC_REC<OC_USER6>,ORDER_CHILD_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,6>)
END
*
GOSUB LOAD.SCHD.DETAIL
*
CTRLIDS<-1> = "GRDLINES"
PROPS<-1>   = GPVALUE
VALUES<-1>  = SCHD.DETAIL.LIST
*
GOSUB LOAD.EC.DETAIL
*
CTRLIDS<-1> = "GRDEC"
PROPS<-1>   = GPVALUE
VALUES<-1>  = EC.DETAIL.LIST
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* LOAD PRICING DATA
*
IF PARTS_REC # '' THEN
   PRICE.LIST  = ''
   QUOTE.CNT = DCOUNT(PARTS_REC<PT_STD_QTY>,@VM)
   FOR I = 1 TO QUOTE.CNT
      PRICE.VAL = PARTS_REC<PT_STD_PRICE,I>
      IF NUM(PRICE.VAL) THEN PRICE.VAL = OCONV(PRICE.VAL,PT_STD_PRICE.CNV)
      PRICE.LIST<1,I,1> = PARTS_REC<PT_STD_QTY,I>
      PRICE.LIST<1,I,2> = PRICE.VAL
      PRICE.LIST<1,I,3> = PARTS_REC<PT_STD_NOTES,I>
   NEXT I
   IF PRICE.LIST = '' THEN
      PRICE.LIST = LOT.CHARGE.LIST
   END
END ELSE
   PRICE.LIST = LOT.CHARGE.LIST
END
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"CB2PRICE",GPITEMS,0,0,PRICE.LIST,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
IF PROCESS.STEP.SELECTED > 0 THEN
   *  RESET SELECTED HIGHLIGHT
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   PROCESS.STEP.SELECTED = 0
END
*
GOSUB LOAD.GRDPRO
**
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.OP.CTRLS:
*
* routine LOADS controls for ORDER_PARENT *
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<-1> = "TXT1POVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OP_REC<OP_PO_NBR>
*
CTRLIDS<-1> = "TXT1entby"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OP_REC<OP_ENTER_BY>
*
CTRLIDS<-1> = "TXT1ORDDT"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OCONV(OP_REC<OP_DATE>,OP_DATE.CNV)
*
CTRLIDS<-1> = "TXT1ORDNOTES"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OP_REC<OP_NOTES>
*
CTRLIDS<-1> = "CB1BUYER"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OP_REC<OP_BUYER>
*
CTRLIDS<-1> = "CB1SALESPERSON"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OP_REC<OP_SALESPERSON>
*
CTRLIDS<-1> = "CB1SHIPVIA"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OP_REC<OP_SHIP_VIA>
*
LOCATE OP_REC<OP_SHIP_TERMS> IN TERMS.IDX<1> SETTING IDX THEN
   CTRLIDS<-1> = "LST1TERMS"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = IDX
END
*
*
LOCATE OP_REC<OP_ORDER_TYPE> IN TYPE.IDX<1> SETTING IDX THEN
   CTRLIDS<-1> = "LST1ORDTYPE"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = IDX
END
*
LOCATE OP_REC<OP_ORDER_CLASS> IN CLASS.IDX<1> SETTING IDX THEN
   CTRLIDS<-1> = "LST1ORDCLASS"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = IDX
END
*
CTRLIDS<-1> = "TXTOPUSER1"
PROPS<-1>   = GPVALUE
IF ORDER_PARENT_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,1> = '' THEN
   VALUES<-1>  = OP_REC<OP_USER1>
END ELSE
   VALUES<-1>  = OCONV(OP_REC<OP_USER1>,ORDER_PARENT_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,1>)
END
*
CTRLIDS<-1> = "TXTOPUSER2"
PROPS<-1>   = GPVALUE
IF ORDER_PARENT_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,2> = '' THEN
   VALUES<-1>  = OP_REC<OP_USER2>
END ELSE
   VALUES<-1>  = OCONV(OP_REC<OP_USER2>,ORDER_PARENT_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,2>)
END
*
CTRLIDS<-1> = "TXTOPUSER3"
PROPS<-1>   = GPVALUE
IF ORDER_PARENT_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,3> = '' THEN
   VALUES<-1>  = OP_REC<OP_USER3>
END ELSE
   VALUES<-1>  = OCONV(OP_REC<OP_USER3>,ORDER_PARENT_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,3>)
END
*
CTRLIDS<-1> = "TXTOPUSER4"
PROPS<-1>   = GPVALUE
IF ORDER_PARENT_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,4> = '' THEN
   VALUES<-1>  = OP_REC<OP_USER4>
END ELSE
   VALUES<-1>  = OCONV(OP_REC<OP_USER4>,ORDER_PARENT_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,4>)
END
*
CTRLIDS<-1> = "TXTOPUSER5"
PROPS<-1>   = GPVALUE
IF ORDER_PARENT_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,5> = '' THEN
   VALUES<-1>  = OP_REC<OP_USER5>
END ELSE
   VALUES<-1>  = OCONV(OP_REC<OP_USER5>,ORDER_PARENT_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,5>)
END
*
CTRLIDS<-1> = "TXTOPUSER6"
PROPS<-1>   = GPVALUE
IF ORDER_PARENT_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,6> = '' THEN
   VALUES<-1>  = OP_REC<OP_USER6>
END ELSE
   VALUES<-1>  = OCONV(OP_REC<OP_USER6>,ORDER_PARENT_CUSTOM_FLDS_REC<CFLD_TXTBOX_CONV_CODE,6>)
END
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
**
RETURN
************************************************************
* $PAGE$
************************************************************
* CREATE LIST TO DUMP INTO GRDLINES GRID
*
LOAD.EC.DETAIL:
EC.DETAIL.LIST = ''
EC.COUNT = DCOUNT(OC_REC<OC_EC_CODE>,@VM)
FOR I = 1 TO EC.COUNT
   *
   EC.DETAIL.LIST<1,I,1> = OC_REC<OC_EC_CODE,I>
   EC.DETAIL.LIST<1,I,2> = OC_REC<OC_EC_DESC,I>
   EC.DETAIL.LIST<1,I,3> = OCONV(OC_REC<OC_EC_AMT,I>,OC_EC_AMT.CNV)
   SA_ID = OC_REC<OC_EC_SALES_ID,I>
   EC.DETAIL.LIST<1,I,4> = SA_ID


   *
   * ACCESS THE INVOIVE (AR RECORD)
   *
   INVOICE_DATE = ''
   INVOICE_ID = ''
   *
   IF SA_ID # '' THEN
      CALL GET.RECORD("SALES",C.SALES,SA_ID,SA_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      IF SA_REC = '' THEN
         LOG.OPTS = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG = OC_ID:' Order child has ref to missing sales record ':SA_ID
         CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      END ELSE
         IF NX_AR_ACTIVE THEN  ;* ARE WE RUNNING WITH AR SYSTEM?
            INVOICE_ID = SA_REC<SA_INVOICE_ID> ;* YES IF IT IS NOT NULL, LOOK IT UP
            IF INVOICE_ID # '' THEN
               CALL GET.RECORD("AR",C.AR,INVOICE_ID,AR_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
               IF AR_REC = '' THEN
                  INVOICE_DATE = ''
                  LOG.OPTS = "DISPLAY"
                  ERROR_NBR = ERR_SYS
                  ERROR_MSG = OC_ID:' Order child has ref to missing invoice ':INVOICE_ID
                  CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
               END ELSE
                  INVOICE_DATE = OCONV(AR_REC<AR_INV_DATE>,AR_INV_DATE.CNV)
               END
            END
         END ELSE ;* NOT RUNNING AR, INVOICES N/A
            INVOICE_ID = "N/A"
            INVOICE_DATE = ""
         END
      END
   END

   EC.DETAIL.LIST<1,I,6> = INVOICE_DATE
   EC.DETAIL.LIST<1,I,5> = INVOICE_ID
   *
NEXT I
RETURN
************************************************************
* $PAGE$
************************************************************
* CREATE LIST TO DUMP INTO GRDLINES GRID
*
LOAD.SCHD.DETAIL:
SCHD.DETAIL.LIST = ''
SCHD.COUNT = DCOUNT(OC_REC<OC_SCHD_ID>,@VM)
FOR I = 1 TO SCHD.COUNT
   *
   SCHD.DETAIL.LIST<1,I,1> = OC_REC<OC_SCHD_ID,I>
   SCHD.DETAIL.LIST<1,I,2> = OCONV(OC_REC<OC_DUE_DATE,I>,OC_DUE_DATE.CNV)
   SCHD.DETAIL.LIST<1,I,3> = OC_REC<OC_ORD_QTY,I>

   SCHD.DETAIL.LIST<1,I,4> = OCONV(OC_REC<OC_DEL_DATE,I>,OC_DEL_DATE.CNV)
   SCHD.DETAIL.LIST<1,I,5> = OC_REC<OC_DEL_QTY,I>
   SCHD.DETAIL.LIST<1,I,6> = OC_REC<OC_PACK_ID,I>
   *
   * ACCESS THE INVOIVE (AR RECORD)
   *
   *
   INVOICE_DATE = ''
   INVOICE_ID = ''
   SA_ID = OC_REC<OC_PACK_ID,I>
   IF SA_ID # '' THEN
      CALL GET.RECORD("SALES",C.SALES,SA_ID,SA_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      IF SA_REC = '' THEN
         LOG.OPTS = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG = OC_ID:' Order child has ref to missing sales record ':SA_ID
         CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      END ELSE
         IF NX_AR_ACTIVE THEN  ;* ARE WE RUNNING WITH AR SYSTEM?
            INVOICE_ID = SA_REC<SA_INVOICE_ID>  ;* YES GET INVOICE
            IF INVOICE_ID # '' THEN
               CALL GET.RECORD("AR",C.AR,INVOICE_ID,AR_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
               IF AR_REC = '' THEN
                  INVOICE_DATE = ''
                  LOG.OPTS = "DISPLAY"
                  ERROR_NBR = ERR_SYS
                  ERROR_MSG = OC_ID:' Order child has ref to missing invoice ':INVOICE_ID
                  CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
               END ELSE
                  INVOICE_DATE = OCONV(AR_REC<AR_INV_DATE>,AR_INV_DATE.CNV)
               END
            END
         END ELSE ;* NOT RUNNING AR, INVOICES N/A
            INVOICE_ID = "N/A"
            INVOICE_DATE = ""
         END
      END
   END
   SCHD.DETAIL.LIST<1,I,7> = INVOICE_DATE
   SCHD.DETAIL.LIST<1,I,8> = INVOICE_ID
   SCHD.DETAIL.LIST<1,I,9> = OC_REC<OC_SCHD_NOTES,I>
   *
NEXT I
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.SHIPTO.CTRLS:
*
* routine LOADS AND ENABLES controls for SHIPTO *
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<-1> = "LBL1SHIPNAMEVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = SHIPTO_REC<CS_NAME>
*
CTRLIDS<-1> = "LBL1SHIPADDR1VAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = SHIPTO_REC<CS_ADDR>
*
CTRLIDS<-1> = "LBL1SHIPADDR2VAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = SHIPTO_REC<CS_ADDR2>
*
CTRLIDS<-1> = "LBL1SHIPCITYVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = SHIPTO_REC<CS_CITY>
*
CTRLIDS<-1> = "LBL1SHIPZIPVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = SHIPTO_REC<CS_ZIP>
*
CTRLIDS<-1> = "LBL1SHIPSTVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = SHIPTO_REC<CS_STATE>
*
CTRLIDS<-1> = "LBL1SHIPCOVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = SHIPTO_REC<CS_COUNTRY>
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
**
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.ORDER.LISTS: *
*
* ROUTINE LOADS CONTROLS CB1SALESPERSON, CB1SHIPVIA, LST1ORDTYPE, LST1ORDCLASS
*
CTRLIDS = ""
PROPS   = ""
VALUES  = ""
*
CTRLIDS<-1> = "CB1SALESPERSON"
PROPS<-1>   = GPITEMS
VALUES<-1>  = SALESPERSON.LIST
*
CTRLIDS<-1> = "CB1SHIPVIA"
PROPS<-1>   = GPITEMS
VALUES<-1>  = VIA.LIST
*
CTRLIDS<-1> = "CB2MATL"
PROPS<-1>   = GPITEMS
VALUES<-1>  = MATL.LIST
*
CTRLIDS<-1> = "LBSPC"
PROPS<-1>   = GPITEMS
VALUES<-1>  = SPC.LIST
*
CTRLIDS<-1> = "LSTGLTRANS"
PROPS<-1>   = GPITEMS
VALUES<-1>  = GL.CODES.LIST
*
CTRLIDS<-1> = "LBTAX"
PROPS<-1>   = GPITEMS
VALUES<-1>  = TAX.LIST
*
CTRLIDS<-1> = "LST1TERMS"
PROPS<-1>   = GPITEMS
VALUES<-1>  = TERMS.LIST
*
CTRLIDS<-1> = "LST1ORDTYPE"
PROPS<-1>   = GPITEMS
VALUES<-1>  = TYPE.LIST
*
CTRLIDS<-1> = "LST1ORDCLASS"
PROPS<-1>   = GPITEMS
VALUES<-1>  = CLASS.LIST
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
* $PAGE$
************************************************************
CM.RELOAD:
*
* CALLED AFTER EDIT OF CUSTOMER AND OR SHIPTO RECORD TO REDISPLAY CHANGES
* ON OE FORM
* ASSUMES CM_ID AND SHIPTO_ID SET AND VALID !
*
CALL GET.CUSTOMER(CM_ID,CM_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
*
IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH CUST
   LOG.OPTS = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG = 'Selection of non-existent customer from list'
   CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
END ELSE
   CALL LOAD.CM.SHIPTO.LIST(CM_ID,SHIPTO.LIST,SHIPTO.IDX,GUIAPP,GUIFRM,"LST1SHIPTO",GUIERRORS,GUISTATE)      ;* LOAD SHIP TO LIST BOX
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN
      GOSUB GUI.ERROR
   END ELSE
      *
      CALL GET.SHIPTO(SHIPTO_ID,SHIPTO_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
      *
      IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH DEFAULT SHIP TO
         LOG.OPTS = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG = CM_ID:' Customer has non-existent default ship to ':SHIPTO_ID
         CALL LOG.ERROR(LOG.OPTS,"GUISUB.OE", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      END ELSE
         GOSUB LOAD.CM.CTRLS
         GOSUB LOAD.SHIPTO.CTRLS
      END
   END
END
RETURN
************************************************************
* $PAGE$
************************************************************
OE.VALIDATE:
* VALIDATE ORDER_PARENT ORDER_CHILD
* RETURNS ORDER.VALID T/F
*
ORDER.VALID = @TRUE
ORD.VALIDATE.MSG = ''
*
BEGIN CASE
      *
   CASE  OP_REC<OP_CUST> = ''
      ORD.VALIDATE.MSG = 'Customer Number is a required field'
      *
   CASE  OP_REC<OP_PO_NBR> = ''
      ORD.VALIDATE.MSG = 'Purchase order is a required field'
      *
   CASE  OP_REC<OP_ENTER_BY> = ''
      ORD.VALIDATE.MSG = 'Entered By is a required field'
      *
   CASE  OP_REC<OP_SHIP_TERMS> = ''
      ORD.VALIDATE.MSG = 'Payment terms is a required field'
      *
END CASE
*
* SET SOME DEFAULTS
*DEFAULTS_REC
IF OP_REC<OP_SALESPERSON> = '' THEN
   OP_REC<OP_SALESPERSON> = DEFAULTS_REC<DFLT_SALESPERSON>
END
*
IF OP_REC<OP_SHIP_VIA> = '' THEN
   OP_REC<OP_SHIP_VIA> = DEFAULTS_REC<DFLT_SHIPVIA>
END
*
IF OP_REC<OP_ORDER_CLASS> = '' THEN
   OP_REC<OP_ORDER_CLASS> = DEFAULTS_REC<DFLT_ORDER_CLASS>
END
*
IF OP_REC<OP_ORDER_TYPE> = '' THEN
   OP_REC<OP_ORDER_TYPE>  = DEFAULTS_REC<DFLT_ORDER_TYPE>
END
*
IF ORD.VALIDATE.MSG # '' THEN
   ORDER.VALID = @FALSE
   PRMPT = ORD.VALIDATE.MSG:', please correct'
   CAPTION = "Order Entry"
   STYLE   = 2  ;* ?
   BUTTONS = 0  ;* ok / cancel
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
   GOSUB OC.VALIDATE
   ORDER.VALID = CHILD.VALID   ;* AT THIS POINT VALID IF CHILD WAS OK
END
RETURN
************************************************************
* $PAGE$
************************************************************
OC.VALIDATE:
CHILD.VALID = @TRUE
CHILD.VALIDATE.MSG = ''
IF OC_REC # '' THEN    ;* ONLY PROCESS IF CHILD RECORD HAS BEEN READ IN
   *
   * VALIDATE ORDER CHILD RECORD
   *
   SCHD.TEST = DCOUNT(OC_REC<OC_DUE_DATE>,@VM)
   BAL.QTY = 0
   *
   * CHECK FOR SALES CODE, IF BLANK SET TO DEFAULT
   *
   IF OC_REC<OC_SPC> = '' THEN
      OC_REC<OC_SPC> = DEFAULTS_REC<DFLT_SPC>
   END
   *
   * CHECK FOR GL CODE, IF NOT ENTERED SET TO DEFAULT
   IF OC_REC<OC_GL_TRANS_CD> = '' THEN
      OC_REC<OC_GL_TRANS_CD> =  DEFAULTS_REC<DFLT_SALE_GL_CD>
   END
   *
   * CHECK FOR TAX FLAG, IF SET MUST HAVE TAX_CODE
   *
   IF OC_REC<OC_TAX_FLAG> THEN
      IF OC_REC<OC_TAX_CODE> = "" THEN
         CHILD.VALIDATE.MSG = 'Taxable Checked but no Tax Code Selected'
      END
   END
   *
   * PRICE MUST BE ENTERED
   IF USER.IS.RESTRICTED THEN
      IF OC_REC<OC_PRICE_EA> = '' THEN
         OC_REC<OC_PRICE_EA> = 0
      END
   END ELSE
      IF OC_REC<OC_PRICE_EA> = "" THEN
         CHILD.VALIDATE.MSG = 'Valid price required'
      END
   END

   *
   * VALIDATE OTHER FIELDS
   *
   BEGIN CASE
         *
      CASE OC_REC<OC_GL_TRANS_CD> = '' AND NXT_ENABLE_GL
         CHILD.VALIDATE.MSG = 'GL Transaction Code is a required field'
      CASE  OC_REC<OC_MATL> = '' AND  DEFAULTS_REC<DFLT_MTL_REQUIRED>
         CHILD.VALIDATE.MSG = 'Material type is a required field'
      CASE OC_REC<OC_DUE_DATE> = ''
         CHILD.VALIDATE.MSG = 'At least one delivery date required'
      CASE 1
         FOR I = 1 TO SCHD.TEST
            IF OC_REC<OC_DUE_DATE,I> = '' THEN
               CHILD.VALIDATE.MSG = "Schedule line: ":OC_REC<OC_SCHD_ID,I>:" is missing a due date"
               GOTO OCV.99
            END
            IF OC_REC<OC_ORD_QTY,I> = '' THEN
               CHILD.VALIDATE.MSG = "Schedule line: ":OC_REC<OC_SCHD_ID,I>:" is missing an order qty"
               GOTO OCV.99
            END

         NEXT I
   END CASE
   *
OCV.99:
   *
   IF CHILD.VALIDATE.MSG # '' THEN
      CHILD.VALID = @FALSE
      PRMPT = CHILD.VALIDATE.MSG:', please correct'
      CAPTION = "Order Entry"
      STYLE   = 2  ;* ?
      BUTTONS = 0  ;* ok / cancel
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END
   *
   *   PRMPT = "add code to complete oe validation (CHILD) "
   *
   * NOTES -- NEED TO ADD CODE TO VALIDATE ORDER_PARENT ORDER_CHILD
   *
   *   CAPTION = "Order Entry"
   *   STYLE   = 0  ;* !
   *   BUTTONS = 0  ;* ok
   *   HELPID = ""
   *   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   *
END
RETURN
************************************************************
* $PAGE$
************************************************************
ORDER.WRITE:
*
* THIS IS THE COMMON ORDER SAVE ROUTINE. FOR BOTH FILE ORDER AND FILE ITEM
* NOTE! ROUTINE ASSUMES ALL VALIDATION TEST HAVE BEEN SATISFIED BY CALLER
* ALSO ROUTINE WILL UNLOCK ORDER_CHILD BUT NOT ORDER_PARENT !
*
IF OC_ID # '' THEN
   IF OC_REC # '' THEN   ;* DID WE ACTUALLY CREATE A CHILD RECORD?
      IF SAVE_OC_REC # OC_REC THEN
         CHG_TXT = ''
         IF OC_REC<OC_CHG_DATE> = '' THEN
            CHG_TXT = 'Initial Release'
         END ELSE
            *
            * WHAT CHANGED?
            *
            SCHD.COUNT = DCOUNT(OC_REC<OC_SCHD_ID>,@VM)
            FOR I = 1 TO SCHD.COUNT
               SCH_CHG = ''
               IF SAVE_OC_REC<OC_DUE_DATE,I> = '' THEN
                  CHG_TXT := ' Schd ':I:' Added'
               END ELSE
                  SCH_TXT = ''
                  IF OC_REC<OC_DUE_DATE,I> # SAVE_OC_REC<OC_DUE_DATE,I> THEN    ;* DUE DATE
                     SCH_TXT = 'Due Date: ':OCONV(SAVE_OC_REC<OC_DUE_DATE,I>,OC_DUE_DATE.CNV)
                  END
                  *
                  IF OC_REC<OC_ORD_QTY,I> # SAVE_OC_REC<OC_ORD_QTY,I> THEN    ;* ORDER QTY
                     SCH_TXT := ' Qty: ':SAVE_OC_REC<OC_ORD_QTY,I>
                  END
                  *
                  IF SCH_TXT # '' THEN
                     CHG_TXT := ' Schd ':I:' ':SCH_TXT
                  END
               END
            NEXT I
            *
            IF OC_REC<OC_PRICE_EA> # SAVE_OC_REC<OC_PRICE_EA> THEN    ;* PRICE EACH
               CHG_TXT := ' Price: ':OCONV(SAVE_OC_REC<OC_PRICE_EA>,OC_PRICE_EA.CNV)
            END
         END
         *
         *  KEEP TRACK OF ORDER CHANGES
         *
         IF CHG_TXT # '' THEN
            OC_REC<OC_CHG_DATE,-1> = DATE()
            OC_REC<OC_CHG_USER,-1> = @LOGNAME
            OC_REC<OC_CHG_TEXT,-1> = CHG_TXT
         END
         *
         CALL WRITE.RECORD(OC_ID,OC_REC,C.ORDER_CHILD,@FALSE,ERROR_STATUS)
         SAVE_OC_REC = OC_REC
      END ELSE
         RELEASE C.FILE.VAR(C.ORDER_CHILD), OC_ID
      END
      *
      * DOES CHILD LIST ON ORDER PARENT NEED UPDATING?
      *
      CHILD.COUNT = DCOUNT(OP_REC<OP_CHILD>,@VM)
      CHILD.NBR = FIELD(OC_ID,'*',2)
      IF CHILD.NBR > CHILD.COUNT THEN
         OP_REC<OP_CHILD,-1> = CHILD.NBR
      END
   END
END
* ORDER_PARENT NEEDS UPDATING, WE SAVE AFTER CHILD UPDATE BECAUSE OF POSSIBLE CHANGE
* TO OP_REC<OP_CHILD> ABOVE
IF SAVE_OP_REC # OP_REC THEN
   IF OP_REC<OP_DATE> = '' THEN OP_REC<OP_DATE> = DATE()    ;* SET ORDER DATE
   CALL WRITE.RECORD(OP_ID,OP_REC,C.ORDER_PARENT,@TRUE,ERROR_STATUS)
   SAVE_OP_REC = OP_REC
END
RETURN
************************************************************
* $PAGE$
************************************************************
PRICE.VALIDATE:
*
* ON ENTRY:
* PRICE.EA = VALUE PASSED TO BE VALIDATED
* ON EXIT
* PRICE.EA 0 OR USER ENTERED VALUE IN INTERNAL FORMAT
* LOT.FLAG SET
*
* VALIDATE PRICE - CAN THE USER CHANGE PRICE DATA ?
*
PRICE.OUT = '0.00'
IF USER.IS.RESTRICTED THEN
   *
   PRMPT = "Your user privileges do not allow access to price data."
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   PRICE.OUT = "*****"
   *
END ELSE
   LOT.FLAG = @FALSE
   BEGIN CASE
         *
         * LOT CHARGES ARE ID BY LOT*PROCESS TYPE IE LOT*CHEM
         *
      CASE NOT(NUM(PRICE.EA))
         LOT.TYPE = PRICE.EA
         LOCATE LOT.TYPE IN LOT.CHARGES<1,1> SETTING IDX THEN
            PRICE.EA  = LOT.CHARGES<3,IDX>
            PRICE.OUT = OCONV(PRICE.EA,OC_PRICE_EA.CNV)
            LOT.FLAG  = @TRUE
         END ELSE
            *PRMPT = "Lot charge: ":LOT.TYPE:" not found in validation file."
            *CAPTION = "Order Entry"
            *STYLE   = 2  ;* !
            *BUTTONS = 0  ;* ok only
            *HELPID = ""
            *CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            *PRICE.EA = 0
            *END
            *CASE NOT(NUM(PRICE.EA))
            PRMPT = "Price ea: ":PRICE.EA:" not valid."
            CAPTION = "Order Entry"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok only
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            PRICE.EA = 0
         END
      CASE PRICE.EA < 0
         PRMPT = "Price ea: ":PRICE.EA" is negative, invalid."
         CAPTION = "Order Entry"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         PRICE.EA = 0
      CASE 1
         PRICE.EA = ICONV(PRICE.EA, OC_PRICE_EA.CNV)
         PRICE.OUT = OCONV(PRICE.EA,OC_PRICE_EA.CNV)
   END CASE
   OC_REC<OC_PRICE_EA> = PRICE.EA
   OC_REC<OC_LOT_FLAG> = LOT.FLAG
END
CALL ATGUISETPROP(GUIAPP,GUIFRM,"CB2PRICE",GPVALUE,0,0,PRICE.OUT,GUIERRORS,GUISTATE)
CALL ATGUISETPROP(GUIAPP,GUIFRM,"CHKLOT",GPVALUE,0,0,LOT.FLAG,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
* $PAGE$
************************************************************
UPDATE.CM.SALES:
*
* UPDATE AR AND SALES RECORDS FOR THIS SALES ORDER, CUSTOMER WAS CHANGED
* UPDATE.CM.SALES.FROM.ID - ORIGINAL CUSTOMER ID ON THIS ORDER
* UPDATE.CM.SALES.TO.ID   - NEW CUSTOMER ID ON THIS ORDER
*
* FIND SALES / INVOICES FOR THIS ORDER
*
WARN.LIST = ''     ;* LINES OF WARNINGS FOR THIS CHANGE
SLIST = 'SSELECT SALES WITH ORDER_NBR = "':OP_ID:'" TO 2'
EXECUTE SLIST CAPTURING DMMY.OUT
IF @SELECTED GE 1 THEN
   READLIST IDLIST FROM 2 THEN
      LIST.CT = DCOUNT(IDLIST,@AM)
      *
      FOR I = 1 TO LIST.CT
         SA_ID = IDLIST<I>
         CALL GET.RECORD("SALES",C.SALES,SA_ID,SA_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
         IF SA_REC # '' THEN
            IF SA_REC<SA_CUST_ID> = UPDATE.CM.SALES.FROM.ID THEN
               IF SA_REC<SA_INVOICE_ID> = '' THEN
                  WARN.LIST := @SVM:'Sales Record: ':SA_ID:' References old Customer'
               END ELSE
                  WARN.LIST := @SVM:'Sales Record: ':SA_ID:' and Invoice ':SA_REC<SA_INVOICE_ID>:' References old Customer'
               END
            END
         END
      NEXT I
   END

   *
   IF WARN.LIST # '' THEN
      PRMPT = "The Following Records may cause problems with this change:":WARN.LIST
      CAPTION = "Order Entry"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END
END
RETURN
************************************************************
* $PAGE$
************************************************************
GROUP.ADD:
*
* ROUTINE IS CALLED BY GRDPRO.VALIDATECELL TO INSERT THE PROCESS STEPS DEFINED BY PROCESS_GROUPS RECORD "GROUP.ID"
* BEGIN INSERTION AT PROCESS.ROW (REPRESENTS VALUE MARK WITHIN PARTS RECORD FOR WHERE USER WANTS THIS GROUP INSERTED)
*
OC_REC<OC_PROCESS_ID,PROCESS.ROW> = SELECTED.ID
IF SELECTED.ID = "CUSTOM" OR SELECTED.ID = "NOTES" THEN
   OC_REC<OC_PROCESS_DESC,PROCESS.ROW> = PROCESS_REC<PS_PROCESS_DESC,1>
END
OC_REC<OC_PROCESS_CERT_CODE,PROCESS.ROW> = PROCESS_REC<PS_CERT_DESC>


*
* FIRST SEE IF WE HAVE A VALID PROCESS_GROUPS RECORD
*
CALL GET.RECORD("PROCESS_GROUPS",C.PROCESS_GROUPS,GROUP.ID,GROUP_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF ERROR_STATUS = '' THEN
   *
   STEP.INSERT.POINT = PROCESS.ROW
   STEP.COUNT = DCOUNT(GROUP_REC<PG_PROCESS_STEPS>,@VM)
   FOR SI = 1 TO STEP.COUNT
      STEP.ID = GROUP_REC<PG_PROCESS_STEPS,SI>

      CALL GET.RECORD("PROCESS_STEPS",C.PROCESS_STEPS,STEP.ID,PROCESS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      IF ERROR_STATUS = '' THEN ;* INSERT STEP ID AND CERT
         *
         * INSERT BEFORE ALL STEPS UP TO THE LAST ONE IN THE GROUP LIST
         IF SI < STEP.COUNT THEN
            INS STEP.ID BEFORE OC_REC<OC_PROCESS_ID,STEP.INSERT.POINT>
            INS PROCESS_REC<PS_CERT_DESC> BEFORE OC_REC<OC_PROCESS_CERT_CODE,STEP.INSERT.POINT>
            INS '' BEFORE OC_REC<OC_PROCESS_CERT,STEP.INSERT.POINT>
            *
            IF STEP.ID = "CUSTOM" OR STEP.ID = "NOTES" THEN
               INS PROCESS_REC<PS_PROCESS_DESC,1> BEFORE OC_REC<OC_PROCESS_DESC,STEP.INSERT.POINT>
            END ELSE
               INS ''BEFORE OC_REC<OC_PROCESS_DESC,STEP.INSERT.POINT>
            END
            *
            STEP.INSERT.POINT += 1
            *
            * LAST ONE OVERWRITES ORIGINAL STEP
         END ELSE
            OC_REC<OC_PROCESS_ID,STEP.INSERT.POINT> = STEP.ID
            OC_REC<OC_PROCESS_CERT_CODE,STEP.INSERT.POINT> = PROCESS_REC<PS_CERT_DESC>
            OC_REC<OC_PROCESS_CERT,STEP.INSERT.POINT> = ''
            *
            IF STEP.ID = "CUSTOM" OR STEP.ID = "NOTES" THEN
               OC_REC<OC_PROCESS_DESC,STEP.INSERT.POINT> = PROCESS_REC<PS_PROCESS_DESC,1>
            END ELSE
               OC_REC<OC_PROCESS_DESC,STEP.INSERT.POINT> = ''
            END

         END

      END ELSE
         PRMPT = 'Process_Group: ':GROUP.ID:', Process_Step: ':SELECTED.ID:', Not On File, Insertion Skipped'
         CAPTION = "Order Entry"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      END
   NEXT SI
   *
   * UPDATE THE GRIND
   GOSUB LOAD.GRDPRO
   *
END ELSE
   PRMPT = 'Process_Group: ':GROUP.ID:', Not On File, Insertion Skipped'
   CAPTION = "Order Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END


RETURN
************************************************************
* $PAGE$
************************************************************
OE.RESET:
CALL ATGUIRESET(GUIAPP,GUIFRM,GUIERRORS,GUISTATE)  ;* RESET FORM TO INITAL STATE
*
* clear out the select item list on item tab
*
CTRLIDS = "LSTITEM"
PROPS   = GPITEMS
VALUES  = " "
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
CALL ENABLE.OE.CONTROLS("EDIT",0,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
CALL ENABLE.ID.CONTROLS("",0,USER.IS.RESTRICTED,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* RESET ALL
*
GOSUB CLEAR.BUFFERS
*
RETURN
END
