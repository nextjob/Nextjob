SUBROUTINE RECEIVING.LBL(OP_REC,OC_REC,OC_ID,CUST_NAME,CUST_PO_NBR,PRINTER_NBR,GUIERRORS,GUISTATE)
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: RECEIVING.LBL
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2008
* UPDATED:
*
* MAINTENANCE RECORD:
* 01/13/21 - DO NOT ALLOW PRINTING ON UNIT 0 (WE ASSUME DEFAULT PRINTER IS NO A LABEL PRINTER!)
*
* EQUATE:
*
*
* VARIABLES:
* ON ENTRY:
* OP_REC - ORDER PARENT RECORD FOR ORDER TO PRINT RECEIVING LABEL
* OC_REC - ORDER CHILD REC FOR ORDER TO PRINT RECEIVING LABEL
* OC_ID  - ORDER CHILD ID
* CUST_NAME - CUSTOMER NAME
* CUST_PO_NBR - CUSTOMER PO NUMBER OF ORDER
* PRINTER_NBR - PRINTER UNIT NUMBER TO PRINT LABEL ON
* GUIERRORS, GUISTATE - ACCUTERM GUI VARIABLES, PASSED FOR ERROR REPORTING
*
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* OUTPUT RECEIVING LABEL
*  Note Routine assume a label printer than understands  Datamax-O'Neil Programming Language (DPL).
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.PRT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES ORDER_CHILD.H
$INCLUDE NXT.INCLUDES ORDER_PARENT.H
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES PROCESS_STEPS.H
*
IF PRINTER_NBR = 0 THEN
   PRMPT = "Label Printer Not Setup For This User"
   CAPTION = "Receiving Label Print"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
   *
   ROW = 275     ;* OFFSET FROM HOME POSITION OF LABEL, WHICH IS LOWER LEFT CORNER
   *             ;* REM WE PRINT FROM TOP TO BOTTOM
   ROW_DEC = 15  ;* (little more than 1/8 inch)
   GET_REC_MSG_LIST = ''
   *
   * PULL INFO FROM THE ORDER CHILD RECORD
   *
   DEL_QTY = 0
   DEL.CNT = DCOUNT(OC_REC<OC_ORD_QTY>,@VM)
   FOR I = 1 TO DEL.CNT
      DEL_QTY += OC_REC<OC_ORD_QTY,I>
   NEXT I
   PROCESS_ID   = OC_REC<OC_PROCESS_ID>
   PROCESS_DESC = OC_REC<OC_PROCESS_DESC>
   PART_DESC    = OC_REC<OC_PART_DESC>
   PART_REV     = OC_REC<OC_REV>
   PART_DRAW    = OC_REC<OC_DRAWING>
   PART_NBR     = OC_REC<OC_PART_NBR>
   PART_MTL     = OC_REC<OC_MATL>
   NOTES        = OC_REC<OC_ITEM_NOTES>
   DUE_DATE     = OCONV(OC_REC<OC_DUE_DATE,1>,OC_DUE_DATE.CNV)
   *
   ORDER_DATE   = OCONV(OP_REC<OP_DATE>,OP_DATE.CNV)
   * OUTPUT THE LABEL
   *
   OUT.DATA = STX:"L":CR   ;* ENTER LABEL FORMAT MODE
   OUT.DATA := "D11":CR     ;* 300 DPI
   *
   * 1 = ROTATION 0 degs, 3 = font #3
   * 11 HOZT & WDTH MULT
   * 000 n/a POINT FONT
   * 00275 ROW (1/10 of an inch inc or 2.75 from home "bottom" of label)
   * 0025 COLMN POSTION (.25 inch )
   *
   OUT.DATA := "1311000":ROW"R%4":"0025"
   OUT.DATA := 'Part Number : ':PART_NBR:' rev: ':PART_REV:CR
   *
   ROW -= ROW_DEC  ;* POSITION TO NEXT ROW
   OUT.DATA := "1311000":ROW"R%4":"0025"
   OUT.DATA := 'Description : ':PART_DESC "L#26":CR
   *
   ROW -= ROW_DEC  ;* POSITION TO NEXT ROW
   OUT.DATA := "1311000":ROW"R%4":"0025"
   OUT.DATA := 'Drawing     : ':PART_DRAW "L#26":CR
   *
   ROW -= ROW_DEC  ;* POSITION TO NEXT ROW
   OUT.DATA := "1311000":ROW"R%4":"0025"
   OUT.DATA := 'Material    : ':PART_MTL "L#26":CR
   *
   ROW -= ROW_DEC  ;* POSITION TO NEXT ROW
   OUT.DATA := "1311000":ROW"R%4":"0025"
   OUT.DATA := 'Customer    : ':CUST_NAME"L#26":CR
   *
   ROW -= ROW_DEC  ;* POSITION TO NEXT ROW
   OUT.DATA := "1311000":ROW"R%4":"0025"
   OUT.DATA := 'PO Nbr.     : ':CUST_PO_NBR"L#26":CR
   *
   ROW -= ROW_DEC  ;* POSITION TO NEXT ROW
   OUT.DATA := "1311000":ROW"R%4":"0025"
   OUT.DATA := 'Order Nbr.: ':FIELD(OC_ID,"*",1)"L#8":'Date: ':ORDER_DATE:CR
   *
   ROW -= ROW_DEC  ;* POSITION TO NEXT ROW
   OUT.DATA := "1311000":ROW"R%4":"0025"
   OUT.DATA := 'Quantity  : ':DEL_QTY"R#6":'  Due:  ':DUE_DATE:CR
   *
   ROW -= ROW_DEC  ;* POSITION TO NEXT ROW
   *
   PS_COUNT = DCOUNT(PROCESS_ID,@VM)
   FOR PS_PTR = 1 TO PS_COUNT
      IF PROCESS_ID<1,PS_PTR> = "CUSTOM" THEN

         FOR DI = 1 TO DCOUNT(PROCESS_DESC<1,PS_PTR>,@SVM)  ;* INDIVIDUAL LINES WITHIN EACH STEP
            *
            DATA.LN = PROCESS_DESC<1,PS_PTR,DI>
            GOSUB LN.PRINT
            IF ROW LE 20 THEN GOTO OUT_OF_LABEL

         NEXT DI
      END ELSE

         CALL GET.RECORD("PROCESS_STEPS",C.PROCESS_STEPS,PROCESS_ID<1,PS_PTR>,PROCESS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
         IF ERROR_STATUS = '' THEN
            DESC.TO.USE = PROCESS_REC<PS_PROCESS_DESC>
         END ELSE
            DESC.TO.USE = "Process Step: ":PROCESS_ID<1,PS_PTR>:', Not on File?'
         END
         FOR DI = 1 TO DCOUNT(DESC.TO.USE,@VM)  ;* INDIVIDUAL LINES WITHIN EACH STEP
            *
            DATA.LN = DESC.TO.USE<1,DI>
            GOSUB LN.PRINT
            IF ROW LE 0 THEN GOTO OUT_OF_LABEL

         NEXT DI
      END
   NEXT PS_PTR
OUT_OF_LABEL: *
   *
   OUT.DATA := "1311000":"0015":"0025"
   OUT.DATA := 'CF 705-1 REV N/C':CR

   *
   * LABEL DEF COMPLETE
   *
   OUT.DATA := "E":CR

   *
   *
   PRINT ON PRINTER_NBR OUT.DATA
   PRINTER CLOSE ON PRINTER_NBR
   *
END
*
9999: *
RETURN

!
* LN.PRINT
* MUST BREAK UP TEXT LINE TO FIT ON FORM (35 CHARACTERS MAX)
* CODE SHOULD BREAK LINE AT WORD BOUNDARY
!
LN.PRINT: *
DATA.LN = TRIM(DATA.LN)
LN.LEN = LEN(DATA.LN)
LN = ""
WORDS  = DCOUNT(DATA.LN,' ')  ;* NUMBER OF WORDS IN THE LINE
WD.CNT = 0 ;* COUNTER OF WORDS ADDED TO OUTPUT LINE (LN)
IF LN.LEN > 35 THEN
   FOR WC = 1 TO WORDS
      WD = FIELD(DATA.LN," ",WC)
      LN := WD:' '
      WD.CNT += 1
   UNTIL LEN(LN) > 30   ;* USE 30 AS THE LINE LENGTH TEST, IN CASE "NEXT" WORD IS REALLY LONG (KLUG)
   NEXT WC
   DATA.LN = DATA.LN[COL2(),LN.LEN]
   *

   ROW -= ROW_DEC  ;* POSITION TO NEXT ROW
   IF ROW < 15 THEN GOTO LN.PRINT.EOL          ;* END OF LABEL STOCK?
   OUT.DATA := "1911003":ROW"R%4":"0025"
   OUT.DATA := LN:CR
   *
   IF WD.CNT < WORDS THEN  ;* HAVE ALL WORDS IN PASSED SENTENCE BEEN PROCESSED ?
      IF LEN(TRIM(DATA.LN)) > 0 THEN GOTO LN.PRINT   ;* THIS SHOULD ALWAYS BE THE CASE
   END
END ELSE
   ROW -= ROW_DEC  ;* POSITION TO NEXT ROW
   OUT.DATA := "1911003":ROW"R%4":"0025"
   OUT.DATA := DATA.LN:CR

END
LN.PRINT.EOL: *
RETURN
END

