SUBROUTINE POR.DIALOG(GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: POR.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 05/19/2014
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* DIALOG IS CALLED TO RECEIVE PURCHASE ORDER ITEMS
*
* rem RECEIPT Record Layout for PO
*
* ID - PO Child ID
*
*  RC_TYPE
*  RC_PART_NBR
*         then multi value date for the following fields (ie)
*  Receipt1 Data @vm Receipt2 Data @Vm Receipt3 Data .....
*        RC_QTY1
*        RC_QTY2
*        RC_QTY3
*        RC_DATE
*        RC_LOGIN_ID
*        RC_LOT_ID
*        RC_COMMENTS
*        RC_VALUE
*        RC_DOC_REF
*        RC_PACKSLIPS
*        RC_WO_QTY
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES NXT.WO.STATUS.DEF
$INCLUDE NXT.INCLUDES AP_INVOICE.H
$INCLUDE NXT.INCLUDES LOT_TRACE.H
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES PARTS_QTY.H
$INCLUDE NXT.INCLUDES PO_PARENT.H
$INCLUDE NXT.INCLUDES PO_CHILD.H
$INCLUDE NXT.INCLUDES RECEIPTS.H
$INCLUDE NXT.INCLUDES VENDORS.H
$INCLUDE NXT.INCLUDES WC.H
$INCLUDE NXT.INCLUDES WR.H
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
*
*
$INCLUDE GUIBP ATGUIEQUATES
GUIERRORS = ''
PROG_ID   = "POR.DIALOG"
GUIERRORS = ''
GUIAPP = "POR"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "POR"  ;* crease dialog startup time.
*
MSG_LIST = ''   ;* MESSAGE TO OVERWRITE DEFAULT ERROR MESSAGE FOR GET RECORD ROUTINE
*
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'POR','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'POR' ELSE
   CALL ATGUIERROR(3,'POR','',0,GRFATAL,"'POR' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
GOSUB CLEAR.BUFFERS
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('POR','POR','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='POR'
         BEGIN CASE
            CASE GUIFRM='POR'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.POR.POR.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNBROWSE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.POR.POR.BTNBROWSE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCANCEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.POR.POR.BTNCANCEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNNEXT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.POR.POR.BTNNEXT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNNXTITEM'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.POR.POR.BTNNXTITEM.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNPRINTLOT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.POR.POR.BTNPRINTLOT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRCV'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.POR.POR.BTNRCV.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='GRDLINES'
                     BEGIN CASE
                        CASE GUIEVT=GEBTNCLICK
                           GOSUB GUI.POR.POR.GRDLINES.BTNCLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LSTITEM'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.POR.POR.LSTITEM.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT1ORDVAL'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.POR.POR.TXT1ORDVAL.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTITEMDESC'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.POR.POR.TXTITEMDESC.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTPACKID'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.POR.POR.TXTPACKID.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTRCVDATE'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.POR.POR.TXTRCVDATE.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTRCVQTY1'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.POR.POR.TXTRCVQTY1.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTRCVQTY2'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.POR.POR.TXTRCVQTY2.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTRCVQTY3'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.POR.POR.TXTRCVQTY3.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTWOQTY'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.POR.POR.TXTWOQTY.VALIDATE;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.BTNBROWSE.CLICK: *
CAPTION = "Select Document to link to Receiver"
DEFAULT = ""
SEL.REC = ''
FILTER  = "All files:*.*;Document files:*.doc,*.txt;Image Files:*.jpg"
STYLE   = 1 ;* OPEN (SELECT) SINGLE FILE
CALL ATGUIFILEDIALOG(CAPTION,DEFAULT,FILTER,STYLE,SEL.REF,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
IF SEL.REF # '' THEN
   SEL.REF = OCONV(SEL.REF,"MCU")
   *
   *  PATHS MUST BE ON SHARES!
   *
   IF SEL.REF[1,2] # '\\' THEN
      PRMPT = 'Paths to Linked Documents MUST be on a Share'
      CAPTION = "Receipts"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
      SEL.REF = ''
   END ELSE
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"LBLDOCREFV",GPVALUE,"","",SEL.REF,GUIERRORS,GUISTATE)
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.BTNNEXT.CLICK: *
*
CALL ATGUIRESET(GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
GOSUB CLEAR.BUFFERS
GOSUB LOAD.CHILD.LIST
GOSUB LOAD.CTRLS
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.BTNNXTITEM.CLICK: *
OP_ID_SAVE = OP_ID  ;* SAVE THE PO, CLEAR THE FORM THEN FAKE THE ENTRY OF A PO # AND GEVALIDATE
CALL ATGUIRESET(GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
GOSUB CLEAR.BUFFERS
GOSUB LOAD.CHILD.LIST
GOSUB LOAD.CTRLS
*
CALL ATGUISETPROP(GUIAPP,GUIFRM, "TXT1ORDVAL", GPVALUE, 0, 0,OP_ID_SAVE, GUIERRORS, GUISTATE)
GUIARGS<2> = OP_ID_SAVE
GOSUB GUI.POR.POR.TXT1ORDVAL.VALIDATE
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.BTNPRINTLOT.CLICK: *
RC.IDX = DCOUNT(RC_REC<RC_LOT_ID>,@VM)
CALL LOT.TAG.PRINT(OP_REC,OC_REC,RC_REC,RC.IDX,PARTS_QTY,OC_ID,VN_REC<VN_NAME>,1,GUIERRORS,GUISTATE)
PRMPT = "Lot Tag Sent to the Printer"
CAPTION = "Receipts"
STYLE   = 2  ;* !
BUTTONS = 0  ;* ok
HELPID = ""
CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.BTNRCV.CLICK: *
*
* VALIDATE RECEIVER INFO
*
*
OK.TO.RECV = @TRUE
IF OC_REC<PC_ITEM_STAT> = "C" THEN
   PRMPT = 'PO Item is already complete, continue receipt?'
   CAPTION = "Receipts"
   STYLE   = 3  ;* ?
   BUTTONS = 4 ;* Yes/No
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   IF RESPONSE = 6 THEN  ;* YES
      OK.TO.RECV = @TRUE
   END ELSE
      OK.TO.RECV = @FALSE
   END
END
*
IF OK.TO.RECV THEN
   EMSG = ''
   BEGIN CASE
      CASE OP_REC<PO_CLOSE> = "C"
         EMSG = 'Cannot Recieve a Closed PO!'
      CASE PACK_ID = ''
         EMSG = 'Pack List Id Required!'
      CASE WOQTY + QTY1 + QTY2 +QTY3  LE 0
         EMSG = 'At Least 1 Qty Required!'

   END CASE
   *
   *
   *
   IF EMSG # ''  THEN
      CAPTION = "Receipts"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(EMSG, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END ELSE
      *
      * CREATE THE LOT REC
      *
      RC_REC<RC_PACKSLIPS,-1> = PACK_ID
      *
      RC_REC<RC_QTY1,-1> = QTY1
      RC_REC<RC_QTY2,-1> = QTY2
      RC_REC<RC_QTY3,-1> = QTY3
      RC_REC<RC_WO_QTY,-1> = WOQTY
      *
      RC_REC<RC_DATE,-1> = DATE_RCVD
      *
      RC_REC<RC_LOGIN_ID,-1> = USER_ID
      *
      IF COMMENTS = '' THEN COMMENTS = 'NONE'
      CONVERT @VM TO @SVM IN COMMENTS
      *
      RC_REC<RC_COMMENTS,-1> = COMMENTS
      *
      IF SEL.REF = '' THEN SEL.REF = 'NA'
      RC_REC<RC_DOC_REF,-1> = SEL.REF
      *
      * REM MUST ASSIGN LOT ID
      LOT_COMMENTS = OC_REC<PC_PART_DESC>:@SVM:COMMENTS
      LOT_VEND = VN_ID
      CALL WRITE.LOT(RC_ID,RC_REC,LOT_COMMENTS,LOT_VEND,LOT_ID)
      *
      RC_REC<RC_LOT_ID,-1> = LOT_ID
      *
      CALL WRITE.RECORD(RC_ID,RC_REC,C.RECEIPTS,@FALSE,ERROR_STATUS)
      *
      * UPDATE PARTS_QTY?
      *
      IF PN_ID # ''  AND ((QTY1+QTY2+QTY3) > 0) THEN
         CALL NXT.LOCKWAITING("PARTS_QTY",C.PARTS_QTY,PN_ID,GUIERRORS,GUISTATE)
         CALL GET.RECORD("PARTS_QTY",C.PARTS_QTY,PN_ID,PARTS_QTY,@FALSE,ERROR.STATUS,MSG_LIST,GUIERRORS,GUISTATE)
         PARTS_QTY<PT_QOH1> += QTY1
         PARTS_QTY<PT_QOH2> += QTY2
         PARTS_QTY<PT_QOH3> += QTY3
         CALL WRITE.RECORD(PN_ID,PARTS_QTY,C.PARTS_QTY,@FALSE,ERROR_STATUS)
      END
      *
      * IS PO ITEM COMPLETE?
      IF (QTYTOTAL + TOT.PREV) GE OC_REC<PC_ORD_QTY> THEN
         PO_STATUS = 'C'  ;* COMPLETE
      END ELSE
         PO_STATUS = 'I'  ;* INCOMPLETE
      END

      *  DOES PO STATUS NEED TO BE UPDATED?
      IF OC_REC<PC_ITEM_STAT> #  PO_STATUS THEN
         CALL NXT.LOCKWAITING("PO_CHILD",C.PO_CHILD,OC_ID,GUIERRORS,GUISTATE)
         WRITEV PO_STATUS TO  C.FILE.VAR(C.PO_CHILD), OC_ID, PC_ITEM_STAT
         RELEASE C.FILE.VAR(C.PO_CHILD)
      END
      *
      * does a work order  wr record need to be updated (must be a sub contract wc)
      *
      IF OC_REC<PC_WO_NBR> # '' AND OC_REC<PC_WO_SEQ> # '' THEN
         WR.ID = OC_REC<PC_WO_NBR>:'*':OC_REC<PC_WO_SEQ>
         CALL GET.RECORD("WR",C.WR,WR.ID,WR_REC,@FALSE,ERROR.STATUS,MSG_LIST,GUIERRORS,GUISTATE)
         IF WR_REC = '' THEN
            EMSG = 'WR Record reference on PO: ':OC_ID:' Does Not Exist: ':WR.ID
            LOG.OPTS = "DISPLAY"
            ERROR_NBR = ERR_SYS
            ERROR_MSG = EMSG
            CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         END ELSE
            WC.ID = WR_REC<WRT_WCID>
            CALL GET.RECORD("WC",C.WC,WC.ID,WC_REC,@FALSE,ERROR.STATUS,MSG_LIST,GUIERRORS,GUISTATE)
            IF WC_REC = '' THEN
               EMSG = 'Seq Number: ':OC_REC<PC_WO_SEQ>:' Refences invalid WC: ':WC.ID
               LOG.OPTS = "DISPLAY"
               ERROR_NBR = ERR_SYS
               ERROR_MSG = EMSG
               CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
            END ELSE
               *
               IF WC_REC<WC_SUB> THEN
                  *
                  * UPDATE QTY ON WORK ORDER
                  *
                  CALL NXT.LOCKWAITING("WR",C.WR,WR.ID,GUIERRORS,GUISTATE)
                  CALL GET.RECORD("WR",C.WR,WR.ID,WR_REC,@FALSE,ERROR.STATUS,MSG_LIST,GUIERRORS,GUISTATE)  ;* RE READ AFTER LOCK
                  WR_REC<WR_QTY_COMP> = WR_REC<WR_QTY_COMP> + QTYTOTAL
                  IF WR_REC<WR_QTY_COMP> GE WR_REC<WR_QTY_TO_MFG> THEN
                     WR_REC<WR_STATUS>  =WORK.ORDER.SEQ.STATUS.LIST<1,WO.C.IDX,1>    ;* SEQ IS COMPLETE
                     WR_REC<WR_ACT_END> = DATE()
                  END ELSE
                     WR_REC<WR_STATUS> = WORK.ORDER.SEQ.STATUS.LIST<1,WO.RN.IDX,1>   ;* SEQ IS RN
                     WR_REC<WR_STAT_DATE> = DATE()
                  END
                  CALL WRITE.RECORD(WR.ID,WR_REC,C.WR,@FALSE,ERROR_STATUS)
               END
            END
         END
      END
      *
      * CANNOT CLEAR FORM AT THIS POINT, ENABLE LOT TAG PRINT AND DISABLE OTHER BUTTONS EXCEPT NEW?
      *
      CTRLIDS = "BTNNEXT"
      PROPS   = GPENABLED
      VALUES  = 1
      *
      CTRLIDS<-1> = "BTNNXTITEM"
      PROPS<-1>   = GPENABLED
      VALUES<-1>  = 1
      *
      CTRLIDS<-1> = "BTNPRINTLOT"
      PROPS<-1>   = GPENABLED
      VALUES<-1>  = 1
      *
      CTRLIDS<-1> = "FRMPROCESS"
      PROPS<-1>   = GPENABLED
      VALUES<-1>  = 0
      *
      *CTRLIDS<-1> = "TXT1ORDVAL"
      *PROPS<-1>   = GPENABLED
      *VALUES<-1>  = 0
      *
      CTRLIDS<-1> = "LSTITEM"
      PROPS<-1>   = GPENABLED
      VALUES<-1>  = 0
      *
      CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      *
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.POR.POR.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.BTNCANCEL.CLICK: *
*
IF RC_ID # '' THEN
   RELEASE C.FILE.VAR(C.RECEIPTS)
END
CALL ATGUIRESET(GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
GOSUB CLEAR.BUFFERS
GOSUB LOAD.CHILD.LIST
GOSUB LOAD.CTRLS

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.GRDLINES.BTNCLICK: *
COL = GUIARGS<1,1>
ROW = GUIARGS<1,2>
IF COL = 7 THEN    ;* REMOVE BUTTON COLUMN?
   IF ROW LE RECVR.DETAIL.COUNT THEN     ;* MUST BE ROW WITH DATA
      IF RECVR.DETAIL.LIST<1,ROW,6> = '' THEN

         SQTY1 = RC_REC<RC_QTY1,ROW> ;* SAVE THE QTY WE ARE ABOUT TO REMOVE
         SQTY2 = RC_REC<RC_QTY2,ROW>
         SQTY3 = RC_REC<RC_QTY3,ROW>

         DEL RC_REC<RC_PACKSLIPS,ROW> ;* PACK_ID
         DEL RC_REC<RC_QTY1,ROW> ;* QTY1
         DEL RC_REC<RC_QTY2,ROW> ;* QTY2
         DEL RC_REC<RC_QTY3,ROW> ;* QTY3
         DEL RC_REC<RC_WO_QTY,ROW> ;* WOQTY
         DEL RC_REC<RC_DATE,ROW> ;* DATE_RCVD
         DEL RC_REC<RC_LOGIN_ID,ROW> ;* USER_ID
         DEL RC_REC<RC_COMMENTS,ROW> ;* COMMENTS
         DEL RC_REC<RC_DOC_REF,ROW> ;* SEL.REF
         LOT_ID = RC_REC<RC_LOT_ID,ROW> ;* LOT_ID
         DEL RC_REC<RC_LOT_ID,ROW> ;* LOT_ID

         CALL WRITE.RECORD(RC_ID,RC_REC,C.RECEIPTS,@TRUE,ERROR_STATUS)
         *
         * NEED TO UPDATE LOT_TRACE AND PARTS_QTY
         *
         IF PN_ID # ''  AND ((SQTY1+SQTY2+SQTY3) > 0) THEN
            CALL NXT.LOCKWAITING("PARTS_QTY",C.PARTS_QTY,PN_ID,GUIERRORS,GUISTATE)
            CALL GET.RECORD("PARTS_QTY",C.PARTS_QTY,PN_ID,PARTS_QTY,@FALSE,ERROR.STATUS,MSG_LIST,GUIERRORS,GUISTATE)
            PARTS_QTY<PT_QOH1> -= SQTY1
            PARTS_QTY<PT_QOH2> -= SQTY2
            PARTS_QTY<PT_QOH3> -= SQTY3
            CALL WRITE.RECORD(PN_ID,PARTS_QTY,C.PARTS_QTY,@FALSE,ERROR_STATUS)
         END
         *
         WRITEV "REMOVED" TO  C.FILE.VAR(C.LOT_TRACE), LOT_ID, LT_STATUS
         *
         GOSUB LOAD.RECVR.DETAIL
         GOSUB LOAD.CTRLS

      END ELSE
         PRMPT = "Receipt Assigned an Invoice, Cannot Remove:-"
         CAPTION = "Receipts"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      END
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.LSTITEM.CLICK: *
*
* VALID CHILD ID AT THIS CLICK ROW?
*
TEST.ID = CHILD.LIST<1,GUIARGS<1>,1>
IF TEST.ID # '' THEN
   *
   * HAVE WE ALREADY LOCKED AN ITEM?
   *
   IF RC_ID # '' THEN
      RELEASE C.FILE.VAR(C.RECEIPTS)
   END
   *
   OC_ID = TEST.ID
   *
   OC_REC      = '' ;* ORDER_CHILD RECORD

   CALL GET.PO.CHILD(OC_ID,OC_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)

   PN_ID = OC_REC<PC_PART_NBR>
   IF PN_ID # '' THEN
      CALL GET.RECORD("PARTS",C.PARTS,PN_ID,PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
      CALL GET.RECORD("PARTS_QTY",C.PARTS_QTY,PN_ID,PARTS_QTY,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
   END ELSE
      PARTS_REC = ''
      PARTS_QTY = ''
   END
   *
   RC_ID = OC_ID
   CALL GET.RECORD("RECEIPTS",C.RECEIPTS,RC_ID,RC_REC,@TRUE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
   BEGIN CASE
      CASE ERROR_STATUS = ERR_BUSY  ;* USER ENTERED ORDER IS LOCKED BY SOMEONE ELSE
         PRMPT = "Receipt: ":RC_ID:" is in Use"
         CAPTION = "Receipts"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

      CASE ERROR_STATUS = ERR_NOF  ;* NEW RECIEPT RECORD, INIT
         RC_REC = ''
         RC_REC<RC_TYPE> = 'PO'
         RC_REC<RC_PART_NBR> = PN_ID
         TOT.PREV = 0
         GOSUB LOAD.RECVR.DETAIL
         GOSUB LOAD.CTRLS
         *
      CASE 1
         RCT.CNT = DCOUNT(RC_REC<RC_PACKSLIPS>,@VM)
         TOT.PREV = 0
         *
         * CALC TOT PREVIOUSLY RECEIVED ON THIS RECEIPT
         FOR I = 1 TO RCT.CNT
            TOT.PREV = TOT.PREV + RC_REC<RC_QTY1,I> + RC_REC<RC_QTY2,I> + RC_REC<RC_QTY3,I> + RC_REC<RC_WO_QTY,I>
         NEXT I
         GOSUB LOAD.RECVR.DETAIL
         GOSUB LOAD.CTRLS
         *
   END CASE
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.TXT1ORDVAL.VALIDATE: *
* USER ENTERED PO ORDER NUMBER
*
*  GET THE ORDER RECORD
*  GET THE VENOR RECORD
*  LOAD THE FORM
IF GUIARGS<2> # '' THEN
   GOSUB CLEAR.BUFFERS
   OP_ID = OCONV(GUIARGS<2>,"MCU")
   *
   EMSG = ""
   CALL GET.PO.PARENT(OP_ID,OP_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
   BEGIN CASE
      CASE ERROR_STATUS = ERR_NOF  ;* USER ENTERED NON - EXISTENT ORDER #
         EMSG = "Order number: ":OP_ID:" is not on file"
   END CASE
   *
   IF EMSG # '' THEN
      CAPTION = "Receipts"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(EMSG, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END ELSE
      GOSUB GET.ORDER.DETAIL
      *
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.TXTITEMDESC.VALIDATE: *
COMMENTS = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.TXTPACKID.VALIDATE: *
PACK_ID = TRIM(OCONV(GUIARGS<2>,"MCU"))
*
* CANNOT HAVE DULICATES!
*
LOCATE PACK_ID IN RC_REC<RC_PACKSLIPS,1> SETTING IDX THEN
   PRMPT = PACK_ID:' Already Present in Receipts, Duplicates Not Allowed!'
   CAPTION = "Receiving"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   *
   PACK_ID = ''
   *
   CTRLIDS = "TXTPACKID"
   PROPS   = GPVALUE
   VALUES  = PACK_ID
   ***
   CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.TXTRCVDATE.VALIDATE: *
DATE_RCVD = ICONV(GUIARGS<2>,"D")
EMSG = ''
IF DATE_RCVD > DATE() THEN
   EMSG = 'Cannot Receive to a Future Date'
END ELSE
   IF DATE_RCVD < OP_REC<PO_DATE> THEN
      EMSG = 'Cannot Receive prior to PO Date'
   END
END
IF EMSG # '' THEN
   PRMPT = EMSG
   CAPTION = "Receiving"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   DATE_RCVD = DATE()
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTRCVDATE",GPVALUE,"","",OCONV(DATE_RCVD,RC_DATE.CNV),GUIERRORS,GUISTATE)
END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.TXTRCVQTY1.VALIDATE: *
IF NUM(GUIARGS<2>) THEN
   TSTQTY = GUIARGS<2> + 0
   IF TSTQTY GE 0 THEN
      QTY1 = TSTQTY
      GOSUB LOAD.QTYTOTAL
   END ELSE
      *
      * BAD QOH VALUE
      *
      QTY1 = 0
      PRMPT = 'Qty Must be >= 0'
      CAPTION = "Receiving"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
      * and reset to previous value
      *
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTRCVQTY1",GPVALUE,"","",0,GUIERRORS,GUISTATE)

   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.TXTRCVQTY2.VALIDATE: *
IF NUM(GUIARGS<2>) THEN
   TSTQTY = GUIARGS<2> + 0
   IF TSTQTY GE 0 THEN
      QTY2 = TSTQTY
      GOSUB LOAD.QTYTOTAL
   END ELSE
      *
      * BAD QOH VALUE
      *
      QTY2 = 0
      PRMPT = 'Qty Must be >= 0'
      CAPTION = "Receiving"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
      * and reset to previous value
      *
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTRCVQTY2",GPVALUE,"","",0,GUIERRORS,GUISTATE)

   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.TXTRCVQTY3.VALIDATE: *
IF NUM(GUIARGS<2>) THEN
   TSTQTY = GUIARGS<2> + 0
   IF TSTQTY GE 0 THEN
      QTY3 = TSTQTY
      GOSUB LOAD.QTYTOTAL
   END ELSE
      *
      * BAD QOH VALUE
      *
      QTY3 =  0
      PRMPT = 'Qty Must be >= 0'
      CAPTION = "Receiving"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
      * and reset to previous value
      *
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTRCVQTY3",GPVALUE,"","",0,GUIERRORS,GUISTATE)

   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POR.POR.TXTWOQTY.VALIDATE: *
*
* VALIDATE WO / NON STD PART QTY TO RECV
*
IF NUM(GUIARGS<2>) THEN
   TSTQTY = GUIARGS<2> + 0
   IF TSTQTY GE 0 THEN
      WOQTY = TSTQTY
      GOSUB LOAD.QTYTOTAL
   END ELSE
      *
      * BAD QOH VALUE
      *
      WOQTY = 0
      PRMPT = 'Qty Must be >= 0'
      CAPTION = "Receiving"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
      * and reset to previous value
      *
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTWOQTY",GPVALUE,"","",0,GUIERRORS,GUISTATE)

   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
************************************************************
* $PAGE$
************************************************************
LOAD.CHILD.LIST:
*
* CREATE ORDER CHILD LIST AND SET ID TO FIRST NON DELETED RECORD
*
CHILD.LIST = ''
*
CHILD.COUNT = DCOUNT(OP_REC<PO_CHILD>,@VM)
FOR I = 1 TO CHILD.COUNT
   TEST.CHILD.ID = OP_ID:'*':I
   *
   CALL GET.RECORD("PO_CHILD",C.PO_CHILD,TEST.CHILD.ID,TEST.CHILD.REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
   IF ERROR_STATUS = ''  THEN
      CHILD.PN = TEST.CHILD.REC<PC_PART_NBR>
      CHILD.DESC = TEST.CHILD.REC<PC_PART_DESC>
      CHILD.STATUS = TEST.CHILD.REC<PC_ITEM_STAT>
      CHILD.WO =  TEST.CHILD.REC<PC_WO_NBR>
      CHILD.DUE = OCONV(TEST.CHILD.REC<PC_DUE_DATE>,PC_DUE_DATE.CNV)
      BEGIN CASE
         CASE CHILD.STATUS = "I" OR CHILD.STATUS = ""
            CHILD.STATUS = OE_CHILD_OPEN
         CASE CHILD.STATUS = "C"
            CHILD.STATUS = OE_CHILD_CLSD
      END CASE
   END ELSE
      *
      * MISSING CHILD RECORD, ASSUME DELETED
      *
      CHILD.PN = "Record Misssing!"
      CHILD.DESC = ""
      CHILD.STATUS = OE_CHILD_DEL
      CHILD.WO = ''
      CHILD.DUE = ''
   END

   CHILD.LIST<1,I,1> = TEST.CHILD.ID
   CHILD.LIST<1,I,2> = CHILD.PN
   CHILD.LIST<1,I,3> = CHILD.DESC
   CHILD.LIST<1,I,4> = CHILD.WO
   CHILD.LIST<1,I,5> = CHILD.DUE
   CHILD.LIST<1,I,6> = CHILD.STATUS
NEXT I
*
*
IF CHILD.LIST # '' THEN
   CTRLIDS = "LSTITEM"
   PROPS   = GPITEMS
   VALUES  = CHILD.LIST
   *
   CTRLIDS<2> = "LSTITEM"
   PROPS<2>   = GPENABLED
   VALUES<2>  = 1
END ELSE
   CTRLIDS = "LSTITEM"
   PROPS   = GPITEMS
   VALUES  = ""
   *
   CTRLIDS<2> = "LSTITEM"
   PROPS<2>   = GPENABLED
   VALUES<2>  = 0
END
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
GET.ORDER.DETAIL:
*
* GET ORDER CHILD AND OP_ID
* ASSIGN AND ACCESS VN_ID / VN_REC, SHIPTO_ID / SHIPTO_REC, OC_ID / OC_REC
* FIND FIRST

GOSUB LOAD.CHILD.LIST
*
* GET VENDOR DATA
*
VN_ID  = OP_REC<PO_VEN>
CALL GET.VENDOR(VN_ID,VN_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
*
IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH VEN
   LOG.OPTS = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG = OP_ID:' Order has of non-existent VENDOR ':VN_ID
   CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)

END ELSE
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"LBLVENDORVAL",GPVALUE,"","",VN_REC<VN_NAME>,GUIERRORS,GUISTATE)
END
*
RETURN
************************************************************
* $PAGE$
************************************************************
CLEAR.BUFFERS:
VN_ID       = '' ;* VENDOR ID
VN_REC      = '' ;* VENDOR RECORD BUFFER
OP_ID       = '' ;* ORDER PARENT ID
OP_REC      = '' ;* ORDER_PARENT RECORD
OC_ID       = '' ;* ORDER_CHILD ID
OC_REC      = '' ;* ORDER_CHILD RECORD
PN_ID       = '' ;* PARTS REC ID
PARTS_REC   = '' ;* PARTS RECORD FOR P/N IN ACTIVE ORDER_CHILD RECORD
PARTS_QTY   = '' ;* PARTS QTY RECORD
RC_ID       = '' ;* RECEIVER ID
RC_REC      = '' ;* RECEIVER REC
*
WOQTY = 0
QTY1 = 0
QTY2 = 0
QTY3 = 0
PACK_ID = ''
DATE_RCVD = DATE()
TOT.PREV = 0
LOT_ID    = ''
COMMENTS = ''
SEL.REF = ''
USER_ID = @LOGNAME
*
CHILD.LIST  = ''  ;* LIST FOR ORDER CHILD SELECTION ON ITEM DETIAL TAB
RECVR.DETAIL.LIST = '' ;* LIST OF RECEIPTS FOR GRDLINES
RECVR.DETAIL.COUNT = 0
*
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CTRLS:
*
* routine LOADS controls
*
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<1> = "LBLCLOSED"
PROPS<1>   = GPVISIBLE
IF OP_REC<PO_CLOSE> = "C" THEN
   VALUES<1> = 1
END ELSE
   VALUES<1> = 0
END
*
CTRLIDS<2> = "TXT1ORDVAL"
PROPS<2>   = GPVALUE
VALUES<2>  = OP_ID
*
CTRLIDS<3> = "LBLPNVAL"
PROPS<3>   = GPVALUE
VALUES<3>  = OC_REC<PC_PART_NBR>
*
CTRLIDS<4> = "LBLWOVAL"
PROPS<4>   = GPVALUE
VALUES<4>  = OC_REC<PC_WO_NBR> :' ':OC_REC<PC_WO_SEQ>
*
CTRLIDS<5> = "LBLDESCVAL"
PROPS<5>   = GPVALUE
VALUES<5>  = OC_REC<PC_PART_DESC>
*
CTRLIDS<6> = "TXTRCVDATE"
PROPS<6>   = GPVALUE
IF DATE_RCVD = '' THEN
   VALUES<6>  = ''
END ELSE
   VALUES<6>  = OCONV(DATE_RCVD,RC_DATE.CNV)
END
*
CTRLIDS<7> = "LBLORDQTYV"
PROPS<7>   = GPVALUE
VALUES<7>  = OC_REC<PC_ORD_QTY>
*
CTRLIDS<8> = "TXTPODESC"
PROPS<8>   = GPVALUE
VALUES<8>  = OC_REC<PC_DESC_TEXT>
*
CTRLIDS<9> = "LBLUSERIDV"
PROPS<9>   = GPVALUE
VALUES<9>  = USER_ID
*
* IF WE HAVE A PARTS RECORD, REFRESH THE LOCATION LABELS
IF PARTS_QTY # '' THEN
   CTRLIDS<-1> = "LBLRCVQTY1"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = "Qty to Rvc ":PARTS_QTY<PT_LOC1>
   *
   CTRLIDS<-1> = "LBLRCVQTY2"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = "Qty to Rvc ":PARTS_QTY<PT_LOC2>
   *
   CTRLIDS<-1> = "LBLRCVQTY3"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = "Qty to Rvc ":PARTS_QTY<PT_LOC3>
END ELSE
   CTRLIDS<-1> = "LBLRCVQTY1"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = "Qty To Rcv Loc 1"
   *
   CTRLIDS<-1> = "LBLRCVQTY2"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = "Qty To Rcv Loc 2"
   *
   CTRLIDS<-1> = "LBLRCVQTY3"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = "Qty To Rcv Loc 3"
END
*
* ENABLE QTY TXT EDITS BASED ON TYPE OF PO WE HAVE
*
WOQTY.LABEL = 'Rcv To Work Order'
FRM.ENABLE_STATE = 0
RCVQTY.ENABLE_STATE = 0
WOQTY.ENABLE_STATE = 0
IF OC_REC # '' THEN
   FRM.ENABLE_STATE = 1
   IF OC_REC<PC_PART_NBR> = '' THEN  ;* IF NO PART NUMBER, DO NOT ENABLE txtRcvQty1, txtRcvQty2, txtRcvQty3
      RCVQTY.ENABLE_STATE = 0
   END ELSE
      RCVQTY.ENABLE_STATE = 1
   END
   IF OC_REC<PC_WO_NBR> = '' THEN    ;* IF NO WO NUMBER, DO NOT ENABLE TXTWOQTY
      IF OC_REC<PC_PART_NBR> = '' THEN  ;* UNLESS THIS IS A PO FOR A NON INVENTORY PART
         WOQTY.ENABLE_STATE = 1
         WOQTY.LABEL = 'Rcv Non Std Part'
      END ELSE
         WOQTY.ENABLE_STATE = 0
      END
   END ELSE
      WOQTY.ENABLE_STATE = 1
   END
END
*
CTRLIDS<-1> = "TXTRCVQTY1"
PROPS<-1>   = GPENABLED
VALUES<-1>  = RCVQTY.ENABLE_STATE
*
CTRLIDS<-1> = "TXTRCVQTY2"
PROPS<-1>   = GPENABLED
VALUES<-1>  = RCVQTY.ENABLE_STATE
*
CTRLIDS<-1> = "TXTRCVQTY3"
PROPS<-1>   = GPENABLED
VALUES<-1>  = RCVQTY.ENABLE_STATE
*
CTRLIDS<-1> = "TXTWOQTY"
PROPS<-1>   = GPENABLED
VALUES<-1>  = WOQTY.ENABLE_STATE
*
CTRLIDS<-1> = "LBLWOREV"
PROPS<-1>   = GPVALUE
VALUES<-1>  = WOQTY.LABEL
*
CTRLIDS<-1> = "FRMPROCESS"
PROPS<-1>   = GPENABLED
VALUES<-1>  = FRM.ENABLE_STATE
*
CTRLIDS<-1> = "LBLPREVRCVDQTY"
PROPS<-1>   = GPVALUE
VALUES<-1>  = TOT.PREV
*
CTRLIDS<-1> = "GRDLINES"
PROPS<-1>   = GPVALUE
VALUES<-1>  = RECVR.DETAIL.LIST
*
CTRLIDS<-1> = "BTNPRINTLOT"
PROPS<-1>   = GPENABLED
VALUES<-1>  = 0
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.QTYTOTAL:
*
QTYTOTAL = WOQTY + QTY1 +QTY2 + QTY3+ 0
*
CTRLIDS = "LBLTRCVQTYV"
PROPS   = GPVALUE
VALUES  = QTYTOTAL
***
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* ARE WE ABOUT TO RECEIVE MORE THAN WE ORDERD?
*
IF (QTYTOTAL + TOT.PREV) > OC_REC<PC_ORD_QTY> THEN
   PRMPT = 'Warning... Qty to Receive + Previous Received Exceeds Order Qty!'
   CAPTION = "Receiving"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
*
RETURN
************************************************************
* $PAGE$
************************************************************
* CREATE LIST TO DUMP INTO GRDLINES GRID
*
LOAD.RECVR.DETAIL:
RECVR.DETAIL.LIST = ''
RECVR.DETAIL.COUNT  = 0

CALL GET.RECORD("RECEIPTS",C.RECEIPTS,OC_ID,RCVR_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF RCVR_REC # '' THEN
   *
   * ACCESS THE INVOIVE (AP_INVOICE RECORD)
   *
   SLIST = 'SSELECT AP_INVOICE WITH AP_RECEIPT_ID = "':OC_ID:'" TO 2'
   EXECUTE SLIST CAPTURING DMMY.OUT
   *
   IF @SELECTED GE 1 THEN
      READLIST IDLIST FROM 2 THEN
         LIST.CT = DCOUNT(IDLIST,@AM)
      END
   END ELSE
      LIST.CT = 0
   END
   *
   RECVR.DETAIL.COUNT = DCOUNT(RCVR_REC<RC_PACKSLIPS>,@VM)
   FOR I = 1 TO RECVR.DETAIL.COUNT
      *
      RECVR.DETAIL.LIST<1,I,1> = RCVR_REC<RC_PACKSLIPS,I>
      RECVR.DETAIL.LIST<1,I,2> = OCONV(RCVR_REC<RC_DATE,I>,RC_DATE.CNV)
      QTY.RECVR = RCVR_REC<RC_QTY1,I> + RCVR_REC<RC_QTY2,I> + RCVR_REC<RC_QTY3,I> + RCVR_REC<RC_WO_QTY,I> + 0
      RECVR.DETAIL.LIST<1,I,3> =  QTY.RECVR
      RECVR.DETAIL.LIST<1,I,4> = RCVR_REC<RC_LOT_ID,I>
      RECVR.DETAIL.LIST<1,I,7> = 'Remove'
      *
      * NOW LOOK FOR AP_INVOICE
      *
      FOR AI = 1 TO LIST.CT
         AP_ID = IDLIST<AI,1>
         INVOICE_DATE = ''
         INVOICE_ID = ''
         CALL GET.RECORD("AP_INVOICE",C.AP_INVOICE,AP_ID,AP_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
         IF AP_REC = '' THEN
            LOG.OPTS = "DISPLAY"
            ERROR_NBR = ERR_SYS
            ERROR_MSG = 'AP_INVOICE record found with select but cannot be read: ':AP_ID
            CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)

         END ELSE
            *
            * LOOK FOR THIS RECEIPT PACKLIST ON AP RECORD
            *
            RC.PCKLST = AP_REC<AP_PACKLIST_ID>
            LOCATE RCVR_REC<RC_PACKSLIPS,I> IN RC.PCKLST<1,1> SETTING IDX THEN
               RECVR.DETAIL.LIST<1,I,5> = OCONV(AP_REC<AP_INV_DATE>,AP_INV_DATE.CNV)
               RECVR.DETAIL.LIST<1,I,6> = FIELD(AP_ID,"*",2)  ;* INVOICE NUMBER
               EXIT
            END
         END
      NEXT AI
      *
   NEXT I
END
RETURN
END
