SUBROUTINE WO.STATUS.DIALOG(CALLER_WO_ID,CALLER_RETURN_RESULT,GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: WO.STATUS.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 07/6/2015
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
* CALLER_WO_ID WORK ORDER TO VIEW
**CALLER_RETURN_RESULT - NOT USED AT THIS TIME
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* DIALOG IS CALLED TO VIEW WORK ORDER STATUS
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES NXT.WO.STATUS.DEF
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES WC.H
$INCLUDE NXT.INCLUDES WO.H
$INCLUDE NXT.INCLUDES WRT.H

$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "WO.STATUS.DIALOG"
GUIAPP = "WO.STATUS"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "WO.STATUS"  ;* crease dialog startup time.
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'WO.STATUS.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'WO.STATUS.DIALOG' ELSE
   CALL ATGUIERROR(3,'WO.STATUS.DIALOG','',0,GRFATAL,"'WO.STATUS.DIALOG' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
PROCESS.STEP.SELECTED = 0    ;* PROCESSES STEP SELECTED
GET_REC_MSG_LIST = ''
MSG_LIST = ''
*
DIM SEQ.ARRAY(1,1)           ;* PRE CREATE SEQ INFORMATION ARRAY FOR CALLS TO WO.GRDRT.UPDATE
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('WO.STATUS','WO.STATUS','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
* GET THE WORK ORDER
*
CALL GET.RECORD("WO",C.WO,CALLER_WO_ID,WO_REC,@FALSE,ERROR.STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF WO_REC = '' THEN
   *CALLED WITH INVALID WORK ORDER ID, REPORT ERROR
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "WO.STATUS.DIALOG CALLED WITH INVALID WORK ORDER ID: ": CALLER_WO_ID
   CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)

   * AND RETURN TO CALLER
   GOSUB GUI.WO.STATUS.WO.STATUS.CLOSE;RETURN
END
*
* LOAD CONTROLS THEN ENABLE THE FRAMES
*
GOSUB LOAD.WO.CTRLS
*
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='WO.STATUS'
         BEGIN CASE
            CASE GUIFRM='WO.STATUS'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.WO.STATUS.WO.STATUS.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTDETAIL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.STATUS.WO.STATUS.BTNRTDETAIL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTPRT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.STATUS.WO.STATUS.BTNRTPRT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='GRDRT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.STATUS.WO.STATUS.GRDRT.CLICK;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.STATUS.WO.STATUS.BTNRTDETAIL.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
   CURR_SEQ = SEQ.ARRAY(PROCESS.STEP.SELECTED,SQI_ID)
   *
   IF  CURR_SEQ = '' THEN
      PRMPT = 'This Routing Sequence is Undefined,':@SVM:'Cannot Modify'
      CAPTION = "WO.STATUS.DIALOG"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
   END ELSE

      *
      WR_ID = CALLER_WO_ID:"*":CURR_SEQ
      CALL GET.RECORD("WR",C.WR,WR_ID,WR_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      IF ERROR_STATUS = ERR_NOF THEN
         LOG.OPTS = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG =  ERR_MESSAGE(ERR_SYS):' WR: ': WR_ID : ' Not on file but in Seq List!'
         CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      END ELSE
         *
         * CALL THE ROUTING SEQ EDITOR FORM
         *
         PRMPT = WR_REC<WRT_DESC>
         CONVERT @VM TO @SVM IN PRMPT
         CAPTION = "Seq Description"
         STYLE   = 0  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         *
      END
   END

END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.WO.STATUS.WO.STATUS.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.STATUS.WO.STATUS.BTNRTPRT.CLICK: *
*
* GET SELECTED REPORT TYPE:
* EQU WO_RT_CSV_REPORT TO "CSV"
* EQU WO_RT_DFLT_REPORT TO "DFLT"
* EQU WO_RT_CSTM1_REPORT TO "CSTM1"
* EQU WO_RT_CSTM2_REPORT TO "CSTM2"
CALL ATGUIGETPROP(GUIAPP,GUIFRM, "OPTWOPRT", GPVALUE, 0, 0,RPT.IDX, GUIERRORS, GUISTATE)
BEGIN CASE
   CASE RPT.IDX  = 1
      REPORT.TYPE = WO_RT_DFLT_REPORT
   CASE RPT.IDX  = 2
      REPORT.TYPE = WO_RT_CSV_REPORT
   CASE RPT.IDX  = 3
      REPORT.TYPE = WO_RT_CSTM1_REPORT
   CASE RPT.IDX  = 4
      REPORT.TYPE = WO_RT_CSTM2_REPORT
   CASE  1
      REPORT.TYPE = WO_RT_DFLT_REPORT
END CASE
*
CALL WRT.ROUTING.PRINT(REPORT.TYPE,C.WR,CALLER_WO_ID,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.STATUS.WO.STATUS.GRDRT.CLICK: *
* COUNT ROWS (VIA SEQ.ARRAY DATA)
ROWS = INMAT(SEQ.ARRAY)
IF PROCESS.STEP.SELECTED > 0 THEN
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
END
PROCESS.STEP.SELECTED = GUIARGS<1,2> ;* ROW NUMBER
* ENSURE THAT WE DONT TRY TO SELECT A ROW PAST THE DEFINED ROWS
IF PROCESS.STEP.SELECTED > ROWS<1,1> THEN
   PROCESS.STEP.SELECTED =  ROWS<1,1>
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPROW,"","",PROCESS.STEP.SELECTED,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
END
CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRGRAY,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
******************************************************************************************
LOAD.WO.CTRLS:
*
* routine LOADS WORK ORDER controls
*
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CI = 1
CTRLIDS<CI> = "TXTSTARTDATE"
PROPS<CI>   = GPVALUE
IF WO_REC<WO_START_DATE> THEN
   VALUES<CI>  = OCONV(WO_REC<WO_START_DATE>,WO_START_DATE.CNV)
END ELSE
   VALUES<CI>  = ''
END
*
CI = 2
CTRLIDS<CI> = "TXTDUEDATE"
PROPS<CI>   = GPVALUE
IF WO_REC<WO_DUE_DATE> THEN
   VALUES<CI>  = OCONV(WO_REC<WO_DUE_DATE>,WO_DUE_DATE.CNV)
END ELSE
   VALUES<CI>  = ''
END
*
CI = 3
CTRLIDS<CI> = "TXTACTSTART"
PROPS<CI>   = GPVALUE
IF WO_REC<WO_ACT_START> THEN
   VALUES<CI>  = OCONV(WO_REC<WO_ACT_START>,WO_ACT_START.CNV)
END ELSE
   VALUES<CI>  = ''
END
*
CI = 4
CTRLIDS<CI> = "TXTACTEND"
PROPS<CI>   = GPVALUE
IF WO_REC<WO_ACT_END> THEN
   VALUES<CI>  = OCONV(WO_REC<WO_ACT_END>,WO_ACT_END.CNV)
END ELSE
   VALUES<CI>  = ''
END
*
CI = 5
CTRLIDS<CI> = "LBLRELV"   ;* release date not rev level!
PROPS<CI>   = GPVALUE
IF WO_REC<WO_REL_DATE> THEN
   VALUES<CI>  = OCONV(WO_REC<WO_REL_DATE>,WO_REL_DATE.CNV)
END ELSE
   VALUES<CI>  = ''
END
*
CI = 6
CTRLIDS<CI> = "TXTQTY"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_QTY_TO_MFG>
*
CI = 7
CTRLIDS<CI> = "LBLWOENGIDV"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_ENG_ID>
*
CI = 8
CTRLIDS<CI> = "LBLWOV"
PROPS<CI>   = GPVALUE
VALUES<CI>  = CALLER_WO_ID
*
CI = 9
CTRLIDS<CI> = "LBLPNV"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_PARTNBR>
*
CI = 10
CTRLIDS<CI> = "TXTDESC"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_PT_DESC>
*
CI = 11
CTRLIDS<CI> = "TXTDRAW"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_PT_DRAWING>
*
CI = 12
CTRLIDS<CI> = "LBLWOSTATUSV"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_STATUS>
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
*
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* NOW LOAD THE SEQ GRID WITH THE WORK ORDER ROUTING SEQUENCES
*
OPTS = 0
CALL  WO.GRDRT.UPDATE(CALLER_WO_ID, MAT SEQ.ARRAY,WR.COUNT,OPTS,"GRDRT",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
*
RETURN
*
END
