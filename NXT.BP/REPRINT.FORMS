SUBROUTINE REPRINT.FORMS(CALLER_OP_ID,INV_PRINTER,PCK_PRINTER,GUIERRORS,GUISTATE)
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: REPRINT.FORMS
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2007
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
* CALLER_OP_ID = PASSED CALLER ORDER PARENT ID TO REPRINT FORMS FOR OR NULL
*                (FOR USER TO SUPPLY)
* INV_PRINTER - INVOICE PRINTER UNIT NUMBER
* PCK_PRINTER - PACKSLIP PRINTER UNIT NUMBER
* FILES:
*
*
* DESIGN DESCRIPTION:
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES CUSTOMERS.H
$INCLUDE NXT.INCLUDES ORDER_PARENT.H
$INCLUDE NXT.INCLUDES ORDER_CHILD.H
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES SALES.H
$INCLUDE NXT.INCLUDES AR.H
*
$INCLUDE GUIBP ATGUIEQUATES
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
  CALL ATGUIERROR(3,'REPRINT.FORMS','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
  RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'REPRINT.FORMS' ELSE
  CALL ATGUIERROR(3,'REPRINT.FORMS','',0,GRFATAL,"'REPRINT.FORMS' is not on file.",GUIERRORS)
  RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
  CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('REPRINT','REPRINT','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
*
* COMPANY RECORD
*
GET_REC_MSG_LIST = ''
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"COMPANY_RECORD",COMPANY_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF COMPANY_REC = '' THEN
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "Missing COMPANY_RECORD from SYSTEM_FILE"
  CALL LOG.ERROR(LOG.OPTS,"REPRINT.FORMS", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  GOSUB GUI.REPRINT.REPRINT.CLOSE;GUIEVT=0
  RETURN
END
*
*
CALL PACKSLIP.TEMPLATE(PACKFM)  ;* GET PACKSLIP FORM TEMPLATE
CALL INVOICE.TEMPLATE(INVFM)  ;* GET PACKSLIP FORM TEMPLATE
CALL CERT.TEMPLATE(CERTFM)  ;* GET PACKSLIP FORM TEMPLAT
*
* IF CALLER PASSED AN ORDER ID THEN FAKE THE ENTRY
IF CALLER_OP_ID # '' THEN
  GUIAPP='REPRINT'
  GUIFRM='REPRINT'
  GUIARGS = ''
  GUIARGS<2> = CALLER_OP_ID
  GOSUB GUI.REPRINT.REPRINT.TXT1ORDVAL.VALIDATE
END
*
CREATE.PDF = @FALSE
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
  CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN RETURN
  IF GUIEVT EQ GEQUIT THEN
    GUI.DLG.EXIT = 1
  END ELSE
    GUIAPP=OCONV(GUIAPP,'MCU')
    GUIFRM=OCONV(GUIFRM,'MCU')
    GUICTL=OCONV(GUICTL,'MCU')
    GOSUB GUI.DECODE.EVENT
  END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
  GUI.APP.LIST = ''
  CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
  IF GUI.APP.LIST EQ '' THEN
    * Quit event fired after last GUI object is deleted - discard it
    CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
    * We could call ATGUISHUTDOWN here if we wanted, but there's no
    * harm just leaving the GUI environment initialized, in case we
    * want to use it again...
  END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
  * Add your code here...
END ELSE
  * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
  BEGIN CASE
    CASE GUIAPP='REPRINT'
      BEGIN CASE
        CASE GUIFRM='REPRINT'
          BEGIN CASE
            CASE GUICTL=''
              BEGIN CASE
                CASE GUIEVT=GECLOSE
                  GOSUB GUI.REPRINT.REPRINT.CLOSE;GUIEVT=0
              END CASE
            CASE GUICTL='BTNCANCEL'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.REPRINT.REPRINT.BTNCANCEL.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNCERT'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.REPRINT.REPRINT.BTNCERT.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNINVOICE'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.REPRINT.REPRINT.BTNINVOICE.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNPACKSLIP'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.REPRINT.REPRINT.BTNPACKSLIP.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='CHKPDF'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.REPRINT.REPRINT.CHKPDF.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='LSTINV'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.REPRINT.REPRINT.LSTINV.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='TXT1ORDVAL'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.REPRINT.REPRINT.TXT1ORDVAL.VALIDATE;GUIEVT=0
              END CASE
          END CASE
      END CASE
  END CASE
  IF GUIEVT THEN
    * Unhandled event - may be dynamic
    GOSUB GUI.DYNAMIC.EVENTS
  END
END ELSE
  GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.REPRINT.REPRINT.BTNCERT.CLICK: *
*
* PRINT THE CERT
*
CALL GET.RECORD("CERTS",C.CERTS,CT.ID,CT_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF ERROR_STATUS # '' THEN
  *
  * CANNOT GET SALES RECORD, STOP INVOICING
  *
  PRMPT = "Unable to access CERT record ":CT.ID:" reason ":ERROR_STATUS
  CAPTION = "Reprint Forms"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE

  CALL CERT.FORM(CT_REC,CT.ID,CERTFM)
  IF  CREATE.PDF OR (PCK_PRINTER < 1)  THEN
    PDF.NAME = 'CERT-':CT.ID:'.PDF'
    DISPLAY.ON.CREATION = @TRUE
    CALL PCL.TO.PDF(CERTFM,PDF.NAME,DISPLAY.ON.CREATION,GUIERRORS,GUISTATE)
  END ELSE
    PRINT ON PCK_PRINTER CERTFM
    PRINTER CLOSE ON PCK_PRINTER
  END

END
RETURN
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.REPRINT.REPRINT.CHKPDF.CLICK: *
CREATE.PDF = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.REPRINT.REPRINT.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
  GOSUB GUI.DIALOG.RETURN
  CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
  GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.REPRINT.REPRINT.BTNCANCEL.CLICK: *
GOSUB GUI.REPRINT.REPRINT.CLOSE;GUIEVT=0
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.REPRINT.REPRINT.BTNINVOICE.CLICK: *
*
* PRINT THE PACKSLIP
*
CALL GET.RECORD("AR",C.AR,INVOICE.ID,AR_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF ERROR_STATUS # '' THEN
  *
  * CANNOT GET SALES RECORD, STOP INVOICING
  *
  PRMPT = "Unable to access AR record ":INVOICE.ID:" reason ":ERROR_STATUS
  CAPTION = "Reprint Forms"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
  CALL INVOICE.FORM(INVOICE.ID,AR_REC,INVFM)
  INVFM1 = INVFM:ESC:'*p1000x3050Y':COMPANY_REC<COMP_NAME>:' Copy':ESC:'*p0x0Y'

  IF  CREATE.PDF OR (INV_PRINTER < 1) THEN
    PDF.NAME = 'INVOICE-':INVOICE.ID:'.PDF'
    DISPLAY.ON.CREATION = @TRUE
    CALL PCL.TO.PDF(INVFM1,PDF.NAME,DISPLAY.ON.CREATION,GUIERRORS,GUISTATE)
  END ELSE
    PRINT ON INV_PRINTER INVFM1
    PRINTER CLOSE ON INV_PRINTER
  END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*-->BEGIN EVENT HANDLER<--*
GUI.REPRINT.REPRINT.BTNPACKSLIP.CLICK: *
*
* PRINT THE PACKSLIP
*
CALL GET.RECORD("SALES",C.SALES,PACK.ID,SA_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF ERROR_STATUS # '' THEN
  *
  * CANNOT GET SALES RECORD, STOP INVOICING
  *
  PRMPT = "Unable to access sales record ":PACK.ID:" reason ":ERROR_STATUS
  CAPTION = "Reprint Forms"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE

  CALL PACKSLIP.FORM(SA_REC,PACK.ID,PACKFM)
  PACKFM1 = PACKFM:ESC:'*p1000x3050Y':COMPANY_REC<COMP_NAME>:' Copy':ESC:'*p0x0Y'
  IF  CREATE.PDF  OR (PCK_PRINTER < 1)  THEN
    PDF.NAME = 'PACKLIST-':PACK.ID:'.PDF'
    DISPLAY.ON.CREATION = @TRUE
    CALL PCL.TO.PDF(PACKFM1,PDF.NAME,DISPLAY.ON.CREATION,GUIERRORS,GUISTATE)

  END ELSE
    PRINT ON PCK_PRINTER PACKFM1
    PRINTER CLOSE ON PCK_PRINTER
  END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.REPRINT.REPRINT.LSTINV.CLICK: *
PRINT.INV = @FALSE
PRINT.PACK= @FALSE
*
* USER CLICK ON AN ORDER TO REPRINT INFO FOR
ROW = GUIARGS<1>   ;* ROW IN LIST CLICKED
IF SALES.DETAIL.LIST<1,ROW,1> # '' THEN
  *
  IF  SALES.DETAIL.LIST<1,ROW,4> # "" THEN  ;* PACKSLIP ID
    PACK.ID = SALES.DETAIL.LIST<1,ROW,4>
    CT.ID = "C":PACK.ID"8'0'R"   ;* re CREATE CERT ID
    PRINT.PACK = @TRUE
  END
  *
  IF NX_AR_ACTIVE THEN
    IF  SALES.DETAIL.LIST<1,ROW,5> # "" THEN  ;* INVOICE ID
      INVOICE.ID = SALES.DETAIL.LIST<1,ROW,5>
      PRINT.INV = @TRUE
    END
  END

  IF PRINT.INV OR PRINT.PACK THEN
    CTRLIDS  = ""
    PROPS    = ""
    VALUES   = ""

    IF PRINT.INV THEN
      CTRLIDS<-1>  = "BTNINVOICE"
      PROPS<-1>    = GPENABLED
      VALUES<-1>   = 1
      *
      CTRLIDS<-1>  = "BTNINVOICE"
      PROPS<-1>    = GPCAPTION
      VALUES<-1>   = "Print Inovoice":@VM:INVOICE.ID
    END ELSE
      CTRLIDS<-1>  = "BTNINVOICE"
      PROPS<-1>    = GPENABLED
      VALUES<-1>   = 0
      *
      CTRLIDS<-1>  = "BTNINVOICE"
      PROPS<-1>    = GPCAPTION
      VALUES<-1>   = "Print Inovoice"
    END
    *
    IF PRINT.PACK THEN
      CTRLIDS<-1>  = "BTNPACKSLIP"
      PROPS<-1>    = GPENABLED
      VALUES<-1>   = 1
      *
      CTRLIDS<-1>  = "BTNCERT"
      PROPS<-1>    = GPENABLED
      VALUES<-1>   = 1
      *
      CTRLIDS<-1>  = "BTNPACKSLIP"
      PROPS<-1>    = GPCAPTION
      VALUES<-1>   = "Print Packslip":@VM:PACK.ID
      *
      CTRLIDS<-1>  = "BTNCERT"
      PROPS<-1>    = GPCAPTION
      VALUES<-1>   = "Print Cert":@VM:CT.ID
    END ELSE
      CTRLIDS<-1>  = "BTNPACKSLIP"
      PROPS<-1>    = GPENABLED
      VALUES<-1>   = 0
      *
      CTRLIDS<-1>  = "BTNCERT"
      PROPS<-1>    = GPENABLED
      VALUES<-1>   = 0
      *
      CTRLIDS<-1>  = "BTNPACKSLIP"
      PROPS<-1>    = GPCAPTION
      VALUES<-1>   = "Print Packslip"
      *
      CTRLIDS<-1>  = "BTNCERT"
      PROPS<-1>    = GPCAPTION
      VALUES<-1>   = "Print Cert"
    END
    *
    CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
    IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
  END

END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.REPRINT.REPRINT.TXT1ORDVAL.VALIDATE: *
* USER ENTERED SALES ORDER NUMBER
*
*  GET THE ORDER RECORD
*  GET THE CUSTOMER RECORD
*  GET THE SHIPTO RECORD
*  LOAD THE FORM
OP_ID = GUIARGS<2>
*
CALL GET.ORDER.PARENT(OP_ID,OP_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
BEGIN CASE
  CASE ERROR_STATUS = ERR_NOF  ;* USER ENTERED NON - EXISTENT ORDER #
    *
    * UNLOCK, REPORT AND EXIT
    PRMPT = "Order number: ":OP_ID:" is not on file"
    CAPTION = "Reprint Forms"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

  CASE 1
    GOSUB SEL.SALES
    IF SALES.DETAIL.LIST # "" THEN
      GOSUB LOAD.SALES
    END
END CASE
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
LOG.OPTS  = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"REPRINT.FORMS", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
************************************************************
* $PAGE$
************************************************************
LOAD.SALES: *
*
* ROUTINE LOADS SALES SELECTION LIST INTO GRDLINES AND ENABLES IT
*
IF SALES.DETAIL.LIST # '' THEN
  CTRLIDS = ""
  PROPS   = ""
  VALUES  = ""
  *
  CTRLIDS<-1> = "TXT1ORDVAL"
  PROPS<-1>   = GPVALUE
  VALUES<-1>  = OP_ID
  *
  CTRLIDS<-1> = "LSTINV"
  PROPS<-1>   = GPITEMS
  VALUES<-1>  = SALES.DETAIL.LIST
  *
  CTRLIDS<-1> = "LSTINV"
  PROPS<-1>   = GPENABLED
  VALUES<-1>  = 1
  *
  CTRLIDS<-1> = "LBLBILLCUST"
  PROPS<-1>   = GPVALUE
  VALUES<-1>  = OP_REC<OP_CUST>
  *
  CTRLIDS<-1> = "LBL1BILLNAMEVAL"
  PROPS<-1>   = GPVALUE
  VALUES<-1>  = CM_REC<CM_NAME>
  *
  CTRLIDS<-1> = "LBL1BILLADDR1VAL"
  PROPS<-1>   = GPVALUE
  VALUES<-1>  = CM_REC<CM_ADDR>
  *
  CTRLIDS<-1> = "LBL1BILLADDR2VAL"
  PROPS<-1>   = GPVALUE
  VALUES<-1>  = CM_REC<CM_ADDR2>
  *
  CTRLIDS<-1> = "LBL1BILLCITYVAL"
  PROPS<-1>   = GPVALUE
  VALUES<-1>  = CM_REC<CM_CITY>
  *
  CTRLIDS<-1> = "LBL1BILLSTVAL"
  PROPS<-1>   = GPVALUE
  VALUES<-1>  = CM_REC<CM_STATE>
  *
  CTRLIDS<-1> = "LBL1BILLZIPVAL"
  PROPS<-1>   = GPVALUE
  VALUES<-1>  = CM_REC<CM_ZIP>
  *
  CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
RETURN
************************************************************
* $PAGE$
************************************************************
SEL.SALES:
*
* SELECT SALES RECORDS FOR PASSED ORDER CHILD NOT INVOICED (SA_INVOICE_ID = "")
* ON ENTRY:
* OP_ID = ORDER_PARENT TO REPRINT FORMS FOR
* OP_REC = ORDER_PARENT RECORD
* ON EXIT
* SALES.DETAIL.LIST POPULATED
SALES.DETAIL.LIST = ""
MSG_LIST = ""
IDX = 0
*
CM_ID = OP_REC<OP_CUST>
CALL GET.RECORD("CUSTOMERS",C.CUSTOMERS,CM_ID,CM_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF ERROR_STATUS = '' THEN
  SLIST = 'SSELECT SALES WITH SA_OP_ID = "':OP_ID:'" TO 2'
  EXECUTE SLIST CAPTURING DMMY.OUT
  *
  BEGIN CASE
      *
    CASE @SELECTED LT 1
      PRMPT = "No sales found for order: ":OP_ID
      CAPTION = "Reprint Forms"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
    CASE 1
      READLIST IDLIST FROM 2 THEN
        LIST.CT = DCOUNT(IDLIST,@AM)
        *
        * GET THE SALES RECORDS, LOCK AND READ (ORDER PARENT & CHILD ALREADY LOCKED)
        *
        FOR SI = 1 TO LIST.CT
          SA_ID = IDLIST<SI,1>
          CALL GET.RECORD("SALES",C.SALES,SA_ID,SA_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
          IF ERROR_STATUS # '' THEN
            *
            * CANNOT GET SALES RECORD, STOP INVOICING
            *
            PRMPT = "Unable to access sales record ":SA_ID:" reason ":ERROR_STATUS
            CAPTION = "Reprint Forms"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            GOTO SEL.SALES.999
          END ELSE
            IDX += 1
            SALES.DETAIL.LIST<1,IDX,1> = SA_REC<SA_PART_NBR> ;* PART NUMBER ON SALES RECORD
            DEL.DATE = SA_REC<SA_DEL_DATE>
            IF DEL.DATE = '' THEN DEL.DATE = DATE()   ;* FOR EXTRA CHARGES, NO DEL DATE
            SALES.DETAIL.LIST<1,IDX,2> = OCONV(DEL.DATE,SA_DEL_DATE.CNV) ;* DATE SHIPPED
            SALES.DETAIL.LIST<1,IDX,3> = SA_REC<SA_DEL_QTY> ;*QTY SHIPPED
            SALES.DETAIL.LIST<1,IDX,4> = SA_ID  ;* PACKSLIP ID
            IF NX_AR_ACTIVE THEN
              SALES.DETAIL.LIST<1,IDX,5> = SA_REC<SA_INVOICE_ID> ;*INVOICE ID
            END ELSE
              SALES.DETAIL.LIST<1,IDX,5> = "N/A"
            END
          END
        NEXT SI
        SALES.DETAIL.COUNT = IDX   ;* SET ITEMS IN SALES.DETAIL.LIST
      END
  END CASE
END ELSE
  PRMPT = "Customer: ":CM_ID:" is missing, on order number: ":OP_ID:",  cannot proceed with invoicing"
  CAPTION = "Reprint Forms"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
SEL.SALES.999: *
RETURN
*
END
