SUBROUTINE GUI.SEARCH2 (F.NAME,USEARCH.FLD,USEARCH.STR,USORT,DISP.FLDS,MAX.LIST,START.LIST,LST.LNS,LST.IDS,LIST.CT,EMSG)
!
* SUBROUTINE NAME: GUI_SEARCH2
*  MOD OF GUI_SEARCH TO CORRECTLY POPULATE DROP DOWN LIST COLUMNS
*  NOTE DISP.FLDS ARE SPACE DELIMITED NOT COMMA AS IN GUI_SEARCH
*
*
* EQUATE:
*
*
* VARIABLES:
*
* F.NAME - FILE NAME TO SEACH ON
* USEARCH.FLD- NAMED ATTRIBUTE (ACCESS) TO SEARCH 
* USEARCH.STR- STRING TO SEARCH FOR
*            "*" FOR SELECT ALL RECORDS
*            "!string" FOR EXACT STRING MATCH
*            OTHERWISE USE "[string]" SEARCH FORMAT
* USORT<1>   - ATTRIBUTE TO SORT ON
* USORT<2>   - SORT ORDER OVER RIDE (BY-DSND)
* USORT<3>   - OPTIONAL ADDITIONAL FILTER CRITERIA (IE "WITH STATUS = "C")
*
* DISP.FLDS  - OPTIONAL ATRIBUTE NAME(S) TO DISPLAY
*             SEPARATED BY SPACES
* MAX.LIST  - MAX ENTRYS TO RETURN IN LIST
* START.LIST- ENTRY TO START LIST GENERATION AT
*             USE THIS VALUE TO "PAGE" THRU MORE THEN MAX.LIST ITEMS
*             ON EXIT NEXT VALUE TO DISPLAY
* LST.LNS   - LST.LNS<1,X,1> = REC.ID
*             LST.LNS<1,X,2> = DATA TEXT AS SPECIFIED BY DISP.FLDS
*             LST.LNS<1,X,3>   SETUP FOR CORRECT COLUMN DISPLAY IN DROPDOWN LIST
*                              ASSUMES FIRST COLUMN WILL ALWAYS BE ID
*                 .
*             LST.LNS<1,X,6> MAX OF 6 COLUMNS SETUP
* LST.IDS   - VM LIST OF F.NAME RECORD IDS
* LIST.CT   - NUMBER OF ITEMS IN LST.LNS AND LST.IDS
* EMSG<1>   - RETURNED ERROR MESSAGE OR NULL
* EMSG<2>   -  ERROR CODE FOR EMSG
*
* FILES:
*
*
* DESIGN DESCRIPTION:
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
**
********** PROGRAM EQUATES
**
**
*********** START OF PROGRAM
**
*
EMSG = ""
LST.LNS = ""
LST.IDS = ""
LIST.CT = 0
*
OPEN F.NAME TO F.BUFF ELSE
  EMSG = F.NAME :' - Is An Invalid File Name'
  EMSG<2> = ERR_SYS
  GOTO 9999
END
*
IF NOT(NUM(MAX.LIST)) THEN
  EMSG = "Invalid Max.List Value"
  EMSG<2> = ERR_SYS
  GOTO 9999
END
*
IF NOT(NUM(START.LIST)) THEN
  EMSG = "Invalid Start.List Value"
  EMSG<2> = ERR_SYS
  GOTO 9999
END
*
SEARCH.FLD = USEARCH.FLD
*
* Determine by clause and filter
*
BY_CLAUSE = " BY ":USORT<1>
IF USORT<2> # "" THEN BY_CLAUSE = " ":USORT<2>:" ":USORT<1>

*
* ADD IN FILTER
*
IF USORT<3> # "" THEN
  BY_CLAUSE := " ":USORT<3>
  IF SEARCH.FLD # "" THEN
    BY_CLAUSE := " AND "
  END
END


*
BEGIN CASE
  CASE USEARCH.STR = "*" AND USORT = ''
    SLIST = "SSELECT ":F.NAME
  CASE USEARCH.STR = "*" AND USORT # ''
    SLIST = "SSELECT ":F.NAME:BY_CLAUSE
  CASE USEARCH.STR[1,1] = "!" AND USORT = ''
    SEARCH.STR = USEARCH.STR[2,99]
    SLIST = "SSELECT ":F.NAME:" WITH ":SEARCH.FLD:' = "':SEARCH.STR:'"'
  CASE USEARCH.STR[1,1] = "!" AND USORT # ''
    SEARCH.STR = USEARCH.STR[2,99]
    SLIST = "SSELECT ":F.NAME:BY_CLAUSE:" WITH ":SEARCH.FLD:' = "':SEARCH.STR:'"'
  CASE 1
    IF USORT = '' THEN
      SEARCH.STR = "...'":USEARCH.STR:"'..."
      SLIST = "SSELECT ":F.NAME:" WITH ":SEARCH.FLD:' LIKE NO.CASE "':SEARCH.STR:'"'
    END ELSE
      SEARCH.STR = "...'":USEARCH.STR:"'..."
      SLIST = "SSELECT ":F.NAME:BY_CLAUSE:" WITH ":SEARCH.FLD:' LIKE NO.CASE "':SEARCH.STR:'"'
    END
END CASE
*
SLIST := ' TO 2'
*
* DEBUG OUTPUT
*CRT SLIST
*
EXECUTE SLIST CAPTURING DMMY.OUT
*
BEGIN CASE
*
  CASE @SELECTED LT 1
    EMSG = 'No Items Found'
    EMSG<2> = ERR_WARN
    LIST.CT = 0
*
  CASE 1
*
*     CREATE THE LIST OF ITEM IDS
*
    READLIST IDLIST FROM 2 THEN
      LIST.CT = DCOUNT(IDLIST,@AM)
      GOSUB LST.LN.GET
    END

*
END CASE
*
9999
*
RETURN
!
* LST.LN.GET
* ROUTINE TAKES ITEM IDS IN IMLIST AND CRTEATES LST.LNS
!
LST.LN.GET:
*
* Determine number of columns
FLD.CNT = DCOUNT(DISP.FLDS,' ')

*
LST.LNS = ''
LST.IDS = ''
ID.PTR  = 0
NEED.BACK = @FALSE  ;* DO WE NEED TO BE ABLE TO GO BACK TO THE TOP?
*
* BUILD SELECTION LIST FOR DATA TO DISPLAY
* HOW MANY SHOULD WE RETURN? AND DEFINE BOUNDRIES
* LIST.CT = # OF ITEMS RETURNED BY SELECT
BEGIN CASE
  CASE START.LIST = 1           ;* FIRST TIME HERE, IF WE HAVE MORE ITEMS THEN MAX.LIST, RETURN
*                              * MAX LIST ITEMS, ELSE RETURN ALL OF THE ITEMS FOUND
    IF LIST.CT GT MAX.LIST THEN
      END.LIST = START.LIST + MAX.LIST - 1
      NEED.MORE = @TRUE
      LIST.SIZE = MAX.LIST
    END ELSE
      END.LIST = LIST.CT
      NEED.MORE = @FALSE
      LIST.SIZE = LIST.CT
    END
*
  CASE (MAX.LIST + START.LIST - 1) GE LIST.CT    ;* NOT FIRST TIME HERE, CAN WE RETURN ALL REMAINING ITEMS?
    END.LIST = LIST.CT                       ;* YES, SEND BALANCE
    NEED.MORE = @FALSE
    NEED.BACK = @TRUE
    LIST.SIZE = LIST.CT - START.LIST + 1
*
  CASE 1                                     ;* NOT FIRST TIME HERE, CANNOT FIT ALL REMAINING ITEMS POPULATE LIST WITH NEXT BATCH
    END.LIST = START.LIST + MAX.LIST - 1
    NEED.MORE = @TRUE
    LIST.SIZE = MAX.LIST
END CASE
*
* CREATE THE SELECT LIST TO USE
LST.IDS = ''
FOR I = START.LIST TO END.LIST
  LST.IDS<-1> = IDLIST<I>
NEXT I
*
* NOW CREATE A NEW LIST
SELECT LST.IDS TO 0
*
* AND GET IT
SLIST = "LIST ":F.NAME:' ':DISP.FLDS:' DELIMITER "^253" HDR.SUP COL.SUP ID.SUP NO.PAGE COUNT.SUP'
EXECUTE SLIST CAPTURING XOUT
*
LIST.CT = DCOUNT(XOUT,@AM)
FOR I = 1 TO LIST.SIZE
  LST.LNS<1,I,1> = LST.IDS<I>
  IF FLD.CNT GE 1 THEN LST.LNS<1,I,2> = XOUT<I,1>
  IF FLD.CNT GE 2 THEN LST.LNS<1,I,3> = XOUT<I,2>
  IF FLD.CNT GE 3 THEN LST.LNS<1,I,4> = XOUT<I,3>
  IF FLD.CNT GE 4 THEN LST.LNS<1,I,5> = XOUT<I,4>
  IF FLD.CNT GE 5 THEN LST.LNS<1,I,6> = XOUT<I,5>
  IF FLD.CNT GE 6 THEN LST.LNS<1,I,7> = XOUT<I,6>
NEXT I
*
IF NEED.MORE THEN
  LIST.CT = MAX.LIST + 1
  LST.LNS<1,LIST.CT,1> = "$MORE$"
  LST.LNS<1,LIST.CT,2> = "Click For More"
  START.LIST = END.LIST + 1   ;* THIS IS THE ONE WE WANT TO SHOW NEXT
END ELSE
  IF NEED.BACK THEN
    LIST.CT = LIST.SIZE + 1
    LST.LNS<1,LIST.CT,1> = "$TOP$"
    LST.LNS<1,LIST.CT,2> = "Click For Top"
    START.LIST = 1  ;* IF WE ARE ALL THE WHY THROUGH, START OVER NEXT TIME
  END
END
*
CONVERT @AM TO @VM IN LST.IDS
*
LST.999: *
*
RETURN
END
