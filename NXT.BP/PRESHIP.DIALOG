SUBROUTINE PRESHIP.DIALOG(OC_ID,OC_REC,BAL.DUE,PRESHIP.IDX,USR.CANCEL,GUIERRORS,GUISTATE)
************************************************************
*
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: PRESHIP.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2007
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
* ON ENTRY

* OC_ID   - ORDER CHILD ID
* OC_REC  - ORDER CHILD RECORD
* BAL.DUE - BALANCE DUE ON ORDER CHILD
* PRESHIP.IDX - POINTER INTO ORDER CHILD SCHD FIELDS FOR FIRST SCHD ON PRESHIP
* ON EXIT:
* VALUE MARKED LIST CREATED FOR SALES RECORD, DETAIL HOW DEL.QTY APPLIED OVER CHILD SCHEDULE ITEMS
* APPLIED.SCHD.LIST
* APPLIED.QTY.LIST
* APPLIED.DUE.DATE.LIST
* APPLIED.DEL.DATE.LIST
* APPLIED.PRICE.LIST
* APPLIED.LOT.LIST
*

*
* FILES:
*
*
* DESIGN DESCRIPTION:
* APPLY DEL.QTY OVER SCHD ITEMS ON ORDER_CHILD RECORD
*
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES ORDER_CHILD.H
$INCLUDE NXT.INCLUDES SALES.H
$INCLUDE NXT.INCLUDES CERTS.H
*
$INCLUDE GUIBP ATGUIEQUATES
*
USR.CANCEL = @TRUE
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'PRESHIP','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'PRESHIP' ELSE
   CALL ATGUIERROR(3,'PRESHIP','',0,GRFATAL,"'PRESHIP' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('PRESHIP','PRESHIP','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*

*
CTRLIDS = "LBLDUEVAL"
PROPS   = GPVALUE
VALUES  = BAL.DUE
*
CALL ATGUISETPROPS('PRESHIP','PRESHIP',CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
* Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
* We could call ATGUISHUTDOWN here if we wanted, but there's no
* harm just leaving the GUI environment initialized, in case we
* want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
* Add your code here...
END ELSE
* Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='PRESHIP'
         BEGIN CASE
            CASE GUIFRM='PRESHIP'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.PRESHIP.PRESHIP.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCANCEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PRESHIP.PRESHIP.BTNCANCEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNSHIP'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PRESHIP.PRESHIP.BTNSHIP.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTSHPQTY'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PRESHIP.PRESHIP.TXTSHPQTY.VALIDATE;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
* Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.PRESHIP.PRESHIP.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PRESHIP.PRESHIP.BTNCANCEL.CLICK: *
GOSUB GUI.PRESHIP.PRESHIP.CLOSE;GUIEVT=0
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PRESHIP.PRESHIP.BTNSHIP.CLICK: *
SA_ID = OC_REC<OC_PACK_ID,PRESHIP.IDX>
CT_ID = OC_REC<OC_CERT_ID,PRESHIP.IDX>
MSG_LIST = ''
CALL GET.RECORD("SALES",C.SALES,SA_ID,SA_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF ERROR_STATUS = '' THEN
* APPLY QTY TO SCHD ITEMS
   CALL SHIP.APPLY.SHIPMENT(DEL.QTY,SA_ID,CT_ID,PRESHIP.IDX,OC_REC,APPLIED.SCHD.LIST,APPLIED.QTY.LIST,APPLIED.DUE.DATE.LIST)
* SAVE UPDATED ORDER_CHILD
   CALL WRITE.RECORD(OC_ID,OC_REC,C.ORDER_CHILD,@TRUE,ERROR_STATUS)
* UPDATE PRESHIP SALES RECORD
   MSG_LIST = ''
   CALL GET.RECORD("SALES",C.SALES,SA_ID,SA_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)

   SA_REC<SA_SCHD_ID>  = APPLIED.SCHD.LIST
   SA_REC<SA_DUE_DATE> = APPLIED.DUE.DATE.LIST
   SA_REC<SA_DUE_QTY>  = APPLIED.QTY.LIST
   SA_REC<SA_DEL_DATE> = DATE()
   SA_REC<SA_DEL_QTY>  = DEL.QTY
   SA_REC<SA_PRICE_EA> =  OC_REC<OC_PRICE_EA>
   SA_REC<SA_LOT_FLAG> =  OC_REC<OC_LOT_FLAG>
*
   SA_REC<SA_PACK_DATE> = DATE()  ;* ACTUAL SHIP DATE
   SA_REC<SA_BY_WHOM>   = @LOGNAME
*
   CALL WRITE.RECORD(SA_ID,SA_REC,C.SALES,@FALSE,ERROR_STATUS)
   USR.CANCEL = @FALSE
END ELSE
   BEGIN CASE
      CASE ERROR_STATUS = ERR_BUSY
         PRMPT = "Sales record: ":SA_ID:" Busy, try shipping later"
      CASE ERROR_STATUS = ERR_NOF
         PRMPT = "Sales record: ":SA_ID:" Not Found, see SysAdmin"
         RELEASE C.FILE.VAR(C.SALES), SA_ID
      CASE 1
         PRMPT = "Sales record: ":SA_ID:" access error: ":ERROR_STATUS
   END CASE
   CAPTION = "Shipping"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
END
GOSUB GUI.PRESHIP.PRESHIP.CLOSE;GUIEVT=0
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PRESHIP.PRESHIP.TXTSHPQTY.VALIDATE: *
DEL.QTY = GUIARGS<2>
BEGIN CASE
   CASE DEL.QTY LE 0
      PRMPT = "Shipping qty must be greater than 0"
      CAPTION = "Shipping"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   CASE DEL.QTY GT BAL.DUE
      PRMPT = "NOTE - shipping qty is greater than Balance Due"
      CAPTION = "Shipping"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"BTNSHIP",GPENABLED,0,0,1,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   CASE 1
*
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"BTNSHIP",GPENABLED,0,0,1,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END CASE
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS  = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"GUISUB.SHIP", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
*
END
