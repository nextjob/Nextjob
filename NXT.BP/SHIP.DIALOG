SUBROUTINE SHIP.DIALOG(GUIERRORS,GUISTATE)
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: SHIP.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 11/19/14
* UPDATED:
*
* MAINTENANCE RECORD:
* 11/19/14 - CONVERSION FROM GUISUB.SHIP TO SHIP.DIALOG
*
* EQUATE:
*
*
* VARIABLES:
*
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* USER ENTERS SALES ORDER TO SHIP
* USER SELECTS LINE ITEM TO SHIP
* USER ENTERS SHIP QTY
* PROGRAM CREATES SALES RECORD (BUT IS NOT MARKED INVOICE ! <- GUISUB.INV HANDLES)
* PROGRAM CUTS PACK SLIP FROM SALES RECORD (THIS IS ALSO HOW WE HANDLE REPRINTS!)
*
* THINGS TO FINSH
*   BTNSHIP.CLICK - UPDATE ORDER_CHILD
*                   HANDLE MULT PRICES ON SHIPMENT ???
*                   PRODUCE PACK SLIP AND CERT
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES CUSTOMERS.H
$INCLUDE NXT.INCLUDES SHIP_TO.H
$INCLUDE NXT.INCLUDES ORDER_PARENT.H
$INCLUDE NXT.INCLUDES ORDER_CHILD.H
$INCLUDE NXT.INCLUDES SALES.H
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES CERTS.H
*
$INCLUDE GUIBP ATGUIEQUATES
PROG_ID   = "SHIP.DIALOG"
GUIAPP    = 'SHIP'
GUIFRM    = 'SHIP'
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'SHIP','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'SHIP' ELSE
   CALL ATGUIERROR(3,'SHIP','',0,GRFATAL,"'SHIP' is not on file.",GUIERRORS)
   RETURN
END

*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN


* Add your equates here...
GET_REC_MSG_LIST = ''   ;* CUSTOM ERROR MSG LIST FOR GET.RECORD, USE DEFAULTS
*
* GET PACKSLIP PRINTER UNIT NUMBER
*
GET_REC_MSG_LIST = ''
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"NETWORK_PATH",NETWORK_PATH_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
NETWORK.PATH = OCONV(NETWORK_PATH_REC<1>,"MCU")
SERVER.PATH = OCONV(NETWORK_PATH_REC<2>,"MCU")
*
* USER RECORD
*
USER_RECORD_ID = "USER*":@LOGNAME
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,USER_RECORD_ID,USER_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF USER_REC # '' THEN
   *
   IF USER_REC<USER_PACKSLIP_PRINTER> = '' THEN
      PACKSLIP.PRINTER = 0  ;* SET TO DEFAULT PRINTER
      LOG.OPTS  = "DISPLAY"
      ERROR_NBR = ERR_SYS
      ERROR_MSG =  "Missing PACKSLIP_PRINTER from USER record in, SYSTEM_FILE"
      CALL LOG.ERROR(LOG.OPTS,"GUISUB.SHIP", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   END ELSE
      PACKSLIP.PRINTER = USER_REC<USER_PACKSLIP_PRINTER>
   END
END ELSE
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "Unknow User: ":@LOGNAME
   CALL LOG.ERROR(LOG.OPTS,"GUISUB.SHIP", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GOSUB GUI.SHIP.SHIP.CLOSE;GUIEVT=0
   RETURN
END

CALL PACKSLIP.TEMPLATE(PACKTEMPLATE)  ;* GET PACKSLIP FORM TEMPLATE
CALL CERT.TEMPLATE(CERTTEMPLATE)  ;* GET PACKSLIP FORM TEMPLATE
*
* GET TERMS DESCS
*TERMS.LIST = ''
*TERMS.IDX  = ''
*CALL LIST.LOAD(C.VALIDATION_FILE,"TERMS","2",'',TERMS.LIST,TERMS.IDX,LIST.COUNT,EMSG)
*
* DEFAULTS RECORD
*
GET_REC_MSG_LIST = ''
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"DEFAULTS",DEFAULTS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF DEFAULTS_REC = '' THEN
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "Missing DEFAULTS Record from SYSTEM_FILE"
   CALL LOG.ERROR(LOG.OPTS,"GUISUB.SHIP", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
END
*
* COMPANY RECORD
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"COMPANY_RECORD",COMPANY_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF COMPANY_REC = '' THEN
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "Missing COMPANY_RECORD from SYSTEM_FILE"
   CALL LOG.ERROR(LOG.OPTS,"GUISUB.SHIP", ERROR_NBR, ERROR_MSG, GUISTATE)
END
GOSUB CLEAR.BUFFERS     ;* INITIALIZE VARIABLES
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('SHIP','SHIP','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='SHIP'
         BEGIN CASE
            CASE GUIFRM='SHIP'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.SHIP.SHIP.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCANCEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.SHIP.SHIP.BTNCANCEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNSHIP'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.SHIP.SHIP.BTNSHIP.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LSTITEM'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.SHIP.SHIP.LSTITEM.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT1ORDVAL'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.SHIP.SHIP.TXT1ORDVAL.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTNOTES'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.SHIP.SHIP.TXTNOTES.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTSHPQTY'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.SHIP.SHIP.TXTSHPQTY.VALIDATE;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      IF GUIAPP='SHIP' THEN
         GOSUB GUI.DYNAMIC.EVENTS
         GUIEVT=0
      END
   END
END ELSE
   IF GUIAPP='SHIP' THEN
      GOSUB GUI.CUSTOM.EVENTS
      GUIEVT=0
   END
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.SHIP.SHIP.CLOSE: *
* Default form close event handler
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.SHIP.SHIP.BTNCANCEL.CLICK: *
IF OP_ID # '' THEN
   RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
END
IF OC_ID # '' THEN
   RELEASE C.FILE.VAR(C.ORDER_CHILD), OC_ID
END
*
GOSUB CLEAR.BUFFERS
*
GOSUB RESET.CTRLS
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.SHIP.SHIP.BTNSHIP.CLICK: *
* USER HIT THE SHIP BUTTON,
* FILL IN THE SALES RECORD,
* WRITE IT OUT
* UPDATE ORDER CHILD
* WRITE IT OUT
* RESET FOR THE NEXT SHIPMENT
* ON ENTRY DEL.QTY SET BY TXTSHPQTY.VALIDATE
*
BEGIN CASE
   CASE OC_REC<OC_CLOSE> = "C"
      PRMPT = "This item is marked Closed, reopen via Order Entry prior to Shipping"
      CAPTION = "Shipping"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

   CASE OC_REC<OC_HOLD>
      PRMPT = "Hold Shipments checked for this order, must clear prior to shipment"
      CAPTION = "Shipping"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   CASE 1
      CALL NXT.NEXTNBR("SALES",SA_ID,ERROR_STATUS,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      IF SA_ID # '' THEN
         * PROCESS CREATE SHIPMENT REQUEST
         * FILL IN THE SALES RECORD,
         * WRITE IT OUT
         * UPDATE ORDER CHILD
         * WRITE IT OUT
         * CREATE CERT RECORD
         * WRITE IT OUT  -- ALL DONE VIA SHIP.CREATE.SHIPMENT
         CALL SHIP.CREATE.SHIPMENT(SA_REC,CT_ID,CT_REC,DEL.QTY,NEXT.DEL.IDX,SCHD.NOTES,OC_ID,SA_ID,OP_REC,OC_REC,CM_REC,SHIPTO_REC)

         *
         * PRINT THE PACKSLIP
         *
         PACKFM = PACKTEMPLATE
         CALL PACKSLIP.FORM(SA_REC,SA_ID,PACKFM)
         PACKFM1 = PACKFM:ESC:'*p1000x3050Y':COMPANY_REC<COMP_NAME>:' Copy':ESC:'*p0x0Y'
         IF PACKSLIP.PRINTER > 0 THEN  ;* PDF PRINT?
            IF NX.PRINT.ENABLE THEN PRINT ON PACKSLIP.PRINTER PACKFM1
            IF NX.PRINT.ENABLE THEN PRINTER CLOSE ON PACKSLIP.PRINTER
            PACKFM1 = PACKFM:ESC:'*p1000x3050Y':'Customer Copy':ESC:'*p0x0Y'
            IF NX.PRINT.ENABLE THEN PRINT ON PACKSLIP.PRINTER PACKFM1
            IF NX.PRINT.ENABLE THEN PRINTER CLOSE ON PACKSLIP.PRINTER
         END ELSE
            PDF.NAME = 'PACKLIST-':SA_ID:'.PDF'
            DISPLAY.ON.CREATION = @TRUE
            CALL PCL.TO.PDF(PACKFM1,PDF.NAME,DISPLAY.ON.CREATION,GUIERRORS,GUISTATE)
         END
         *
         * PRINT THE CERT
         *
         IF DEFAULTS_REC<DFLT_PRINT_COFC> THEN
            CERTFM = CERTTEMPLATE
            CALL CERT.FORM(CT_REC,CT_ID,CERTFM)
            IF PACKSLIP.PRINTER > 0 THEN  ;* PDF PRINT?
               IF NX.PRINT.ENABLE THEN PRINT ON PACKSLIP.PRINTER CERTFM
               IF NX.PRINT.ENABLE THEN PRINTER CLOSE ON PACKSLIP.PRINTER
               IF NOT(NX.PRINT.ENABLE) THEN
                  PRMPT = "NX.PRINT.ENABLE set to False, No Documents Printed"
                  CAPTION = "Shipping"
                  STYLE   = 2  ;* !
                  BUTTONS = 0  ;* ok only
                  HELPID = ""
                  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
               END
            END ELSE
               PDF.NAME = 'CERT-':CT_ID:'.PDF'
               DISPLAY.ON.CREATION = @TRUE
               CALL PCL.TO.PDF(CERTFM,PDF.NAME,DISPLAY.ON.CREATION,GUIERRORS,GUISTATE)
            END
         END
         *
         * SEND AN EMAIL?
         *
         IF NX.EMAIL.SHIP.NOTIFICATION THEN
            GOSUB SEND.SHIPPING.EMAIL
         END
         *
         GOSUB GUI.SHIP.SHIP.BTNCANCEL.CLICK
         *
      END

END CASE
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.SHIP.SHIP.LSTITEM.CLICK: *
* VALID CHILD ID AT CLICK ROW?
TEST.ID = CHILD.LIST<1,GUIARGS<1>,1>
IF TEST.ID # '' THEN
   *
   IF OC_ID # '' THEN
      RELEASE C.FILE.VAR(C.ORDER_CHILD), OP_CHILD
   END
   OC_ID = TEST.ID
   *
   SAVE_OC_REC = '' ;* ORDER_CHILD ORIGINAL COPY SAVE
   OC_REC      = '' ;* ORDER_CHILD RECORD
   CALL GET.ORDER.CHILD(OC_ID,OC_REC,@TRUE,ERROR_STATUS,GUIERRORS,GUISTATE)
   SAVE_OC_REC = OC_REC
   *
   IF ERROR_STATUS = ERR_BUSY THEN ;* USER ENTERED ORDER IS LOCKED BY SOMEONE ELSE
      PRMPT = "Order Child ":OC_ID:" is busy, try later"
      CAPTION = "Shipping"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

   END ELSE
      *
      GOSUB LOAD.ID.CTRLS
      GOSUB CALC.BAL.DUE
      IF BAL.DUE > 0 THEN
         CTRLIDS = "TXTSHPQTY"
         PROPS   = GPENABLED
         VALUES  = 1
         *
         CTRLIDS<-1> = "TXTNOTES"
         PROPS<-1>   = GPENABLED
         VALUES<-1>  = 1
         *
         CTRLIDS<-1> = "TXT2NOTES"
         PROPS<-1>   = GPENABLED
         VALUES<-1>  = 1
         *
         CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         **
      END
   END
   *
END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.SHIP.SHIP.TXT1ORDVAL.VALIDATE: *
* USER ENTERED SALES ORDER NUMBER
*
*  GET THE ORDER RECORD
*  GET THE CUSTOMER RECORD
*  GET THE SHIPTO RECORD
*  LOAD THE FORM

GOSUB CLEAR.BUFFERS
OP_ID = GUIARGS<2>
*
CALL GET.ORDER.PARENT(OP_ID,OP_REC,@TRUE,ERROR_STATUS,GUIERRORS,GUISTATE)
BEGIN CASE
   CASE ERROR_STATUS = ERR_NOF  ;* USER ENTERED NON - EXISTENT ORDER #
      *
      * UNLOCK, REPORT AND EXIT
      RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
      PRMPT = "Order number: ":OP_ID:" is not on file"
      CAPTION = "Shipping"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

   CASE ERROR_STATUS = ERR_BUSY  ;* USER ENTERED ORDER IS LOCKED BY SOMEONE ELSE
      PRMPT = "Order number: ":OP_ID:" is busy, try later"
      CAPTION = "Shipping"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

   CASE 1
      CM_ID = OP_REC<OP_CUST>
      CALL GET.CUSTOMER(CM_ID,CM_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
      *
      IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH CUST
         LOG.OPTS = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG = 'Selection of non-existent customer from list'
         CALL LOG.ERROR(LOG.OPTS,"GUISUB.SHIP", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      END ELSE
         SHIPTO_ID = OP_REC<OP_SHIPTO>
         CALL GET.SHIPTO(SHIPTO_ID,SHIPTO_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
         *
         IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH DEFAULT SHIP TO
            LOG.OPTS = "DISPLAY"
            ERROR_NBR = ERR_SYS
            ERROR_MSG = CM_ID:' Customer has non-existent ship to ':SHIPTO_ID
            CALL LOG.ERROR(LOG.OPTS,"GUISUB.SHIP", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         END ELSE
            GOSUB LOAD.CHILD.LIST
            GOSUB LOAD.OP.CTRLS
         END
      END
END CASE
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.SHIP.SHIP.TXTNOTES.VALIDATE: *
SCHD.NOTES = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.SHIP.SHIP.TXTSHPQTY.VALIDATE: *
DEL.QTY = GUIARGS<2>
BEGIN CASE
   CASE DEL.QTY LE 0
      PRMPT = "Shipping qty must be greater than 0"
      CAPTION = "Shipping"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   CASE DEL.QTY GT BAL.DUE
      PRMPT = "NOTE - shipping qty is greater than Balance Due"
      CAPTION = "Shipping"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"BTNSHIP",GPENABLED,0,0,1,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   CASE 1
      *
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"BTNSHIP",GPENABLED,0,0,1,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END CASE
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
LOG.OPTS  = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"GUISUB.SHIP", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
* $PAGE$
************************************************************
CALC.BAL.DUE:
*
* CALCULATE BALANCE DUE ON THIS ITEM
* AND SET NEXT.DEL.IDX
CALL SHIP.CALC.BAL.DUE(BAL.DUE,NEXT.DEL.IDX,PRESHIP.ACTIVE,PRESHIP.IDX,SCHD.NOTES,OC_REC)
*
CTRLIDS = "LBLDUEVAL"
PROPS   = GPVALUE
VALUES  = BAL.DUE
*
CTRLIDS<-1> = "TXTNOTES"
PROPS<-1>   = GPVALUE
VALUES<-1>  = SCHD.NOTES
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
* $PAGE$
************************************************************
CLEAR.BUFFERS:
CM_ID       = '' ;* CUSTOMER ID
SHIPTO_ID   = '' ;* SHIP TO ID
OP_ID       = '' ;* ORDER PARENT ID
OP_REC      = '' ;* ORDER_PARENT RECORD
OC_ID       = '' ;* ORDER_CHILD ID
OC_REC      = '' ;* ORDER_CHILD RECORD
SA_REC      = '' ;* SALES RECORD
SA_ID       = '' ;* SALES RECORD ID
CHILD.LIST  = '' ;* ORDER CHILD LIST (LSTITEM) VALUES
*
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CHILD.LIST:
*
* CREATE ORDER CHILD LIST AND SET ID TO FIRST NON DELETED RECORD
*
FIRST.CHILD.ID = ''
CHILD.LIST = ''
*
CHILD.COUNT = DCOUNT(OP_REC<OP_CHILD>,@VM)
FOR I = 1 TO CHILD.COUNT
   TEST.CHILD.ID = OP_ID:'*':I
   *

   CALL GET.RECORD("ORDER_CHILD",C.ORDER_CHILD,TEST.CHILD.ID,TEST.CHILD.REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
   IF ERROR_STATUS = ''  THEN
      CHILD.PN = TEST.CHILD.REC<OC_PART_NBR>
      CHILD.DESC = TEST.CHILD.REC<OC_PART_DESC>
      CHILD.STATUS = TEST.CHILD.REC<OC_ITEM_STAT>
      BEGIN CASE
         CASE CHILD.STATUS = "I" OR CHILD.STATUS = ""
            CHILD.STATUS = "INCOMPLETE"
            IF FIRST.CHILD.ID = '' THEN         ;* SAVE FIRST OPEN CHILD RECORD
               FIRST.CHILD.ID = TEST.CHILD.ID
            END
         CASE CHILD.STATUS = "C"
            CHILD.STATUS = "COMPLETE"
      END CASE
   END ELSE
      *
      * MISSING CHILD RECORD, ASSUME DELETED
      *
      CHILD.PN = "Record Deleted"
      CHILD.DESC = ""
      CHILD.STATUS = "Deleted"
   END

   CHILD.LIST<1,I,1> = TEST.CHILD.ID
   CHILD.LIST<1,I,2> = CHILD.PN
   CHILD.LIST<1,I,3> = CHILD.DESC
   CHILD.LIST<1,I,4> = CHILD.STATUS
NEXT I
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.ID.CTRLS:
*
* routine LOADS controls for ITEM DETIAL *
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<-1> = "LBLPNVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_PART_NBR>
*
CTRLIDS<-1> = "LBLDESCVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_PART_DESC>
*
CTRLIDS<-1> = "LBLDRAWVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_DRAWING>
*
CTRLIDS<-1> = "TXT2NOTES"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<OC_ITEM_NOTES>
*
* IS THERE A PICTURE FOR THIS ITEM?
*
CALL GET.RECORD("PARTS",C.PARTS,OC_REC<OC_PART_NBR>,PARTS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF PARTS_REC<PT_PICTURE> # '' THEN
*
* RESOLVE TO SERVER WHERE FILES ARE STORED
*
   CALL SHARE.FILE.PATH.CALC(PARTS_REC<PT_PICTURE>,NETWORK_PATH_REC,SHARE.FILE.PATH,'EXPAND')
   IF SHARE.FILE.PATH # "" THEN
      CTRLIDS<-1> = "PICITEM"
      PROPS<-1>   = GPVALUE
      VALUES<-1>  = SHARE.FILE.PATH
   END
   *
END
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR

**
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.OP.CTRLS:
*
* routine LOADS controls for ORDER_PARENT *
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<-1> = "LBLCUSTVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_NAME>
*
CTRLIDS<-1> = "LBLCUSTPOVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OP_REC<OP_PO_NBR>
*
IF CHILD.LIST # '' THEN
   CTRLIDS<-1> = "LSTITEM"
   PROPS<-1>   = GPITEMS
   VALUES<-1>  = CHILD.LIST
   *
   CTRLIDS<-1> = "LSTITEM"
   PROPS<-1>   = GPENABLED
   VALUES<-1>  = 1

   CTRLIDS<-1> = "BTNCANCEL"
   PROPS<-1>   = GPENABLED
   VALUES<-1>  = 1
END
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
**
RETURN
************************************************************
* $PAGE$
************************************************************
RESET.CTRLS:
*
* routine RESETS FORM TO INITIAL START STATE *
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<-1> = "LSTITEM"
PROPS<-1>   = GPITEMS
VALUES<-1>  = " "
*
CTRLIDS<-1> = "LSTITEM"
PROPS<-1>   = GPENABLED
VALUES<-1>  = 0
*
CTRLIDS<-1> = "TXTSHPQTY"
PROPS<-1>   = GPENABLED
VALUES<-1>  = 0
*
CTRLIDS<-1> = "BTNSHIP"
PROPS<-1>   = GPENABLED
VALUES<-1>  = 0
*
CTRLIDS<-1> = "TXT2NOTES"
PROPS<-1>   = GPENABLED
VALUES<-1>  = 0
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
**
CALL ATGUIRESET(GUIAPP,GUIFRM,GUIERRORS,GUISTATE)  ;* RESET FORM TO INITAL STATE
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
SEND.SHIPPING.EMAIL:
*
* USE WINDOWS MAILTO FUNCTION TO OPEN REGISTERD E-MAIL CLIENT TO SEND E-MAIL TO CUSTOMER
*
* ASSUMES THE FOLLOWING ARE POPULATED:
*
* SA_ID & SA_REC  - SALES RECORD
* CM_ID & CM_REC  - CUSTOMER RECORD
* OP_ID & OP_REC  - ORDER PARENT RECORD
* OC_ID & OC_REC  - ORDER CHILD RECORD
*
*
* FIRST CONFIRM USER WANTS TO SEND EMAIL
*
PRMPT = "Send E-Mail Notification of Shipment to Customer?"
CAPTION = "Shipping"
STYLE   = 0  ;* no icon
BUTTONS = 4  ;* yes / no - response 6 = Yes, 7 = no
HELPID = ""
CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
IF RESPONSE = 6 THEN
   *
   * SEND E-MAIL
   *
   TO_ADDRESS = CM_REC<CM_EMAIL,1>
   IF TO_ADDRESS = '' THEN
      PRMPT = "No E-Mail Address defined on Customer Record, Cannot Send E-Mail"
      CAPTION = "Shipping"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* OK
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END ELSE
      SUBJECT = 'PO: ':SA_REC<SA_PO_NBR>:' ready for pickup '
      BODY    = 'Your Purchase Order: ':SA_REC<SA_PO_NBR>:' for Part: ':SA_REC<SA_PART_NBR>:' ':SA_REC<SA_PART_DESC>:' on our Order Number: ':OP_ID:' is ready for pickup. ':'&nl':' ':'&nl':COMPANY_REC<CM_NAME>
      EM_ERRORS = ''
      CALL SEND_EMAIL(TO_ADDRESS,SUBJECT,BODY,EM_ERRORS, GUISTATE)
   END
END
RETURN
END
