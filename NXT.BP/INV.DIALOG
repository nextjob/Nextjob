SUBROUTINE INV.DIALOG(GUIERRORS,GUISTATE)
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: INV.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2014
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
*
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* CREATE AR INVOICES FROM SHIPMENTS
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES CUSTOMERS.H
$INCLUDE NXT.INCLUDES ORDER_PARENT.H
$INCLUDE NXT.INCLUDES ORDER_CHILD.H
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES SALES.H
$INCLUDE NXT.INCLUDES VALIDATION_FILE.H
$INCLUDE NXT.INCLUDES AR.H
*
*-->BEGIN GUI HEADER<--*
$INCLUDE GUIBP ATGUIEQUATES
*
*
PROG_ID   = "INV.DIALOG"
GET_REC_MSG_LIST = ''
GUIERRORS = ''
GUIAPP = "INV"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "INV"
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'INV.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'INV.DIALOG' ELSE
   CALL ATGUIERROR(3,'INV.DIALOG','',0,GRFATAL,"'INV.DIALOG' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('INV','INV','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
*
* INIT SOME VARIABLES
*
OP_ID = ''  ;* ORDER_PARENT ID
OC_ID = ''  ;* ORDER_CHILD ID
GET_REC_MSG_LIST = ''   ;* DEFAULT MESSAGE LIST
*
* SYSTEM DEFAULTS RECORD
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"DEFAULTS",DEFAULTS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
*
* USER RECORD
*
USER_RECORD_ID = "USER*":@LOGNAME
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,USER_RECORD_ID,USER_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF USER_REC # '' THEN
   IF USER_REC<USER_PRICE_RESTRICTED> THEN
      USER.IS.RESTRICTED = @TRUE
      LOG.OPTS  = "DISPLAY"
      ERROR_NBR = ERR_SYS
      ERROR_MSG =  "Restricted user: ":@LOGNAME:" does not have access to Invoicing"
      CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      GOSUB GUI.INV.INV.CLOSE;GUIEVT=0
      RETURN
   END ELSE
      USER.IS.RESTRICTED = @FALSE
   END
   *
   * SETUP PRINTERS
   *
   *
   IF USER_REC<USER_INVOICE_PRINTER> = '' THEN
      INVOICE.PRINTER = 0  ;* SET TO DEFAULT PRINTER
      LOG.OPTS  = "DISPLAY"
      ERROR_NBR = ERR_SYS
      ERROR_MSG =  "Missing INVOICE_PRINTER from USER record in, SYSTEM_FILE"
      CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   END ELSE
      INVOICE.PRINTER = USER_REC<USER_INVOICE_PRINTER>
   END
   *
END ELSE
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "Unknown User: ":@LOGNAME
   CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GOSUB GUI.INV.INV.CLOSE;GUIEVT=0
   RETURN
END
*
* COMPANY RECORD
*
GET_REC_MSG_LIST = ''
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"COMPANY_RECORD",COMPANY_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF COMPANY_REC = '' THEN
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "Missing COMPANY_RECORD from SYSTEM_FILE"
   CALL LOG.ERROR(LOG.OPTS,"INV.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GOSUB GUI.INV.INV.CLOSE;GUIEVT=0
   RETURN
END
*
* LOAD IN LOT CHARGES DESCRIPTIONS INTO QUOTE GRID, PRICE COLUMN
*
CALL GET.RECORD("VALIDTAION_FILE",C.VALIDATION_FILE,"LOT.CHARGES",LOT.CHARGES,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF LOT.CHARGES = '' THEN
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "LOT.CHARGES not found in VALIDATION_FILE"
   CALL LOG.ERROR(LOG.OPTS,"INV.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GOSUB GUI.INV.INV.CLOSE;GUIEVT=0
   RETURN
END ELSE
   DMMY.LIST = ''
   TEMP.LIST = ''
   LOT.CHARGE.LIST  = ''
   CALL LIST.LOAD(C.VALIDATION_FILE,"LOT.CHARGES","",'',DMMY.LIST,TEMP.LIST,LIST.COUNT,EMSG)
   FOR I = 1 TO LIST.COUNT
      LOT.CHARGE.LIST<1,1,I> = TEMP.LIST<I>
   NEXT I
   *
END
*
* GET TERMS
*
CALL GET.RECORD("VALIDTAION_FILE",C.VALIDATION_FILE,"TERMS",TERMS.REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF TERMS.REC = '' THEN
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "TERMS not found in VALIDATION_FILE"
   CALL LOG.ERROR(LOG.OPTS,"INV.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GOSUB GUI.INV.INV.CLOSE;GUIEVT=0
   RETURN
END
*
*
CALL INVOICE.TEMPLATE(INVTEMPLATE)  ;* GET INVOICE TEMPLATE
DIM SA_RECORDS(1)             ;* PRE DIMENSION SA_RECORDS ARRAY USED TO CREATE AND WRITE SALES FILE
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='INV'
         BEGIN CASE
            CASE GUIFRM='INV'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.INV.INV.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCANCEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.INV.INV.BTNCANCEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCREATE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.INV.INV.BTNCREATE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNINVOICE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.INV.INV.BTNINVOICE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='GRDLINES'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.INV.INV.GRDLINES.CLICK;GUIEVT=0
                        CASE GUIEVT=GEVALIDATECELL
                           GOSUB GUI.INV.INV.GRDLINES.VALIDATECELL;GUIEVT=0
                     END CASE
                  CASE GUICTL='LSTINV'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.INV.INV.LSTINV.CLICK;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.INV.INV.CLOSE: *
IF OP_ID # '' THEN RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
IF OC_ID # '' THEN RELEASE C.FILE.VAR(C.ORDER_CHILD), OC_ID
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.INV.INV.BTNCANCEL.CLICK: *
*
CTRLIDS = ""
PROPS   = ""
VALUES  = ""
*
SALES.DETAIL.LIST = ''
*
CTRLIDS<-1> = "GRDLINES"
PROPS<-1>   = GPVALUE
VALUES<-1>  = SALES.DETAIL.LIST
*
CTRLIDS<-1> = "GRDLINES"
PROPS<-1>   = GPENABLED
VALUES<-1>  = 0
*
CTRLIDS<-1> = "BTNINVOICE"
PROPS<-1>   = GPENABLED
VALUES<-1>  = 0
*
CTRLIDS<-1> = "LBLTOTAMT"
PROPS<-1>   = GPVALUE
VALUES<-1>  = 0
*
CTRLIDS<-1> = "LBLORDERVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = ""
*
CTRLIDS<-1> = "LBLBILLCUST"
PROPS<-1>   = GPVALUE
VALUES<-1>  = ""
*
CTRLIDS<-1> = "LBL1BILLNAMEVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = ""
*
CTRLIDS<-1> = "LBL1BILLADDR1VAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = ""
*
CTRLIDS<-1> = "LBL1BILLADDR2VAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = ""
*
CTRLIDS<-1> = "LBL1BILLCITYVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = ""
*
CTRLIDS<-1> = "LBL1BILLSTVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = ""
*
CTRLIDS<-1> = "LBL1BILLZIPVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = ""
*
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
IF OP_ID # '' THEN RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
IF OC_ID # '' THEN RELEASE C.FILE.VAR(C.ORDER_CHILD), OC_ID
*
OP_ID = ''
OC_ID = ''
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.INV.INV.BTNCREATE.CLICK: *
*
* USER CLICK CREATE LIST
* GET TYPE OF LIST TO CREATE (LSTSELECT)
* PROCESS SELECT OF SALES RECORDS
* POPULATE ORDERS TO INVOICE LIST (LSTINV)
* ACTIVATE THE CONTROL
*
GOSUB GUI.INV.INV.BTNCANCEL.CLICK    ;* USER MAY BE RESTARTING, PERFORM CANCEL
*
* CLEAR THE ORDER LIST
ORDER.DETAIL.LIST = ''
*
CTRLIDS = "LSTINV"
PROPS   = GPITEMS
VALUES  = ORDER.DETAIL.LIST
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* 1'ST GET THE TYPE OF LIST
*
CALL ATGUIGETPROP(GUIAPP,GUIFRM,'LSTSELECT',GPVALUE,0,0,SEL.TYPE,GUIERRORS,GUISTATE)
*PRMPT = "Selected: ":SEL.TYPE
*CAPTION = "Invoicing"
*STYLE   = 2  ;* !
*BUTTONS = 1  ;* ok / cancel
*HELPID = ""
*CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
BEGIN CASE
   CASE SEL.TYPE = 0 OR SEL.TYPE = 1
      * SELECT ONLY ORDERS WITH ITEMS SHIPPED COMPLETE
      * SELECT SALES FILE FOR ITEMS NOT INVOICED (SA_INVOICE_ID = "")
      * FOR EACH SELECTED ITEM
      *  GET ORDER_CHILD
      *  IF ORDER CHILD COMPLETE THEN PLACE CHILD ID IN SELECTED ORDERS LIST (DO NOT DUPLICATE)
      *  CREATING ORDER.DETAIL.LIST
      *
      GOSUB SEL.ORDERS
      GOSUB LOAD.ORDERS
   CASE SEL.TYPE = 2
      * SELECT ORDERS WITH ITEMS SHIPPED (COMPLETE AND PARTIALS)
      * SELECT SALES FILE FOR ITEMS NOT INVOICED (SA_INVOICE_ID = "")
      * FOR EACH SELECTED ITEM
      *  GET ORDER_CHILD
      *  PLACE CHILD ID IN SELECTED ORDERS LIST (DO NOT DUPLICATE)
      *  CREATING ORDER.DETAIL.LIST
      GOSUB SEL.ORDERS
      GOSUB LOAD.ORDERS
   CASE 1
      PRMPT = "Invalid List Selection: ":SEL.TYPE:" See SysAdmin"
      CAPTION = "Invoicing"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
END CASE
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.INV.INV.BTNINVOICE.CLICK: *
*
* CREATE INVOICE FOR SELECTED SALES RECORD ITEMS
*  VERIFY PRICE
*  GET INVOICE #
*  UPDATE SALES RECORD
*  UPDATE ORDER CHILD (IF PRICE CHANGED)
*  WRITE AR RECORD
*  UNLOCK ALL LOCKED RECORDS
*  PRINT INVOICE
* note:
* SALES.DETAIL.LIST
*   <1,I,1> = SELECTED FLAG
*   <1,I,2> = PACKSLIP ID FOR SALES RECORD
*   <1,I,3> = PART NUMBER ON SALES RECORD
*   <1,I,4> = DATE SHIPPED
*   <1,I,5> = QTY SHIPPED
*   <1,I,6> = PRICE EACH
*   <1,I,7> = LINE TOTAL
*
* VALIDATE PRICE
FOR SI = 1 TO SALES.DETAIL.COUNT
   IF SALES.DETAIL.LIST<1,SI,1> THEN          ;* ITEM IS SELECTED
      IF SALES.DETAIL.LIST<1,SI,6>+0 LE 0 THEN
         PRMPT = "Price for : ":SALES.DETAIL.LIST<1,SI,3>:" is ZERO, Continue?"
         CAPTION = "Invoicing"
         STYLE   = 2  ;* !
         BUTTONS = 1  ;* ok / cancel
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         IF RESPONSE = 2 THEN ;* CANCEL
            GOTO INV.CLK.999
         END
      END
   END
NEXT SI
*
* GET NEXT INVOICE NUMBER
*
CALL NXT.NEXTNBR("AR",AR_ID,ERROR_STATUS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* CONVERT TERMS CODE TO PAYMENT DAYS
*
LOCATE OP_REC<OP_SHIP_TERMS> IN TERMS.REC<1> SETTING IDX THEN
   TERM.DAYS = TERMS.REC<3,IDX>
END ELSE
   TERM.DAYS = 30
END
*
AR_REC = ''
AR_REC<AR_CUST_ID> = OP_REC<OP_CUST>
AR_REC<AR_INV_DATE> = DATE()
AR_REC<AR_AMOUNT>  = 0
AR_REC<AR_DUE_DATE> = DATE() + TERM.DAYS
*
* UPDATE SALES RECORDS
*
FOR SI = 1 TO SALES.DETAIL.COUNT
   IF SALES.DETAIL.LIST<1,SI,1> THEN          ;* ITEM IS SELECTED
      SA_ID = SALES.DETAIL.LIST<1,SI,2>
      *
      * UPDATE PRICE ON ORDER RECORD?
      *
      IF SA_RECORDS(SI)<SA_EXTRA_FLAG> THEN    ;*  IS THIS AN EXTRA CHARGE ?
         *
         NULL
         *
         * FOLLOWING CODE DOES NOT WORK, OC_REC<OC_EC_AMT> IS A MULTI VALUE FIELD, NO WAY OF KNOWING
         * WHICH ONE TO COMPARE AGAINST.  COMMENT OUT FOR  NOW
         *
         *
         *         IF OC_REC<OC_EC_AMT> # SA_RECORDS(SI)<SA_PRICE_EA> THEN
         *            PRMPT = "Extra Charge on Order Record is: ":OCONV(OC_REC<OC_EC_AMT>,OC_PRICE_EA.CNV):@SVM
         *            PRMPT :=  "Extra Charge on Invoice is: ":OCONV(SA_RECORDS(SI)<SA_PRICE_EA>,SA_PRICE_EA.CNV):@SVM
         *            PRMPT := "Update order?"
         *            CAPTION = "Invoicing"
         *            STYLE   = 2  ;* !
         *            BUTTONS = 4  ;* yes / no
         *            HELPID = ""
         *            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         *            IF RESPONSE = 6 THEN ;* yes
         *               OC_REC<OC_EC_AMT>  = SA_RECORDS(SI)<SA_PRICE_EA>
         *            END
         *         END
      END ELSE
         IF OC_REC<OC_PRICE_EA> # SA_RECORDS(SI)<SA_PRICE_EA> THEN
            PRMPT = "Price on Order Record is: ":OCONV(OC_REC<OC_PRICE_EA>,OC_PRICE_EA.CNV):@SVM
            PRMPT :=  "Price on Invoice Record is: ":OCONV(SA_RECORDS(SI)<SA_PRICE_EA>,SA_PRICE_EA.CNV):@SVM
            PRMPT := "Update order?"
            CAPTION = "Invoicing"
            STYLE   = 2  ;* !
            BUTTONS = 4  ;* yes / no
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            IF RESPONSE = 6 THEN ;* yes
               OC_REC<OC_PRICE_EA>  = SA_RECORDS(SI)<SA_PRICE_EA>
            END
         END
      END
      *
      * ADD INVOICE ID TO SALES RECORD AND SAVE IT
      *
      SA_RECORDS(SI)<SA_INVOICE_ID> = AR_ID
      CALL WRITE.RECORD(SA_ID,SA_RECORDS(SI),C.SALES,@FALSE,ERROR_STATUS)
      *
      * ADD TO AR RECORD
      AR_REC<AR_SALES_ID,-1> = SA_ID
      IF SA_RECORDS(SI)<SA_LOT_FLAG> THEN ;* LOT CHARGE ??
         AR_REC<AR_AMOUNT>  += SA_RECORDS(SI)<SA_PRICE_EA>
      END ELSE
         AR_REC<AR_AMOUNT>  += SA_RECORDS(SI)<SA_PRICE_EA> * SA_RECORDS(SI)<SA_DEL_QTY>
      END
      *
      * CREATE THE GLT RECORD
      *
      IF SA_RECORDS(SI)<SA_EXTRA_FLAG> THEN   ;* THIS IS AN EXTRA CHARGE, MUST GET GL CODE FROM VALIDATION FILE
         EC_CODE = SA_RECORDS(SI)<SA_PART_NBR>   ;* EXTRA CHARGE CODE IS SAVED IN PART NUMBER FIELD
         CALL GET.RECORD("VALIDATION_FILE",C.VALIDATION_FILE,"EXTRA.CHARGES",EC_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
         IF EC_REC = '' THEN
            LOG.OPTS  = "DISPLAY"
            ERROR_NBR = ERR_SYS
            ERROR_MSG =  "Missing EXTRA.CHARGES from VALIDATION_FILE"
            CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
            STATUS = ERROR_MSG
            GL_CODE = DEFAULTS_REC<DFLT_SALE_GL_CD>   ;* USE DEFAULT GLT CODE FOR SALES
         END ELSE
            LOCATE EC_CODE IN EC_REC<1,1> BY "AL" SETTING IDX THEN
               GL_CODE = EC_REC<CODE_VAL1,IDX>
            END ELSE
               GL_CODE = DEFAULTS_REC<DFLT_SALE_GL_CD>   ;* USE DEFAULT GLT CODE FOR SALES
            END
         END
      END ELSE
         GL_CODE = SA_RECORDS(SI)<SA_GL_TRANS_CD>  ;* NORMAL SALES HAS CODE IN SA RECORD
      END
      IF SA_RECORDS(SI)<SA_LOT_FLAG> THEN ;* LOT CHARGE ??
         DB_AMT = SA_RECORDS(SI)<SA_PRICE_EA> 
      END ELSE
         DB_AMT = SA_RECORDS(SI)<SA_PRICE_EA> * SA_RECORDS(SI)<SA_DEL_QTY>
      END
      CR_AMT = DB_AMT
      CALL WRITE.GLT(GL_CODE,DB_AMT,CR_AMT,AR_REC<AR_INV_DATE>,"AR-INV",AR_ID:'*':SA_ID,GUIERRORS,GUISTATE)
      *
   END
NEXT SI
AR_REC<AR_BAL_DUE> = AR_REC<AR_AMOUNT>
CALL WRITE.RECORD(AR_ID,AR_REC,C.AR,@FALSE,ERROR_STATUS)
CALL WRITE.RECORD(OC_ID,OC_REC,C.ORDER_CHILD,@FALSE,ERROR_STATUS)
RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
*
* PRINT THE INVOICE (ONLY IF WE ARE NOT USING QUICK_BOOKS FOR THE ACCOUNTING)
*
IF NOT(NX_QB_ACCOUNTING) THEN
   INVFM = INVTEMPLATE
   CALL INVOICE.FORM(AR_ID,AR_REC,INVFM)

   INVFM1 = INVFM:ESC:'*p1000x3050Y':COMPANY_REC<COMP_NAME>:ESC:'*p0x0Y'
   IF INVOICE.PRINTER > 0 THEN  ;* PDF PRINT?
      IF NX.PRINT.ENABLE THEN PRINT ON INVOICE.PRINTER INVFM1
      IF NX.PRINT.ENABLE THEN PRINTER CLOSE ON INVOICE.PRINTER
      INVFM1 = INVFM:ESC:'*p1000x3050Y':COMPANY_REC<COMP_NAME>:' Copy':ESC:'*p0x0Y'
      IF NX.PRINT.ENABLE THEN PRINT ON INVOICE.PRINTER INVFM1
      IF NX.PRINT.ENABLE THEN PRINTER CLOSE ON INVOICE.PRINTER
   END ELSE
      PDF.NAME = 'INVOICE-':AR_ID:'.PDF'
      DISPLAY.ON.CREATION = @TRUE
      CALL PCL.TO.PDF(INVFM1,PDF.NAME,DISPLAY.ON.CREATION,GUIERRORS,GUISTATE)
   END
   *
   * TELL USER ABOUT COMPLETION
   *
   PRMPT = "Invoice: ":AR_ID:" created for selected sales items"
   CAPTION = "Invoicing"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
   *
   * FOR QUICK BOOKS ACCOUNTING TELL USER RECORD HAS BEEN CREATED
   *
   PRMPT = "Quick Books Input Record: ":AR_ID:" created for selected sales items"
   CAPTION = "Invoicing"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
*
GOSUB GUI.INV.INV.BTNCANCEL.CLICK    ;* RESTARTING WITH NEW ORDER SELECTION
GOSUB SEL.ORDERS
GOSUB LOAD.ORDERS
INV.CLK.999:
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.INV.INV.GRDLINES.CLICK: *
GRD.COL = GUIARGS<1,1>
GRD.ROW = GUIARGS<1,2> ;* ROW NUMBER
BEGIN CASE
   CASE GRD.COL = 1    ;* CHECK BOX
      * GET THE ACTUAL STATE FOR THE CHECK BOX IN THIS ROW, NEED TO DO IT THIS WAY INCASE USER CLICK IN CELL BUT MISSES THE BOX
      CALL ATGUIGETPROP(GUIAPP,GUIFRM, "GRDLINES", GPVALUE, GRD.COL, GRD.ROW, INV.SELECTED, GUIERRORS, GUISTATE)
      *
      IF INV.SELECTED THEN ;* CHECKED, INCLUDE
         IF SA_RECORDS(GRD.ROW)<SA_LOT_FLAG> THEN  ;* LOT CHARGES ?
            SALES.DETAIL.LIST<1,GRD.ROW,7> = SALES.DETAIL.LIST<1,GRD.ROW,6>
         END ELSE
            SALES.DETAIL.LIST<1,GRD.ROW,7> = OCONV((SA_RECORDS(GRD.ROW)<SA_DEL_QTY> * SA_RECORDS(GRD.ROW)<SA_PRICE_EA>),SA_PRICE_EA.CNV) ;*LINE TOTAL
         END
      END ELSE         ;* NOT CHECKED, REMOVE
         SALES.DETAIL.LIST<1,GRD.ROW,7> = 0
      END
      SALES.DETAIL.LIST<1,GRD.ROW,1> = INV.SELECTED
      GOSUB CALC.INV.TOTAL
      GOSUB UPDATE.SALES
      *
   CASE  GRD.COL = 3    ;* CLICKING ON PART NUMBER COLUMN??

      PN_ID = SALES.DETAIL.LIST<1,GRD.ROW,3>
      PART_REC = ''
      IF PN_ID # '' THEN
         MSG_LIST = ''
         CALL GET.RECORD("PARTS",C.PARTS,PN_ID,PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
         IF ERROR_STATUS # '' THEN PART_REC = ''
      END ELSE
         PARTS_REC = ''
      END
      IF PARTS_REC # '' THEN
         ACT_OPTS = ''
         CALL ACT.DIALOG(PN_ID,PARTS_REC,ACT_OPTS,RTN.DATA,GUIERRORS,GUISTATE)
      END ELSE
         IF PN_ID = '' THEN
            PRMPT = "Part Number unavailable, no activity to display."
         END ELSE
            PRMPT = "Part Number: ":PN_ID:" not found, no activity available."
         END
         CAPTION = "Invoicing"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      END
END CASE
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.INV.INV.GRDLINES.VALIDATECELL: *
GRD.COL = GUIARGS<1,1>
GRD.ROW = GUIARGS<1,2>
CELL.VAL = GUIARGS<2>
IF GRD.ROW LE SALES.DETAIL.COUNT THEN      ;* ONLY ROWS POPULATED WITH SALES DATA
   BEGIN CASE
      CASE GRD.COL = 6    ;* ONLY WANT PRICE (COL 6)
         *
         PRICE.EA = CELL.VAL
         GOSUB PRICE.VALIDATE
         IF PRICE.VALID THEN
            *
            * WAS THIS A LOT CHARGE AND AMOUNT WAS CHANGED?
            *
            IF SA_RECORDS(GRD.ROW)<SA_LOT_FLAG> AND NOT(LOT.FLAG) THEN
               PRMPT = 'Bill New Price as Lot Charge?'
               CALL NXT.ERR.MSG(PRMPT, PROG_ID, 3, 4, "", RESPONSE, GUIERRORS, GUISTATE)
               *RESPONSE   6 = Yes *   7 = No
               IF RESPONSE = 6 THEN
                  LOT.FLAG = @TRUE
               END
            END
            SA_RECORDS(GRD.ROW)<SA_LOT_FLAG> = LOT.FLAG
            SA_RECORDS(GRD.ROW)<SA_PRICE_EA> =PRICE.EA
            IF LOT.FLAG THEN   ;* USER SET A LOT PRICE?
               *
               SALES.DETAIL.LIST<1,GRD.ROW,6> = OCONV(SA_RECORDS(GRD.ROW)<SA_PRICE_EA>,SA_PRICE_EA.CNV) ;* LOT PRICE
               SALES.DETAIL.LIST<1,GRD.ROW,7> = SALES.DETAIL.LIST<1,GRD.ROW,6>
               *
            END ELSE

               SALES.DETAIL.LIST<1,GRD.ROW,6> = OCONV(SA_RECORDS(GRD.ROW)<SA_PRICE_EA>,SA_PRICE_EA.CNV) ;*PRICE EACH
               SALES.DETAIL.LIST<1,GRD.ROW,7> = OCONV((SA_RECORDS(GRD.ROW)<SA_DEL_QTY> * SA_RECORDS(GRD.ROW)<SA_PRICE_EA>),SA_PRICE_EA.CNV) ;*LINE TOTAL
            END
            *
         END
   END CASE
   GOSUB CALC.INV.TOTAL
   GOSUB UPDATE.SALES
   *
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.INV.INV.LSTINV.CLICK: *
*
* USER CLICK ON AN ORDER TO INVOICE, GET THE ASSOCIATED SALES DETAIL
ROW = GUIARGS<1>   ;* ROW IN LIST CLICKED
IF ORDER.LIST<ROW> # '' THEN
   *
   SEL.ORDER = ORDER.LIST<ROW>   ;* GET THE ORDER CHILD ID
   GOSUB SEL.SALES
   GOSUB LOAD.SALES
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"INV.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
************************************************************
* $PAGE$
************************************************************
CALC.INV.TOTAL:
*
* SUM UP VALUE SELECTET TO INVOICE
*
SALES.TOTAL = 0
FOR I = 1 TO  SALES.DETAIL.COUNT
   SALES.TOTAL += SALES.DETAIL.LIST<1,I,7>
NEXT I
RETURN
************************************************************
* $PAGE$
************************************************************
FORM.RESET:
*
CTRLIDS = ""
PROPS   = ""
VALUES  = ""
*
SALES.DETAIL.LIST = ''
ORDER.DETAIL.LIST = ''
ORDER.LIST        = ''

*
CTRLIDS<-1> = "LSTINV"
PROPS<-1>   = GPITEMS
VALUES<-1>  = ORDER.DETAIL.LIST
*
CTRLIDS<-1> = "GRDLINES"
PROPS<-1>   = GPVALUE
VALUES<-1>  = SALES.DETAIL.LIST
*
CTRLIDS<-1> = "GRDLINES"
PROPS<-1>   = GPENABLED
VALUES<-1>  = 0
*
CTRLIDS<-1> = "BTNINVOICE"
PROPS<-1>   = GPENABLED
VALUES<-1>  = 0
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
CALL ATGUIRESET(GUIAPP,GUIFRM,GUIERRORS,GUISTATE)  ;* RESET FORM TO INITAL STATE
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.ORDERS: *
*
* ROUTINE LOADS ORDER SELECTION LIST LSTINV AND ENABLES IT
*
IF ORDER.DETAIL.LIST # '' THEN
   CTRLIDS = ""
   PROPS   = ""
   VALUES  = ""
   *
   CTRLIDS<-1> = "LSTINV"
   PROPS<-1>   = GPITEMS
   VALUES<-1>  = ORDER.DETAIL.LIST
   *
   CTRLIDS<-1> = "LSTINV"
   PROPS<-1>   = GPENABLED
   VALUES<-1>  = 1
   *
   *
   CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.PRICE: *
*
* LOAD PRICING DATA FOR SALES RECORD
* SEL.ROW = ROW OF DATA TO LOAD
* pn_id = part to look up
*
IF PN_ID # '' THEN
   MSG_LIST = ''
   CALL GET.RECORD("PARTS",C.PARTS,PN_ID,PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
END ELSE
   PARTS_REC = ''
END
*
IF PARTS_REC # '' THEN
   PRICE.LIST  = ''
   QUOTE.CNT = DCOUNT(PARTS_REC<PT_STD_QTY>,@VM)
   FOR I = 1 TO QUOTE.CNT
      PRICE.VAL = PARTS_REC<PT_STD_PRICE,I>
      IF NUM(PRICE.VAL) THEN PRICE.VAL = OCONV(PRICE.VAL,PT_STD_PRICE.CNV)
      PRICE.LIST<1,1,I> = PARTS_REC<PT_STD_QTY,I>:'|':PRICE.VAL
   NEXT I
   *
   IF PRICE.LIST = '' THEN
      PRICE.LIST = LOT.CHARGE.LIST
   END
END ELSE
   PRICE.LIST = "Unknown | 0.00"
END

*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDLINES",GPCOLITEMS,6,SEL.ROW,PRICE.LIST,GUIERRORS,GUISTATE)

RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.SALES: *
*
* ROUTINE LOADS SALES SELECTION LIST INTO GRDLINES AND ENABLES IT
*
IF SALES.DETAIL.LIST # '' THEN
   CTRLIDS = ""
   PROPS   = ""
   VALUES  = ""
   *
   CTRLIDS<-1> = "GRDLINES"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = SALES.DETAIL.LIST
   *
   CTRLIDS<-1> = "GRDLINES"
   PROPS<-1>   = GPENABLED
   VALUES<-1>  = 1
   *
   CTRLIDS<-1> = "BTNINVOICE"
   PROPS<-1>   = GPENABLED
   VALUES<-1>  = 1
   *
   CTRLIDS<-1> = "LBLTOTAMT"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = SALES.TOTAL"R2"
   *
   CTRLIDS<-1> = "LBLORDERVAL"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = OP_ID:" item: ":FIELD(OC_ID,"*",2)
   *
   CTRLIDS<-1> = "LBLBILLCUST"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = OP_REC<OP_CUST>
   *
   CTRLIDS<-1> = "LBL1BILLNAMEVAL"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = CM_REC<CM_NAME>
   *
   CTRLIDS<-1> = "LBL1BILLADDR1VAL"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = CM_REC<CM_ADDR>
   *
   CTRLIDS<-1> = "LBL1BILLADDR2VAL"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = CM_REC<CM_ADDR2>
   *
   CTRLIDS<-1> = "LBL1BILLCITYVAL"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = CM_REC<CM_CITY>
   *
   CTRLIDS<-1> = "LBL1BILLSTVAL"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = CM_REC<CM_STATE>
   *
   CTRLIDS<-1> = "LBL1BILLZIPVAL"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = CM_REC<CM_ZIP>
   *
   CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
RETURN
************************************************************
* $PAGE$
************************************************************
PRICE.VALIDATE:
*
* ON ENTRY:
* PRICE.EA = VALUE PASSED TO BE VALIDATED
* ON EXIT
* PRICE.EA =  0 OR USER ENTERED VALUE IN INTERNAL FORMAT
* PRICE.OUT = OUTPUT CONVERSION OF PRICE.EA
* LOT.FLAG SET
* PRICE.VALID FLAG SET
*
* VALIDATE PRICE - CAN THE USER CHANGE PRICE DATA ?
*
PRICE.VALID = @FALSE
LOT.FLAG = @FALSE
BEGIN CASE
      *
      * LOT CHARGES ARE ID BY LOT*PROCESS TYPE IE LOT*CHEM
      *
   CASE NOT(NUM(PRICE.EA))
      LOT.TYPE = PRICE.EA
      LOCATE LOT.TYPE IN LOT.CHARGES<1,1> SETTING IDX THEN
         PRICE.EA  = LOT.CHARGES<3,IDX>
         PRICE.OUT = OCONV(PRICE.EA,OC_PRICE_EA.CNV)
         LOT.FLAG  = @TRUE
         PRICE.VALID = @TRUE
      END ELSE
         PRMPT = "Price ea: ":PRICE.EA:" not valid."
         CAPTION = "Invoicing"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         PRICE.EA = 0
      END
      *
   CASE PRICE.EA < 0
      PRMPT = "Price ea: ":PRICE.EA" is negative, invalid."
      CAPTION = "Invoicing"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      PRICE.EA = 0
   CASE 1
      PRICE.VALID = @TRUE
      PRICE.EA = ICONV(PRICE.EA, OC_PRICE_EA.CNV)
      PRICE.OUT = OCONV(PRICE.EA,OC_PRICE_EA.CNV)
END CASE
*
RETURN
************************************************************
* $PAGE$
************************************************************
SEL.ORDERS:
*
* SELECT SALES RECORDS NOT INVOICED (SA_INVOICE_ID = "")
* ON ENTRY:
* SEL.TYPE = 1 SELECT ONLY COMPLETE ORDER_CHILD RECORDS
* SEL.TYPE = 2 SELECT ANY SALES RECORD NOT INVOICED
* ON EXIT
* ORDER.DETAIL.LIST POPULATED
*   <1,I,1> = ORDER NUMBER
*   <1,I,2> = CUSTOMER NAME
*   <1,I,3> = CUSTOMER PO
* ORDER.LIST - AM LIST OF CORRESPONDING ORDER CHILD IDS
*
ORDER.DETAIL.LIST = ""
ORDER.LIST  = ""
MSG_LIST = ""
IDX = 0
SLIST = 'SSELECT SALES WITH SA_INVOICE_ID = "" AND WITH SA_DEL_QTY # "" TO 2'
EXECUTE SLIST CAPTURING DMMY.OUT
*
IF @SELECTED GE 1 THEN

   READLIST IDLIST FROM 2 THEN
      LIST.CT = DCOUNT(IDLIST,@AM)
      FOR I = 1 TO LIST.CT
         SA_ID = IDLIST<I,1>
         CALL GET.RECORD("SALES",C.SALES,SA_ID,SA_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
         IF ERROR_STATUS = '' THEN
            OC_ID = SA_REC<SA_ORDER_ID>
            CM_ID = SA_REC<SA_CUST_ID>
            CALL GET.RECORD("ORDER_CHILD",C.ORDER_CHILD,OC_ID,OC_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
            IF ERROR_STATUS = '' THEN
               CALL GET.RECORD("CUSTOMERS",C.CUSTOMERS,CM_ID,CM_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
               IF ERROR_STATUS = '' THEN
                  *
                  * DO WE SKIP ORDERS NOT SHIPPED COMPLETE?
                  *
                  IF SEL.TYPE = 1 AND OC_REC<OC_ITEM_STAT> # "C" THEN GOTO SKIP.ORDER
                  IDX += 1
                  ORDER.DETAIL.LIST<1,IDX,1> = FIELD(OC_ID,"*",1):' item ':FIELD(OC_ID,"*",2)   ;* ORDER NUMBER AND ITEM NUMBER
                  ORDER.DETAIL.LIST<1,IDX,2> = CM_REC<CM_NAME>   ;* CUSTOMER NAME
                  ORDER.DETAIL.LIST<1,IDX,3> = SA_REC<SA_PO_NBR> ;* CUSTOMER PO
                  ORDER.DETAIL.LIST<1,IDX,4> = SA_ID ;* SALES (PACKSLIP) Number
                  ORDER.LIST<IDX> = OC_ID ;* ORDER CHILD ID
SKIP.ORDER:       *
               END
            END
         END
      NEXT I
   END
END
*
IF ORDER.DETAIL.LIST = '' THEN
   IF SEL.TYPE = 1 THEN
      PRMPT = "No complete orders to invoice found"
   END ELSE
      PRMPT = "No orders to invoice found"
   END
   CAPTION = "Invoicing"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
************************************************************
* $PAGE$
************************************************************
SEL.SALES:
*
* SELECT SALES RECORDS FOR PASSED ORDER CHILD NOT INVOICED (SA_INVOICE_ID = "")
* ON ENTRY:
* SEL.ORDER = ORDER_CHILD TO INVOICE
* ON EXIT
* SALES.DETAIL.LIST POPULATED
*   <1,I,1> = SELECTED FLAG
*   <1,I,2> = PACKSLIP ID FOR SALES RECORD
*   <1,I,3> = PART NUMBER ON SALES RECORD
*   <1,I,4> = DATE SHIPPED
*   <1,I,5> = QTY SHIPPED
*   <1,I,6> = PRICE EACH
*   <1,I,7> = LINE TOTAL
* SALES.TOTAL CACULATED
* SALES.DETAIL.COUNT SET T0 ITEMS IN SALES.DETAIL.LIST
* SA_RECORDS() POPULATED WITH SALES RECORDS TO PROCESS
* NOTE SA_RECORDS(I) AND SALES.DETAIL.LIST<_,I,_> HAVE A ONE TO ONE CORRESPONDANCE
SALES.DETAIL.LIST = ""
SALES.TOTAL = 0
MSG_LIST = ""
IDX = 0
*
* GET ORDER PARENT
OC_ID = SEL.ORDER
OP_ID = FIELD(OC_ID,"*",1)
CALL GET.RECORD("ORDER_PARENT",C.ORDER_PARENT,OP_ID,OP_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
BEGIN CASE
   CASE ERROR_STATUS = ERR_NOF  ;*  NON - EXISTENT ORDER #
      *
      * UNLOCK, REPORT AND EXIT
      RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
      PRMPT = "Order number: ":OP_ID:" is not on file"
      CAPTION = "Invoicing"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

   CASE ERROR_STATUS = ERR_BUSY  ;* USER ENTERED ORDER IS LOCKED BY SOMEONE ELSE
      PRMPT = "Order number: ":OP_ID:" is in use, cannot proceed with invoicing"
      CAPTION = "Invoicing"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

   CASE 1
      *
      * WE LOCKED AND READ THE ORDER PARENT, NOW GET THE CHILD
      *
      CALL GET.RECORD("ORDER_CHILD",C.ORDER_CHILD,OC_ID,OC_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      BEGIN CASE
         CASE ERROR_STATUS = ERR_NOF  ;*  NON - EXISTENT ORDER CHILD #
            *
            * UNLOCK, REPORT AND EXIT
            RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
            RELEASE C.FILE.VAR(C.ORDER_CHILD), OC_ID
            PRMPT = "Order number: ":OC_ID:" is not on file"
            CAPTION = "Invoicing"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

         CASE ERROR_STATUS = ERR_BUSY  ;* USER ENTERED ORDER IS LOCKED BY SOMEONE ELSE
            PRMPT = "Order number: ":OC_ID:" is in use, cannot proceed with invoicing"
            CAPTION = "Invoicing"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
         CASE 1
            CM_ID = OP_REC<OP_CUST>
            CALL GET.RECORD("CUSTOMERS",C.CUSTOMERS,CM_ID,CM_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
            IF ERROR_STATUS = '' THEN
               IF CM_REC<CM_QB_REFID> = '' AND NX_QB_ACCOUNTING THEN
                  *
                  *
                  *
                  PRMPT = "Customer ":CM_ID:" does not have a Quick Books Ref Id, cannot proceed with invoicing"
                  CAPTION = "Invoicing"
                  STYLE   = 2  ;* !
                  BUTTONS = 0  ;* ok
                  HELPID = ""
                  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
                  RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
                  RELEASE C.FILE.VAR(C.ORDER_CHILD), OC_ID
                  RELEASE C.FILE.VAR(C.CUSTOMERS), CM_ID
               END ELSE
                  SLIST = 'SSELECT SALES WITH SA_ORDER_ID = "':SEL.ORDER:'" AND WITH SA_INVOICE_ID = "" AND WITH SA_DEL_QTY # "" TO 2'
                  EXECUTE SLIST CAPTURING DMMY.OUT
                  *
                  BEGIN CASE
                        *
                     CASE @SELECTED LT 1
                        PRMPT = "No uninvoiced sales found for order: ":SEL.ORDER
                        CAPTION = "Invoicing"
                        STYLE   = 2  ;* !
                        BUTTONS = 0  ;* ok
                        HELPID = ""
                        CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
                     CASE 1
                        READLIST IDLIST FROM 2 THEN
                           LIST.CT = DCOUNT(IDLIST,@AM)
                           *
                           * GET THE SALES RECORDS, LOCK AND READ (ORDER PARENT & CHILD ALREADY LOCKED)
                           *
                           DIM SA_RECORDS(LIST.CT)            ;* CREATE AN ARRAY TO HOLD THE SALES RECORDS
                           *
                           FOR SI = 1 TO LIST.CT
                              SA_ID = IDLIST<SI,1>
                              CALL GET.RECORD("SALES",C.SALES,SA_ID,SA_RECORDS(SI),@TRUE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
                              IF ERROR_STATUS # '' THEN
                                 *
                                 * CANNOT GET SALES RECORD, STOP INVOICING
                                 *
                                 PRMPT = "Unable to access sales record ":SA_ID:" reason ":ERROR_STATUS
                                 CAPTION = "Invoicing"
                                 STYLE   = 2  ;* !
                                 BUTTONS = 0  ;* ok
                                 HELPID = ""
                                 CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
                                 FOR I = 1 TO SI
                                    SA_ID = IDLIST<I,1>
                                    RELEASE C.FILE.VAR(C.SALES), SA_ID
                                 NEXT I
                                 RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
                                 RELEASE C.FILE.VAR(C.ORDER_CHILD), OC_ID
                                 GOTO SEL.SALES.999
                              END ELSE
                                 SALES.DETAIL.LIST<1,SI,1> = 1 ;* SELECTED FLAG
                                 SALES.DETAIL.LIST<1,SI,2> = SA_ID  ;* PACKSLIP ID FOR SALES RECORD
                                 SALES.DETAIL.LIST<1,SI,3> = SA_RECORDS(SI)<SA_PART_NBR> ;* PART NUMBER ON SALES RECORD
                                 DEL.DATE = SA_RECORDS(SI)<SA_DEL_DATE>
                                 IF DEL.DATE = '' THEN DEL.DATE = DATE()   ;* FOR EXTRA CHARGES, NO DEL DATE
                                 SALES.DETAIL.LIST<1,SI,4> = OCONV(DEL.DATE,SA_DEL_DATE.CNV) ;* DATE SHIPPED
                                 SALES.DETAIL.LIST<1,SI,5> = SA_RECORDS(SI)<SA_DEL_QTY> ;*QTY SHIPPED
                                 *
                                 * DO WE HAVE A PRICE FOR THIS ITEM?
                                 *
                                 IF (SA_RECORDS(SI)<SA_PRICE_EA> + 0) EQ 0 THEN
                                    *
                                    * NOT ON SALES, HOW ABOUT ORDER CHILD?
                                    *
                                    IF OC_REC<OC_PRICE_EA> GT 0 THEN
                                       SA_RECORDS(SI)<SA_PRICE_EA> = OC_REC<OC_PRICE_EA>
                                    END
                                 END
                                 *
                                 *
                                 PRICE.EA = SA_RECORDS(SI)<SA_PRICE_EA> + 0
                                 IF PRICE.EA LE 0 THEN
                                    SEL.ROW = SI
                                    PN_ID = SA_RECORDS(SI)<SA_PART_NBR>
                                    GOSUB LOAD.PRICE
                                    SALES.DETAIL.LIST<1,SI,6> = 0.00   ;*PRICE EACH
                                    SALES.DETAIL.LIST<1,SI,7> = 0.00   ;*LINE TOTAL
                                 END ELSE
                                    IF SA_RECORDS(SI)<SA_LOT_FLAG> THEN ;* LOT CHARGE ??
                                       SALES.DETAIL.LIST<1,SI,6> = OCONV(SA_RECORDS(SI)<SA_PRICE_EA>,SA_PRICE_EA.CNV) ;*PRICE EACH
                                       SALES.DETAIL.LIST<1,SI,7> = SALES.DETAIL.LIST<1,SI,6>

                                    END ELSE
                                       SALES.DETAIL.LIST<1,SI,6> = OCONV(SA_RECORDS(SI)<SA_PRICE_EA>,SA_PRICE_EA.CNV) ;*PRICE EACH
                                       SALES.DETAIL.LIST<1,SI,7> = OCONV((SA_RECORDS(SI)<SA_DEL_QTY> * SA_RECORDS(SI)<SA_PRICE_EA>),SA_PRICE_EA.CNV) ;*LINE TOTAL
                                    END
                                    *
                                 END
                                 SALES.TOTAL += SALES.DETAIL.LIST<1,SI,7>
                              END
                           NEXT SI
                           SALES.DETAIL.COUNT = LIST.CT   ;* SET ITEMS IN SALES.DETAIL.LIST
                        END
                  END CASE
               END
            END ELSE
               PRMPT = "Customer: ":CM_ID:" is missing, on order number: ":OP_ID:",  cannot proceed with invoicing"
               CAPTION = "Invoicing"
               STYLE   = 2  ;* !
               BUTTONS = 0  ;* ok
               HELPID = ""
               CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
               RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
               RELEASE C.FILE.VAR(C.ORDER_CHILD), OC_ID
            END
      END CASE
END CASE
SEL.SALES.999: *
RETURN
************************************************************
* $PAGE$
************************************************************
UPDATE.SALES: *
*
* ROUTINE UPDATES SALES SELECTION LIST INTO GRDLINES
*

CTRLIDS = ""
PROPS   = ""
VALUES  = ""
*
CTRLIDS<-1> = "GRDLINES"
PROPS<-1>   = GPVALUE
VALUES<-1>  = SALES.DETAIL.LIST
*
CTRLIDS<-1> = "LBLTOTAMT"
PROPS<-1>   = GPVALUE
VALUES<-1>  = SALES.TOTAL"R2"
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR

RETURN
*
END
