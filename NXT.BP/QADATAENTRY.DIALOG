
SUBROUTINE QADATAENTRY.DIALOG(CHAR_ID,CHAR_TEXT,CHAR_VAL1,CHAR_VAL2,USER_VAL,GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: QADATAENTRY.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 03/05/2015
* UPDATED:
*
* MAINTENANCE RECORD:
*
*
* EQUATE:
*
*
* VARIABLES:
* CHAR_ID - CHARACTERISTIC ID
* CHAR_TEXT - CHARACTERISTIC TEXT
* CHAR_VAL1,CHAR_VAL2 - LIMITS OR ACCEPT / REJECT TEXT
* USER_VAL - RETURNED USER ENTERED VALUE
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* PROMPTS FOR CHARACTERISTIC VALUE
* VALIDATES AND NOTIFIES OPERATOR IF OUT OF TOLERANCE?
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID = "QADATAENTRY.DIALOG"
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'QADATAENTRY.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'QADATAENTRY.DIALOG' ELSE
   CALL ATGUIERROR(3,'QADATAENTRY.DIALOG','',0,GRFATAL,"'QADATAENTRY.DIALOG' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
* SEED GUI APPLICATION AND GUI FORM VARIABLES AT START UP
GUIAPP = 'QADATAENTRY'
GUIFRM = 'QADATAENTRY'
*
USER_VAL = ''
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('QADATAENTRY','QADATAENTRY','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
GOSUB LOAD.CTRLS
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='QADATAENTRY'
         BEGIN CASE
            CASE GUIFRM='QADATAENTRY'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.QADATAENTRY.QADATAENTRY.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNACCEPT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.QADATAENTRY.QADATAENTRY.BTNACCEPT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNOK'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.QADATAENTRY.QADATAENTRY.BTNOK.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNREJECT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.QADATAENTRY.QADATAENTRY.BTNREJECT.CLICK;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.QADATAENTRY.QADATAENTRY.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.QADATAENTRY.QADATAENTRY.BTNACCEPT.CLICK: *
USER_VAL = QA.CHAR.ACCEPT.TEXT
GOSUB GUI.QADATAENTRY.QADATAENTRY.CLOSE;GUIEVT=0
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.QADATAENTRY.QADATAENTRY.BTNOK.CLICK: *
CALL ATGUIGETPROP(GUIAPP,GUIFRM,"TXTVAL1",GPVALUE,0,0,USER_VAL,GUIERRORS,GUISTATE)
IF USER_VAL # '' THEN
   DEC.FMT = "R":DECIMAL.COUNT
   USER_VAL = USER_VAL DEC.FMT
   MSG = ''
   BEGIN CASE
      CASE USER_VAL LT CHAR_VAL1
         MSG = USER_VAL : ' Is Under Low Limit ': CHAR_VAL1
      CASE USER_VAL GT CHAR_VAL2
         MSG = USER_VAL : ' Is Exceeds High Limit ': CHAR_VAL2
   END CASE
   IF MSG # '' THEN
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(MSG, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END
   GOSUB GUI.QADATAENTRY.QADATAENTRY.CLOSE;GUIEVT=0
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.QADATAENTRY.QADATAENTRY.BTNREJECT.CLICK: *
USER_VAL = QA.CHAR.REJECT.TEXT
GOSUB GUI.QADATAENTRY.QADATAENTRY.CLOSE;GUIEVT=0
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
LOAD.CTRLS:
CTRLIDS = "LBLCHARTEXT"
PROPS   = GPVALUE
VALUES  = CHAR_TEXT
*
CTRLIDS<2> = "LBLCHARID"
PROPS<2>   = GPVALUE
VALUES<2>  = CHAR_ID
*
IF CHAR_VAL1 = QA.CHAR.ACCEPT.TEXT THEN  ;*  GOOD / BAD CHARACTERISTIC

   CTRLIDS<3> = "BTNREJECT"
   PROPS<3>   = GPVISIBLE
   VALUES<3>  = 1
   *
   CTRLIDS<4> = "BTNACCEPT"
   PROPS<4>   = GPVISIBLE
   VALUES<4>  = 1
   *
   CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR

END ELSE
   *
   * IS A VARIABLE CHARACTERISTIC
   *
   * DETERMINE PRECISION
   *
   DECIMAL.COUNT = LEN(FIELD(CHAR_VAL1,'.',2))


   *
   CTRLIDS<3> = "LBLVAL2"
   PROPS<3>   = GPVISIBLE
   VALUES<3>  = 1
   *
   CTRLIDS<4> = "LBLVAL1"
   PROPS<4>   = GPVALUE
   VALUES<4>  = CHAR_VAL1
   *
   CTRLIDS<5> = "LBLVAL2"
   PROPS<5>   = GPVALUE
   VALUES<5>  = CHAR_VAL2
   *
   CTRLIDS<6> = "BTNOK"
   PROPS<6>   = GPVISIBLE
   VALUES<6>  = 1
   *
   CTRLIDS<7> = "TXTVAL1"
   PROPS<7>   = GPVISIBLE
   VALUES<7>  = 1
   *
   CTRLIDS<8> = "LBLVAL1"
   PROPS<8>   = GPVISIBLE
   VALUES<8>  = 1
   *
   CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   *
   CALL ATGUIACTIVATE(GUIAPP,GUIFRM, "TXTVAL1", GUIERRORS, GUISTATE)
END
*

*

RETURN
*
END
