SUBROUTINE PRINT.AP.CHECK(AP.LIST,CHK.AMT,CHECK.DATE,VN.ID,VEN.REC,PAYOR.NAME,CHECK.PRINTER)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: PRINT.AP.CHECK
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 05/15/2014
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
**
*  AP.LIST<1,AI,1> = ;* 1 = SELECTED 0 = NOT SELECTED
*  AP.LIST<1,AI,2> = ;* INVOICE NUMBER
*  AP.LIST<1,AI,3> = DUE_DATE - FORMATED: AP_DUE_DATE.CNV
*  AP.LIST<1,AI,4> = AP_INV_AMT FORMATED: AP_INV_AMT.CNV
*  AP.LIST<1,AI,5> = AP_BAL_DUE FORMATED: AP_BAL_DUE.CNV
*  AP.LIST<1,AI,6> = AMOUNT TO PAY FORMATED: AP_BAL_DUE.CNV
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* PRINT CHECK
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES VENDORS.H
$INCLUDE NXT.INCLUDES AP_CHECKS.H
*
EQU CRLF TO CHAR(13):CHAR(10)
*
UNL.ON = ESC:"&d0D"
UNL.OFF = ESC:"&d@"
BLD.ON  = ESC:"(s4B"
BLD.OFF = ESC:"(s0B"
*
* SET UP AN ARRAY FOR WORDS ON THE CHECK
*
DIM WORD1(19), WORD2(9)
WORD1(1)='ONE '
WORD1(2)='TWO '
WORD1(3)='THREE '
WORD1(4)='FOUR '
WORD1(5)='FIVE '
WORD1(6)='SIX '
WORD1(7)='SEVEN '
WORD1(8)='EIGHT '
WORD1(9)='NINE '
WORD1(10)='TEN '
WORD1(11)='ELEVEN '
WORD1(12)='TWELVE '
WORD1(13)='THIRTEEN '
WORD1(14)='FOURTEEN '
WORD1(15)='FIFTEEN '
WORD1(16)='SIXTEEN '
WORD1(17)='SEVENTEEN '
WORD1(18)='EIGHTEEN '
WORD1(19)='NINETEEN '
WORD2(1)=''
WORD2(2)='TWENTY '
WORD2(3)='THIRTY '
WORD2(4)='FORTY '
WORD2(5)='FIFTY '
WORD2(6)='SIXTY '
WORD2(7)='SEVENTY '
WORD2(8)='EIGHTY '
WORD2(9)='NINETY '
HUNDRED='HUNDRED '
THOUSAND='THOUSAND '
MILLION='MILLION '
*
*
MN.010: *
CHECK.AMT = CHK.AMT   ;* SAVE CALLER PASSED CHECK AMOUNT
GOSUB PRO.CHECK
PRINT ON CHECK.PRINTER CHK
PRINTER CLOSE ON CHECK.PRINTER
RETURN
!
* PRO.CHECK
!
PRO.CHECK:
*
CHK = ''
*
CHK := ESC:"E"      ;* RESET PRINTER
CHK := ESC:"&k0S"   ;* 10 CPI
CHK := ESC:"&l8D"   ;*  8 LINES / INCH
CHK := BLD.OFF      ;* BOLD OFF
*


*
CHK := SPACE(42):OCONV(CHECK.DATE,AC_DATE.CNV):CRLF
CHK := CRLF
CHK := CRLF
CHK := CRLF
*

AMOUNT= OCONV(CHECK.AMT,'MR03')
GOSUB CALC.CHECK.TEXT
*
CHECK.AMT = OCONV(CHECK.AMT,'MR25,')
STAR.CNT  = 12 - LEN(CHECK.AMT)
IF STAR.CNT LE 0 THEN
  STARS = ''
END ELSE
  STARS = STR('*',STAR.CNT)
END
*
CHK := CRLF
CHK := SPACE(10):PAYOR.NAME"L#57":BLD.ON:STARS:CHECK.AMT:BLD.OFF:CRLF
CHK := CRLF
*
WORD.AMT=WORD.AMT:' AND ':CENTS:'/100 '
IF LEN(WORD.AMT) < 65 THEN
  CHK := CRLF
END ELSE
  WORD.1=WORD.AMT[1,65]       ;* PRINT ON MORE THAN ONE LINE
  FOR X = 65 TO 1 STEP -1
    IF WORD.1[X,1]=' ' THEN
      CHK := SPACE(8):BLD.ON:WORD.1[1,X]:BLD.OFF
      WORD.AMT=WORD.AMT[X+1,130]
      GOTO 325
    END
  NEXT X
END
*
325 *
*
STAR.CNT = 65-LEN(WORD.AMT)
IF STAR.CNT LE 0 THEN
  STARS = ''
END ELSE
  STARS = STR('*',STAR.CNT)
END
*
CHK := SPACE(10):BLD.ON:WORD.AMT:STARS:BLD.OFF:CRLF
CHK := CRLF
CHK := CRLF
CHK := CRLF
CHK := SPACE(8):PAYOR.NAME:CRLF
*
IF VN.ID # 'MISC' THEN
  *
  * STREET
  *
  IF VEN.REC<VN_ADDR> # '' THEN
    CHK := SPACE(8):VEN.REC<VN_ADDR>:CRLF
  END
  *
  * ADDRESS 2
  *
  IF VEN.REC<VN_ADDR2> # '' THEN
    CHK := SPACE(8):VEN.REC<VN_ADDR2>:CRLF
  END
  *
  * CITY
  *
  IF VEN.REC<VN_CITY> # '' THEN
    CHK := SPACE(8):VEN.REC<VN_CITY>:', '
  END
  *
  * STATE
  *
  IF VEN.REC<VN_STATE> # '' THEN
    CHK := VEN.REC<VN_STATE>:' '
  END
  *
  * ZIP
  *
  IF VEN.REC<VN_ZIP> # '' THEN
    CHK := VEN.REC<VN_ZIP>
  END
  CHK := CRLF
END
*
*CHK := CRLF: 'VENDOR ID: ':VEN.ID"L#10":'   PAYOR: ':PAYOR.NAME:CRLF
*
GOSUB STUB.PRINT

RETURN
* $PAGE$
!
* STUB.PRINT
!
STUB.PRINT:
*
FOR I = 1 TO 8
  CHK := CRLF
NEXT I
*
CHK := UNL.ON:'Invoice Number / Reference      Date          Amount':UNL.OFF:'     Check Date: ':OCONV(CHECK.DATE,AC_DATE.CNV):CRLF
*
INV.COUNT = DCOUNT(AP.LIST<1>,@VM)
FOR I = 1 TO INV.COUNT
  IF AP.LIST<1,I,1> THEN   ;* INVOICE SELECTED FOR PAYMENT
    CHK :=AP.LIST<1,I,2>"L#30":AP.LIST<1,I,3>:'  ':AP.LIST<1,I,6>"R#12":CRLF
  END
NEXT I
CHK := SPACE(33):'Total: ':OCONV(CHECK.AMT,'MR25,$')"R#12":CRLF
RETURN
!
CALC.CHECK.TEXT:  * SUBROUTINE TO CALCULATE WORD AMOUNT
*
DOLLARS=AMOUNT[1,LEN(AMOUNT)-2]
CENTS=AMOUNT[LEN(DOLLARS)+1,2]
IF DOLLARS<1 THEN WORD.AMT='ZERO ' ; RETURN
ON LEN(DOLLARS) GOTO 510, 510, 530, 540, 550, 560 ,570, 580
510 * ONE AND TWO
AMT=DOLLARS ; GOSUB 600
WORD.AMT=SUB.AMT
RETURN
530 * THREE
AMT=DOLLARS[1,1] ; GOSUB 600
WORD.AMT=SUB.AMT:HUNDRED
AMT=DOLLARS[2,2] ; GOSUB 600
WORD.AMT=WORD.AMT:SUB.AMT
RETURN
540 * FOUR
AMT=DOLLARS[1,1] ; GOSUB 600
WORD.AMT=SUB.AMT:THOUSAND
AMT=DOLLARS[2,1] ; GOSUB 600
IF SUB.AMT#'' THEN WORD.AMT=WORD.AMT:SUB.AMT:HUNDRED
AMT=DOLLARS[3,2] ; GOSUB 600
WORD.AMT=WORD.AMT:SUB.AMT
RETURN
550 * FIVE
AMT=DOLLARS[1,2] ; GOSUB 600
WORD.AMT=SUB.AMT:THOUSAND
AMT=DOLLARS[3,1] ; GOSUB 600
IF SUB.AMT#'' THEN WORD.AMT=WORD.AMT:SUB.AMT:HUNDRED
AMT=DOLLARS[4,2] ; GOSUB 600
WORD.AMT=WORD.AMT:SUB.AMT
RETURN
560 * SIX
AMT=DOLLARS[1,1] ; GOSUB 600
WORD.AMT=SUB.AMT:HUNDRED
AMT=DOLLARS[2,2] ; GOSUB 600
WORD.AMT=WORD.AMT:SUB.AMT:THOUSAND
AMT=DOLLARS[4,1] ; GOSUB 600
IF SUB.AMT#'' THEN WORD.AMT=WORD.AMT:SUB.AMT:HUNDRED
AMT=DOLLARS[5,2] ; GOSUB 600
WORD.AMT=WORD.AMT:SUB.AMT
RETURN
570 *
AMT=DOLLARS[1,1] ; GOSUB 600
WORD.AMT=SUB.AMT:MILLION
AMT=DOLLARS[2,1] ; GOSUB 600
IF SUB.AMT#'' THEN WORD.AMT=WORD.AMT:SUB.AMT:HUNDRED
AMT=DOLLARS[3,2] ; GOSUB 600
IF SUB.AMT#'' THEN WORD.AMT=WORD.AMT:SUB.AMT:THOUSAND
AMT=DOLLARS[5,1] ; GOSUB 600
IF SUB.AMT#'' THEN WORD.AMT=WORD.AMT:SUB.AMT:HUNDRED
AMT=DOLLARS[6,2] ; GOSUB 600
WORD.AMT=WORD.AMT:SUB.AMT
RETURN
580 *
AMT=DOLLARS[1,2] ; GOSUB 600
WORD.AMT=SUB.AMT:MILLION
AMT=DOLLARS[3,1] ; GOSUB 600
IF SUB.AMT#'' THEN WORD.AMT=WORD.AMT:SUB.AMT:HUNDRED
AMT=DOLLARS[4,2] ; GOSUB 600
IF SUB.AMT#'' THEN WORD.AMT=WORD.AMT:SUB.AMT:THOUSAND
AMT=DOLLARS[6,1] ; GOSUB 600
IF SUB.AMT#'' THEN WORD.AMT=WORD.AMT:SUB.AMT:HUNDRED
AMT=DOLLARS[7,2] ; GOSUB 600
WORD.AMT=WORD.AMT:SUB.AMT
RETURN
600 * NITTY GRITTY SUBROUTINE
IF AMT<1 THEN SUB.AMT='' ; RETURN
IF AMT < 20 THEN
  SUB.AMT=WORD1(AMT)
  RETURN
END
SUB.AMT=WORD2(AMT[1,1])
IF AMT[2,1]<1 THEN RETURN
SUB.AMT=SUB.AMT:WORD1(AMT[2,1])
RETURN
END
