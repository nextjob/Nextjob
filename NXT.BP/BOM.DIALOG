SUBROUTINE BOM.DIALOG(BOM_PN_ID,BOM_QTY,BOM_LT,BOM_REMOVE,RSP,GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: BOM.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2014
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
* BOM_PN_ID = COMPONET PART NUMBER
* BOM_QTY   = QTY PER ASSEM
* BOM_LT    = LEAD TIME IN DAYS
* BOM_REMOVE = REMOVE ITEM FROM BOM
* RSP = NXT.OK.RSP (OK CLICKED)  OR NXT.CANCEL.RSP (CANCEL CLICKED)
* FILES:
*
*
* DESIGN DESCRIPTION:
* *
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES PARTS_QTY.H
$INCLUDE NXT.INCLUDES PARTS_BOM.H
$INCLUDE NXT.INCLUDES PROCESS_STEPS.H
$INCLUDE NXT.INCLUDES PROCESS_GROUPS.H
$INCLUDE NXT.INCLUDES RECEIPTS.H
$INCLUDE NXT.INCLUDES RTREV.H
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES WRT.H

*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "BOM.DIALOG"
GUIERRORS = ''
GUIAPP = "BOM"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "BOM"
*
GUIERRORS = ''
MSG_LIST  = ''   ;* GET.RECORD MESSAGE LIST
BOM_REMOVE = 0   ;* INIT REMOVE COMPONET TO NO
RSP = NXT.CANCEL.RSP  ;* AND RETURN RESPONSE TO CANCEL
*
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'BOM.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'BOM.DIALOG' ELSE
   CALL ATGUIERROR(3,'BOM.DIALOG','',0,GRFATAL,"'BOM.DIALOG' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('BOM','BOM','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
*
* DID WE PASS A VALID BOM ENTRY?
*
IF BOM_PN_ID # '' THEN
   *
   CTRLIDS = "TXTPN"
   PROPS   = GPVALUE
   VALUES  = BOM_PN_ID
   *
   CTRLIDS<2> = "TXTQTY"
   PROPS<2>   = GPVALUE
   VALUES<2>  = OCONV(BOM_QTY,PB_QTY.CNV)
   *
   CTRLIDS<3> = "TXTLEADTIME"
   PROPS<3>   = GPVALUE
   VALUES<3>  = BOM_LT
   ***
   CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   *
END
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='BOM'
         BEGIN CASE
            CASE GUIFRM='BOM'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.BOM.BOM.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCANCEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.BOM.BOM.BTNCANCEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNOK'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.BOM.BOM.BTNOK.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='CHKREMOVE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.BOM.BOM.CHKREMOVE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTLEADTIME'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.BOM.BOM.TXTLEADTIME.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTPN'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.BOM.BOM.TXTPN.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTQTY'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.BOM.BOM.TXTQTY.VALIDATE;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.BOM.BOM.BTNCANCEL.CLICK: *
RSP = NXT.CANCEL.RSP
GOSUB GUI.BOM.BOM.CLOSE;GUIEVT=0
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.BOM.BOM.CHKREMOVE.CLICK: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.BOM.BOM.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.BOM.BOM.BTNOK.CLICK: *
*
* get remove state
*
CALL ATGUIGETPROP(GUIAPP,GUIFRM, "CHKREMOVE", GPVALUE, 0, 0,BOM_REMOVE, GUIERRORS, GUISTATE)
IF BOM_REMOVE THEN
   RSP = NXT.OK.RSP
   GOSUB GUI.BOM.BOM.CLOSE;GUIEVT=0
END ELSE  ;* NOT REMOVE CHECKED, MUST VALIDATE
   EMSG = ''
   BEGIN CASE
      CASE BOM_PN_ID = ''
         EMSG = 'Componet Part Number Required'
      CASE (BOM_QTY + 0)    = 0
         EMSG = 'Qty per Assembly Required'
      CASE (BOM_LT + 0)    = 0
         EMSG = 'Lead Time Required'
   END CASE
   IF EMSG # '' THEN
      PRMPT = EMSG
      CAPTION = "BOM Componet Entry"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END ELSE
      RSP = NXT.OK.RSP
      GOSUB GUI.BOM.BOM.CLOSE;GUIEVT=0
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.BOM.BOM.TXTLEADTIME.VALIDATE: *
IF NUM(GUIARGS<2>) THEN
   TSTQTY = GUIARGS<2> + 0
   IF TSTQTY GT 0 THEN
      BOM_LT = TSTQTY
   END ELSE
      *
      * BAD VALUE
      *
      WOQTY = 0
      PRMPT = 'LeadTime Must be > 0'
      CAPTION = "BOM Componet Entry"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
      * and reset to previous value
      *
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTLEADTIME",GPVALUE,"","",0,GUIERRORS,GUISTATE)

   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.BOM.BOM.TXTPN.VALIDATE: *
IF BOM_PN_ID = '' THEN
   BOM_PN_ID = OCONV(GUIARGS<2>,"MCU")
TRY.AGAIN:
   *
   CALL GET.RECORD("PARTS",C.PARTS,BOM_PN_ID,PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
   IF ERROR_STATUS = ERR_NOF OR PARTS_REC = '' THEN
      *
      * USER ENTERED PART WAS NOT FOUND, SEARCH FOR PART?
      *
      PRMPT = "Search for part number matching : ":BOM_PN_ID:"?"
      CAPTION = "BOM Componet Entry"
      STYLE   = 0  ;* no icon
      BUTTONS = 4  ;* yes / no
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      IF RESPONSE = 6 THEN  ;* yes, search for part
         PN_TO_SEARCH = BOM_PN_ID
         CALL PN.SEARCH(PN_TO_SEARCH,PN_SELECTED,GUIERRORS,GUISTATE)
         IF PN_SELECTED = '' THEN   ;* NONE FOUND OR SELECTED
            PRMPT = "No part number found"
            CAPTION = "BOM Componet Entry"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok only
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            BOM_PN_ID = ''
         END ELSE
            BOM_PN_ID = PN_SELECTED
            GOTO TRY.AGAIN
         END
      END ELSE
         BOM_PN_ID = ''  ;* NOT ON FILE, RETURN WITH NO PART NUMBER
      END
   END ELSE ;*  PART FOUND, DISPLAY IT AND RETURN TO CALLER
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTPN",GPVALUE,"","",BOM_PN_ID,GUIERRORS,GUISTATE)
   END
END ELSE
   PRMPT = "Cannot Change Componet Part Number of Existing Componet"
   CAPTION = "BOM Componet Entry"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTPN",GPVALUE,"","",BOM_PN_ID,GUIERRORS,GUISTATE)
END
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.BOM.BOM.TXTQTY.VALIDATE: *
IF NUM(GUIARGS<2>) THEN
   TSTQTY = GUIARGS<2> + 0
   IF TSTQTY GT 0 THEN
      BOM_QTY = ICONV(TSTQTY,PB_QTY.CNV)
   END ELSE
      *
      * BAD QOH VALUE
      *
      WOQTY = 0
      PRMPT = 'Qty Must be > 0'
      CAPTION = "BOM Componet Entry"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
      * and reset to previous value
      *
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTQTY",GPVALUE,"","",0,GUIERRORS,GUISTATE)

   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
*
END
