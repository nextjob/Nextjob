SUBROUTINE PN.DIALOG(PN_ID,PARTS_REC,KEEP_PN_LOCKED,GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: PN.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2007
* UPDATED:
*
* MAINTENANCE RECORD:
*
* 02/18/15 - PREVENT USER FROM SKIPPING ROW ON GRDPRO (CERT / PROCESS STEP ENTRY) ADDED GRDPRO.ACTIVATEROW EVENT
* 03/08/15  - INV BOM RT ESTIMTES ENABLED WHEN PART IN VIEW ONLY MODE, CORRECT
* 07/08/15 - add user defined fields (not complete)  **** also mod sales to copy over to OcUser1-6 -- may want to set this as an option?? )
*          - also need to add custom code (see OE)
* EQUATE:
*
*
* VARIABLES:
* PN_ID = PARTS RECORD TO CREATE / MODIFY
* PARTS_REC - PARTS RECORD CREATED OR MODIFIED
* KEEP_PN_LOCKED - KEEP PART LOCKED AFTER WRITE?
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* ROUTINE IS CALLED TO CREATE OR MODIFY A PART RECORD
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES PARTS_QTY.H
$INCLUDE NXT.INCLUDES PARTS_BOM.H
$INCLUDE NXT.INCLUDES PROCESS_STEPS.H
$INCLUDE NXT.INCLUDES PROCESS_GROUPS.H
$INCLUDE NXT.INCLUDES RECEIPTS.H
$INCLUDE NXT.INCLUDES RTREV.H
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES WRT.H

*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "PN.DIALOG"
GUIERRORS = ''
GUIAPP = "PARTS"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "PART"
*
* Open the GUI project file
* Open the GUI project file containing modified projects
OPEN 'NXT.MODS' TO GUI.PROJECT.FILE THEN
* See if there is a modified project
   READ TEMPLATE FROM GUI.PROJECT.FILE,'PARTS' ELSE
*    There is not a modified project, close file and look for project in NXT.FORMS
      CLOSE GUI.PROJECT.FILE
      OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
         CALL ATGUIERROR(3,'PARTS','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
         RETURN
      END
   END
END ELSE
   CALL ATGUIERROR(3,'PARTS','',0,GRFATAL,"'NXT.MODS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'PARTS' ELSE
   CALL ATGUIERROR(3,'PARTS','',0,GRFATAL,"'PARTS' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
*
* POPULATE CERT CODE DROP DOWN LIST IN GRDPRO WITH CERT CODES
CALL LOAD.PROCESS.CERTS(CERT.LIST,CERT.IDS,CERT.CT,GUIAPP,GUIFRM,"GRDPRO",GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* POPULATE PROCESS ID DROP DOWN LIST IN GRDPRO WITH PROCESS GROUPS & STEPS
CALL LOAD.PROCESS.GROUPS.STEPS(PROCESS.STEP.LIST,PROCESS.IDS,LIST.CT,GUIAPP,GUIFRM,"GRDPRO",GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR

* Add your code to load initial values here...
CALL ATGUISHOW('PARTS','PART','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
*
* INIT SOME VARIBALES
*
SEQ.LIST = 0                 ;* DYNAMIC ARRAY TO HOLD INFO FOR GRDRT
PROCESS.STEP.SELECTED = 0    ;* PROCESSES STEP SELECTED
ENG_ID = ''                  ;* ENGINEERING ID
GET_REC_MSG_LIST = ''
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"DEFAULTS",DEFAULTS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"NETWORK_PATH",NETWORK_PATH_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
NETWORK.PATH = OCONV(NETWORK_PATH_REC<1>,"MCU")
SERVER.PATH = OCONV(NETWORK_PATH_REC<2>,"MCU")
*
USER_RECORD_ID = "USER*":@LOGNAME
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,USER_RECORD_ID,USER_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF USER_REC # '' THEN
   IF USER_REC<USER_PRICE_RESTRICTED> THEN
      USER.IS.RESTRICTED = @TRUE
   END ELSE
      USER.IS.RESTRICTED = @FALSE
   END
*
   IF USER_REC<USER_PROCESS_PRINTER> = '' THEN
      PROCESS.PRINTER = 0  ;* SET TO DEFAULT PRINTER
      LOG.OPTS  = "DISPLAY"
      ERROR_NBR = ERR_SYS
      ERROR_MSG =  "Missing PROCESS_PRINTER in USER record in, SYSTEM_FILE"
      CALL LOG.ERROR(LOG.OPTS,"PN.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   END ELSE
      PROCESS.PRINTER = USER_REC<USER_PROCESS_PRINTER>
   END
*
END ELSE
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "Unknow User: ":@LOGNAME
   CALL LOG.ERROR(LOG.OPTS,"PN.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GOSUB GUI.PARTS.PART.CLOSE;GUIEVT=0
END
*
MATL.LIST   = '' ;* ;LIST OF MATERIAL TYPES GET FROM VALIDATION_FILE AND LOAD INTO THE CONTROL
MATL.IDX    = ''
CALL LIST.LOAD(C.VALIDATION_FILE,"MATERIAL","2",'',MATL.LIST,MATL.IDX,LIST.COUNT,EMSG)
CTRLIDS = "CBMATL"
PROPS   = GPITEMS
VALUES  = MATL.LIST
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,CTRLIDS,PROPS,"","",VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
SPC.LIST   = '' ;* ;LIST OF SALES CODES GET FROM VALIDATION_FILE AND LOAD INTO THE CONTROL
SPC.IDX    = ''
CALL LIST.LOAD(C.VALIDATION_FILE,"SALES.CODES","2",'',SPC.LIST,SPC.IDX,LIST.COUNT,EMSG)
CTRLIDS = "LBSPC"
PROPS   = GPITEMS
VALUES  = SPC.LIST
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,CTRLIDS,PROPS,"","",VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
CALL GET.RECORD("VALIDTAION_FILE",C.VALIDATION_FILE,"LOT.CHARGES",LOT.CHARGES,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF LOT.CHARGES = '' THEN
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "LOT.CHARGES not found in VALIDATION_FILE"
   CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GOSUB GUI.PARTS.PART.CLOSE;GUIEVT=0
END
*
* LOAD IN LOT CHARGE DESCRIPTIONS INTO QUOTE GRID, PRICE COLUMN
*
DMMY.LIST = ''
TEMP.LIST = ''
LOT.LIST  = ''
CALL LIST.LOAD(C.VALIDATION_FILE,"LOT.CHARGES","",'',DMMY.LIST,TEMP.LIST,LIST.COUNT,EMSG)
FOR I = 1 TO LIST.COUNT
   LOT.LIST<1,1,I> = TEMP.LIST<I>
NEXT I
CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDLINES",GPCOLITEMS,2,0,LOT.LIST,GUIERRORS,GUISTATE)


*
* GET THE PART RECORD
*
PARTS_REC = ''
PARTS_QTY = ''
PARTS_BOM = ''
SAVE_PARTS_REC = ''
SAVE_PARTS_QTY = ''
SAVE_PARTS_BOM = ''
IF PN_ID # '' THEN   ;* CALLER PASSED PART NUMBER
   USER.PASSED.PN = @TRUE
   GOSUB PART.GET
END ELSE
* ENABLE PNTXT (ONLY) AND WAIT FOR USER ACTION
   USER.PASSED.PN = @FALSE
   GOSUB ENABLE.NEW.PN.CTRLS
   CALL ATGUIACTIVATE(GUIAPP,GUIFRM,"TXTPN",GUIERRORS,GUISTATE)
END
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
* Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
* We could call ATGUISHUTDOWN here if we wanted, but there's no
* harm just leaving the GUI environment initialized, in case we
* want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
* Add your code here...
END ELSE
* Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='PARTS'
         BEGIN CASE
            CASE GUIFRM='PART'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.PARTS.PART.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNACT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNACT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNADD'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNADD.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNBROWSE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNBROWSE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCANCEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNCANCEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCOPY'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNCOPY.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNDEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNDEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNDELPRO'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNDELPRO.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNESTFILE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNESTFILE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNESTNOTES'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNESTNOTES.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNESTPRINT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNESTPRINT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNFILE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNFILE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNINSAFTER'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNINSAFTER.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNINSBEFORE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNINSBEFORE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNMOD'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNMOD.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNPOACT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNPOACT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNPRINT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNPRINT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNPRINTBOM'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNPRINTBOM.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNROLLSTDS'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNROLLSTDS.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTCOPY'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNRTCOPY.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTDELSEQ'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNRTDELSEQ.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTINSAFTER'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNRTINSAFTER.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTINSBEFORE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNRTINSBEFORE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTMOD'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNRTMOD.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTNEW'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNRTNEW.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTPRT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNRTPRT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTRENBR'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNRTRENBR.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNRTREV'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.BTNRTREV.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='CBMATL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.CBMATL.CLICK;GUIEVT=0
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.CBMATL.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='CHKFROZEN'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.CHKFROZEN.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='CHKPURCHASE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.CHKPURCHASE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='CHKTESTPCS'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.CHKTESTPCS.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='GRDBOM'
                     BEGIN CASE
                        CASE GUIEVT=GEBTNCLICK
                           GOSUB GUI.PARTS.PART.GRDBOM.BTNCLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='GRDLINES'
                     BEGIN CASE
                        CASE GUIEVT=GEDBLCLICK
                           GOSUB GUI.PARTS.PART.GRDLINES.DBLCLICK;GUIEVT=0
                        CASE GUIEVT=GEVALIDATEROW
                           GOSUB GUI.PARTS.PART.GRDLINES.VALIDATEROW;GUIEVT=0
                     END CASE
                  CASE GUICTL='GRDPRO'
                     BEGIN CASE
                        CASE GUIEVT=GEACTIVATEROW
                           GOSUB GUI.PARTS.PART.GRDPRO.ACTIVATEROW;GUIEVT=0
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.GRDPRO.CLICK;GUIEVT=0
                        CASE GUIEVT=GEVALIDATECELL
                           GOSUB GUI.PARTS.PART.GRDPRO.VALIDATECELL;GUIEVT=0
                     END CASE
                  CASE GUICTL='GRDREVCTL'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATEROW
                           GOSUB GUI.PARTS.PART.GRDREVCTL.VALIDATEROW;GUIEVT=0
                     END CASE
                  CASE GUICTL='GRDRT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.GRDRT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LBSPC'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.LBSPC.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LSTESTRTLIST'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.LSTESTRTLIST.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LSTRTLIST'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.PARTS.PART.LSTRTLIST.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTDESC'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTDESC.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTDFLTENGID'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTDFLTENGID.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTDRAWING'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTDRAWING.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTLAB'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTLAB.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTLOC1'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTLOC1.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTLOC2'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTLOC2.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTLOC3'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTLOC3.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTMATL'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTMATL.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTNOTES'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTNOTES.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTOP'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTOP.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTPN'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTPN.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTPTUSER1'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTPTUSER1.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTPTUSER2'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTPTUSER2.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTPTUSER3'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTPTUSER3.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTPTUSER4'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTPTUSER4.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTPTUSER5'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTPTUSER5.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTPTUSER6'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTPTUSER6.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTQOH1'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTQOH1.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTQOH2'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTQOH2.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTQOH3'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTQOH3.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTREV'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTREV.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTSEQINC'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTSEQINC.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTSEQSTR'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTSEQSTR.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTSTDNOTES'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.PARTS.PART.TXTSTDNOTES.VALIDATE;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
* Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNACT.CLICK: *
IF PN_ID # '' AND PARTS_REC # '' THEN
   ACT.OPTS = ''
   CALL ACT.DIALOG(PN_ID,PARTS_REC,ACT.OPTS,RTN.DATA,GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNADD.CLICK: *
BOM_PN_ID = ''
BOM_QTY = ''
BOM_LT = ''
CALL BOM.DIALOG(BOM_PN_ID,BOM_QTY,BOM_LT,BOM_REMOVE,RSP,GUIERRORS,GUISTATE)
IF RSP = NXT.CANCEL.RSP THEN  ;* (CANCEL CLICKED)
   NULL
END ELSE   ;* MUST BE AN OK CLICK
   IF BOM_PN_ID # '' THEN
      PARTS_BOM<PB_PARTNBR,-1>  = BOM_PN_ID
      PARTS_BOM<PB_QTY,-1>  = BOM_QTY
      PARTS_BOM<PB_LEADTIME,-1>  = BOM_LT
   END
   GOSUB LOAD.BOMTAB
END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNCOPY.CLICK: *
MSG_LIST = ''
MSG_LIST<1> = "Unable to Update Lock: ":PN_ID:@SVM:"Click OK to Proceed Without Locking Record,":@SVM:"Cancel to Reattempt Lock"
MSG_LIST<2> = "Record not Locked,":@SVM:"Updates Not Allowed!"
*
PRMPT = 'Enter Part Number to Create via Copy'
CAPTION = "PN.DIALOG"
DEFAULT   = ""
HELPID = ""
CALL ATGUIINPUTBOX(PRMPT, CAPTION, DEFAULT, HELPID, COPY_ID, GUIERRORS, GUISTATE)
IF COPY_ID # '' THEN
   PRMPT = 'Copy Part ':PN_ID:@SVM:'To Part ':COPY_ID
   CAPTION = "PN.DIALOG"
   STYLE   = 2  ;* !
   BUTTONS = 4  ;* YES / NO
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   IF RESPONSE = 6 THEN
*
* USER OK'D COPY, FIRST MAKE SURE THIS PART DOES NOT EXIST
*
      MSG_LIST = ''
      MSG_LIST<1> = "Unable to Update Lock: ":COPY_ID:@SVM:"Click OK"
      MSG_LIST<2> = "Record not Locked,":@SVM:"Updates Not Allowed!"

*
      CALL GET.RECORD("PARTS",C.PARTS,COPY_ID,COPY_REC,@TRUE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
      IF ERROR_STATUS = ERR_NOF THEN
         CALL WRITE.RECORD(COPY_ID,PARTS_REC,C.PARTS,@FALSE,ERROR_STATUS)
         PRMPT = 'Part ':PN_ID:' Copied To Part ':COPY_ID
         CAPTION = "PN.DIALOG"
         STYLE   = 4  ;* i
         BUTTONS = 0  ;* OK ONLY
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      END ELSE
         PRMPT = 'Part ':COPY_ID:' Already Exists, Copy Not Allowed'
         CAPTION = "PN.DIALOG"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* OK ONLY
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      END
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNESTFILE.CLICK: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNESTNOTES.CLICK: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNESTPRINT.CLICK: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNPOACT.CLICK: *
IF PN_ID # '' THEN
   OPTIONS = ''
   CALL PUR_ACT.DIALOG(PN_ID,PARTS_REC,OPTIONS,RTN.DATA,GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNPRINTBOM.CLICK: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNROLLSTDS.CLICK: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNRTCOPY.CLICK: *
FROM_PN_ID = ''
CALL RTCOPY.DIALOG(FROM_PN_ID,PN_ID,TO_ENG_ID,COPY_STATUS,GUIERRORS,GUISTATE)
IF COPY_STATUS = RT_COPY THEN
*
* ALWAYS UPDATE ENG_ID ON THIS PART
   PARTS_REC<PT_ENG_ID> = TO_ENG_ID
   ENG_ID = TO_ENG_ID
   WRITEV ENG_ID TO C.FILE.VAR(C.PARTS), PN_ID, PT_ENG_ID
*
* CREATE THE RT REV RECORD
*
   RTREV_REC = ''
   RTREV_REC<RTR_REVNBR> = 1
   RTREV_REc<RTR_DESC,1> = '- ':TIMEDATE():' ':@LOGNAME:' Rev: ':RTREV_REC<RTR_REVNBR>:' -----------------------------------'
   RTREV_REc<RTR_DESC,2> = 'Original Release (Copy)'
   RTREV_ID = PN_ID:'*':TO_ENG_ID
   CALL WRITE.RECORD(RTREV_ID,RTREV_REC,C.RTREV,@FALSE,ERROR_STATUS)
*
   CALL WRT.LSTRTLIST.UPDATE(PN_ID,ENG.LIST,PARTS_REC,"LSTRTLIST",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
*
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNRTDELSEQ.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
   CURR_SEQ = SEQ.LIST<1,PROCESS.STEP.SELECTED,1>
   IF  CURR_SEQ = '' THEN
      PRMPT = 'This Routing Sequence is Undefined,':@SVM:'Cannot Delete'
      CAPTION = "Part Maintenance"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
   END ELSE

*
      RT_ID = PN_ID:'*':ENG_ID:'*':CURR_SEQ
      CALL GET.RECORD("RT",C.RT,RT_ID,RT_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      IF ERROR_STATUS = ERR_NOF THEN
         LOG.OPTS = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG =  ERR_MESSAGE(ERR_SYS):' RT: ': RT_ID : ' Not on file but in Seq List!'
         CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      END ELSE
*
* GET DELETE CONFIRMATION
*
         PRMPT = 'Delete Routing Seq: ':FIELD(RT_ID,'*',3):'?'
         CAPTION = "Part Maintenance"
         STYLE   = 0  ;* no icon
         BUTTONS = 4  ;* YES / NO
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         IF RESPONSE = 6 THEN
*
* DELETE THE RT RECORD
*
            DELETE C.FILE.VAR(C.RT), RT_ID
*  RESET SELECTED HIGHLIGHT
            CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
            IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
            PROCESS.STEP.SELECTED = 0
            CALL WRT.GRDRT.UPDATE(PN_ID,ENG_ID,SEQ.LIST,"GRDRT",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
         END

* UPDATE CONTROL
      END
   END

END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNRTINSAFTER.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
   CURR_SEQ = SEQ.LIST<1,PROCESS.STEP.SELECTED,1>
   IF  CURR_SEQ = '' THEN
      PRMPT = 'This Routing Sequence is Undefined,':@SVM:'Cannot Insert After'
      CAPTION = "PN.DIALOG"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
   END ELSE

* INSERT SELECTED STEP
*
* GET SEQ INC NUMBER
*
      CALL ATGUIGETPROP(GUIAPP,GUIFRM, "TXTSEQINC", GPVALUE, 0, 0,SEQINC, GUIERRORS, GUISTATE)
*
* CREATE INSERT SEQ ID
*
      CALL WRT.CALC.RT.SEQNBR(CURR_SEQ,SEQINC,SEQ.LIST,NEW_SEQ_NBR,GUIERRORS,GUISTATE)
      IF NEW_SEQ_NBR # '' THEN
*
* ONLY PROCEED IF WE ENDED UP WITH A VALID SEQ NUMBER!
*RESET BACKGOUND COLOR TO DELFAULT
*
         RT_ID = PN_ID:'*':ENG_ID:'*':NEW_SEQ_NBR
         RT_REC = ''
*
* CALL THE ROUTING SEQ EDITOR FORM
*
         CALL RT.DIALOG(PROG_ID,RT_ID,RT_REC,PN_ID,PARTS_REC<PT_DESC>,PARTS_REC<PT_DRAWING>,ENG_ID,C.RT,ACTION,GUIERRORS,GUISTATE)
         IF ACTION = RT_FILE THEN
*
* WRITE RT RECORD ON FILE
*
            CALL WRITE.RECORD(RT_ID,RT_REC,C.RT,@FALSE,ERROR_STATUS)
            CALL WRT.GRDRT.UPDATE(PN_ID,ENG_ID,SEQ.LIST,"GRDRT",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
         END
*  RESET SELECTED HIGHLIGHT
         CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         PROCESS.STEP.SELECTED = 0
* UPDATE CONTROL
      END
   END

END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNRTINSBEFORE.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
   CURR_SEQ = SEQ.LIST<1,PROCESS.STEP.SELECTED,1>
   IF  CURR_SEQ = '' THEN
      PRMPT = 'This Routing Sequence is Undefined,':@SVM:'Cannot Insert Before'
      CAPTION = "PN.DIALOG"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
   END ELSE

* INSERT SELECTED STEP
*
* GET SEQ INC NUMBER
*
      CALL ATGUIGETPROP(GUIAPP,GUIFRM, "TXTSEQINC", GPVALUE, 0, 0,SEQINC, GUIERRORS, GUISTATE)
*
* CREATE INSERT SEQ ID
*
      SEQINC = SEQINC * -1
      CALL WRT.CALC.RT.SEQNBR(CURR_SEQ,SEQINC,SEQ.LIST,NEW_SEQ_NBR,GUIERRORS,GUISTATE)
      IF NEW_SEQ_NBR # '' THEN
*
* ONLY PROCEED IF WE ENDED UP WITH A VALID SEQ NUMBER!
*RESET BACKGOUND COLOR TO DELFAULT
*
         RT_ID = PN_ID:'*':ENG_ID:'*':NEW_SEQ_NBR
         RT_REC = ''
*
* CALL THE ROUTING SEQ EDITOR FORM
*
         CALL RT.DIALOG(PROG_ID,RT_ID,RT_REC,PN_ID,PARTS_REC<PT_DESC>,PARTS_REC<PT_DRAWING>,ENG_ID,C.RT,ACTION,GUIERRORS,GUISTATE)
         IF ACTION = RT_FILE THEN
*
* WRITE RT RECORD ON FILE
*
            CALL WRITE.RECORD(RT_ID,RT_REC,C.RT,@FALSE,ERROR_STATUS)
            CALL WRT.GRDRT.UPDATE(PN_ID,ENG_ID,SEQ.LIST,"GRDRT",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
         END
*  RESET SELECTED HIGHLIGHT
         CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         PROCESS.STEP.SELECTED = 0
* UPDATE CONTROL
      END
   END

END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNRTMOD.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
   CURR_SEQ = SEQ.LIST<1,PROCESS.STEP.SELECTED,1>
   IF  CURR_SEQ = '' THEN
      PRMPT = 'This Routing Sequence is Undefined,':@SVM:'Cannot Modify'
      CAPTION = "PN.DIALOG"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
   END ELSE

*
      RT_ID = PN_ID:'*':ENG_ID:'*':CURR_SEQ
      CALL GET.RECORD("RT",C.RT,RT_ID,RT_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      IF ERROR_STATUS = ERR_NOF THEN
         LOG.OPTS = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG =  ERR_MESSAGE(ERR_SYS):' RT: ': RT_ID : ' Not on file but in Seq List!'
         CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      END ELSE
*
* CALL THE ROUTING SEQ EDITOR FORM
*
         CALL RT.DIALOG(PROG_ID,RT_ID,RT_REC,PN_ID,PARTS_REC<PT_DESC>,PARTS_REC<PT_DRAWING>,ENG_ID,C.RT,ACTION,GUIERRORS,GUISTATE)
         IF ACTION = RT_FILE THEN
*
* WRITE RT RECORD ON FILE
*
            CALL WRITE.RECORD(RT_ID,RT_REC,C.RT,@FALSE,ERROR_STATUS)
            CALL WRT.GRDRT.UPDATE(PN_ID,ENG_ID,SEQ.LIST,"GRDRT",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
         END ELSE
            RELEASE C.FILE.VAR(C.RT),  RT_ID
         END
*  RESET SELECTED HIGHLIGHT
         CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         PROCESS.STEP.SELECTED = 0
* UPDATE CONTROL
      END
   END

END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNRTNEW.CLICK: *
IF PARTS_REC # '' THEN
   ENG_ID = PARTS_REC<PT_ENG_ID> + 1
*
* GET STARTING SEQ NUMBER
*
   CALL ATGUIGETPROP(GUIAPP,GUIFRM, "TXTSEQSTR", GPVALUE, 0, 0,STARTSEQ, GUIERRORS, GUISTATE)
*
* CREATE STARTING SEQ ID
*
   RT_ID = PN_ID:'*':ENG_ID:'*':STARTSEQ
   RT_REC = ''
*
* CLEAR THE CURRENT SEQ.LIST
*
   SEQ.LIST = ''
   CALL ATGUISETPROPS(GUIAPP,GUIFRM,"GRDRT",GPVALUE,SEQ.LIST,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* CALL THE ROUTING SEQ EDITOR FORM
*WRT_ID,CALLER_WRT_REC,PN_ID,PARTS_REC,WRT.FILEID,ACTION,GUIERRORS,GUISTATE
   CALL RT.DIALOG(PROG_ID,RT_ID,RT_REC,PN_ID,PARTS_REC<PT_DESC>,PARTS_REC<PT_DRAWING>,ENG_ID,C.RT,ACTION,GUIERRORS,GUISTATE)
   IF ACTION = RT_FILE THEN
*
* WRITE RT RECORD ON FILE
*
      CALL WRITE.RECORD(RT_ID,RT_REC,C.RT,@FALSE,ERROR_STATUS)
      CALL WRT.GRDRT.UPDATE(PN_ID,ENG_ID,SEQ.LIST,"GRDRT",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
*
* CREATE THE RT REV RECORD
*
      RTREV_REC = ''
      RTREV_REC<RTR_REVNBR> = 1
      RTREV_REc<RTR_DESC,1> = '- ':TIMEDATE():' ':@LOGNAME:' Rev: ':RTREV_REC<RTR_REVNBR>:' -----------------------------------'
      RTREV_REc<RTR_DESC,2> = 'Original Release'
      RTREV_ID = PN_ID:'*':ENG_ID
      CALL WRITE.RECORD(RTREV_ID,RTREV_REC,C.RTREV,@FALSE,ERROR_STATUS)
*
* ALWAYS UPDATE ENG_ID ON THIS PART
      PARTS_REC<PT_ENG_ID> = ENG_ID
      WRITEV ENG_ID TO C.FILE.VAR(C.PARTS), PN_ID, PT_ENG_ID
*
* UPDATE THE SEQ LIST (LSTRTLIST)
      CALL WRT.LSTRTLIST.UPDATE(PN_ID,ENG.LIST,PARTS_REC,"LSTRTLIST",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNRTPRT.CLICK: *
IF (PN_ID # '' AND ENG_ID # '') THEN
   CALL WRT.CSV.ROUTING.PRINT(C.RT,PN_ID:'*':ENG_ID,GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNRTRENBR.CLICK: *
PRMPT = 'TO BE CODED'
CAPTION = "PN.DIALOG"
STYLE   = 2  ;* !
BUTTONS = 0  ;* ok only
HELPID = ""
CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNRTREV.CLICK: *

IF ENG_ID # '' THEN
   CALL RTREV.DIALOG(PN_ID,ENG_ID,GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.CHKFROZEN.CLICK: *
PARTS_REC<PT_FROZEN> =  GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.CHKPURCHASE.CLICK: *
PARTS_REC<PT_PURCHASED> =  GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.CHKTESTPCS.CLICK: *
PARTS_REC<PT_TEST_SAMPLES> =  GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.PARTS.PART.CLOSE: *
*
* IF WE CLOSE WITH A DEFINED PARTS_REC, CHECK FOR SAVE REQUIRED, IF NO RECORD ASSUME WE ARE OK TO CLOSE
IF PARTS_REC # '' THEN
   GOSUB SAVE.CHECK
END ELSE
   SAVE.CHECK.OK = @TRUE
END
*
IF SAVE.CHECK.OK THEN
   RELEASE C.FILE.VAR(C.PARTS)
* Default form close event handler
   CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
   CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
   IF NUM.FORMS = 0 THEN
      GOSUB GUI.DIALOG.RETURN
      CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
      GUI.DLG.EXIT = 1
   END
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNBROWSE.CLICK: *
CAPTION = "Select image to display"
DEFAULT = ""
FILTER  = "Image Files:*.jpg"
STYLE   = 1 ;* OPEN (SELECT) SINGLE FILE
CALL ATGUIFILEDIALOG(CAPTION,DEFAULT,FILTER,STYLE,IMAGE.PATH,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
IF IMAGE.PATH # '' THEN
   IMAGE.PATH = OCONV(IMAGE.PATH,"MCU")
*
* IMAGE PATHS MUST BE ON SHARES!
*
   IF IMAGE.PATH[1,2] # '\\' THEN
      PRMPT = 'Paths to Linked Documents MUST be on a Share'
      CAPTION = "PN.DIALOG"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
   END ELSE
*
      CALL SHARE.FILE.PATH.CALC(FILE.LOC,NETWORK_PATH_REC,IMAGE.PATH,'EXTRACT')
*
      PARTS_REC<PT_PICTURE> = FILE.LOC
      CTRLIDS = ''
      PROPS   = ''
      VALUES  = ''
*
      CTRLIDS<-1> = "TXTPICLINK"
      PROPS<-1>   =  GPVALUE
      VALUES<-1>  = FILE.LOC
*
      CTRLIDS<-1> = "PICTURE1"
      PROPS<-1>   =  GPVALUE
      VALUES<-1>  =  IMAGE.PATH
*
      CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNDELPRO.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
*RESET BACKGOUND COLOR TO DELFAULT
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
* REMOVE SELECTED STEP
   DEL PARTS_REC<PT_PROCESS_ID,PROCESS.STEP.SELECTED>
   DEL PARTS_REC<PT_PROCESS_DESC,PROCESS.STEP.SELECTED>
   DEL PARTS_REC<PT_PROCESS_CERT,PROCESS.STEP.SELECTED>
   DEL PARTS_REC<PT_PROCESS_CERT_CODE,PROCESS.STEP.SELECTED>
*  RESET SELECTED HIGHLIGHT
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   PROCESS.STEP.SELECTED = 0
* UPDATE CONTROL
   GOSUB LOAD.GRDPRO
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNINSAFTER.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
   IF PARTS_REC<PT_PROCESS_ID,PROCESS.STEP.SELECTED> = '' THEN
      PRMPT = 'This Process Step is Undefined,':@SVM:'Cannot Insert After'
      CAPTION = "PN.DIALOG"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
   END ELSE
*RESET BACKGOUND COLOR TO DELFAULT
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
* INSERT SELECTED STEP
      INS "NOTES" BEFORE PARTS_REC<PT_PROCESS_ID,PROCESS.STEP.SELECTED+1>
      INS " " BEFORE PARTS_REC<PT_PROCESS_DESC,PROCESS.STEP.SELECTED+1>
      INS "0" BEFORE PARTS_REC<PT_PROCESS_CERT,PROCESS.STEP.SELECTED+1>
      INS " " BEFORE PARTS_REC<PT_PROCESS_CERT_CODE,PROCESS.STEP.SELECTED+1>
*  RESET SELECTED HIGHLIGHT
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      PROCESS.STEP.SELECTED = 0
* UPDATE CONTROL
   END
   GOSUB LOAD.GRDPRO
END
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNINSBEFORE.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
*RESET BACKGOUND COLOR TO DELFAULT
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
* INSERT SELECTED STEP
   INS "NOTES" BEFORE PARTS_REC<PT_PROCESS_ID,PROCESS.STEP.SELECTED>
   INS " " BEFORE PARTS_REC<PT_PROCESS_DESC,PROCESS.STEP.SELECTED>
   INS "0" BEFORE PARTS_REC<PT_PROCESS_CERT,PROCESS.STEP.SELECTED>
   INS " " BEFORE PARTS_REC<PT_PROCESS_CERT_CODE,PROCESS.STEP.SELECTED>
*  RESET SELECTED HIGHLIGHT
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   PROCESS.STEP.SELECTED = 0
* UPDATE CONTROL
   GOSUB LOAD.GRDPRO
END
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNMOD.CLICK: *
IF PROCESS.STEP.SELECTED > 0 THEN
*
* CANNOT MODIFY UNDEFINED PROCESS STEPS
   IF PARTS_REC<PT_PROCESS_ID,PROCESS.STEP.SELECTED> = "" THEN
      PRMPT = 'This Process Step is Undefined,':@SVM:'Create by Selecting Process Step Id From Drop Down List'
      CAPTION = "PN.DIALOG"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END ELSE
      IF PARTS_REC<PT_PROCESS_ID,PROCESS.STEP.SELECTED> = "CUSTOM" OR PARTS_REC<PT_PROCESS_ID,PROCESS.STEP.SELECTED> = "NOTES" THEN
         STEP.DESC = PARTS_REC<PT_PROCESS_DESC,PROCESS.STEP.SELECTED>
         CONVERT @SVM TO @VM IN STEP.DESC
         IF STEP.DESC = '' THEN STEP.DESC = " "
         CALL INPUTBOX("Edit Process Step","PN.DIALOG",STEP.DESC,"",USER.DESC,GUIERRORS,GUISTATE)
         IF USER.DESC # '' THEN
            CONVERT @VM TO @SVM IN USER.DESC
            PARTS_REC<PT_PROCESS_DESC,PROCESS.STEP.SELECTED> = USER.DESC
         END
*  RESET SELECTED HIGHLIGHT
         CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         PROCESS.STEP.SELECTED = 0

      END ELSE
         PRMPT = 'Only CUSTOM OR NOTES Process Steps are Editable'
         CAPTION = "PN.DIALOG"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      END
   END
   GOSUB LOAD.GRDPRO
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNCANCEL.CLICK: *
GOSUB SAVE.CHECK
IF SAVE.CHECK.OK THEN
   PARTS_REC = ''
   GOSUB DIALOG.EXIT
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNDEL.CLICK: *
*
* delete part selected
IF PN_ID # '' THEN
   EMSG = ''
*
* TEST FOR RT RECORDS WITH THIS PART
   SLIST = 'SSELECT RT WITH PARTNBR = "':PN_ID:'"'
   EXECUTE SLIST CAPTURING DMMY.OUT
   IF @SELECTED GE 1 THEN
      EMSG = "RT record(s) on file for part, part NOT deleted"
      GOTO DCC900
   END
* TEST FOR ORDER CHILD RECORDS WITH THIS PART
   SLIST = 'SSELECT ORDER_CHILD WITH OC_PART_NBR = "':PN_ID:'"'
   EXECUTE SLIST CAPTURING DMMY.OUT
   IF @SELECTED GE 1 THEN
      EMSG = "ORDER record(s) on file for part, part NOT deleted"
      GOTO DCC900
   END
*
* TEST FOR SALES RECORDS WITH THIS PART (note, may not want this test?)
   SLIST = 'SSELECT SALES WITH SA_PART_NBR = "':PN_ID:'"'
   EXECUTE SLIST CAPTURING DMMY.OUT
   IF @SELECTED GE 1 THEN
      EMSG = "SALES record(s) on file for part, part NOT deleted"
      GOTO DCC900
   END
*
*
DCC900:
   IF EMSG # '' THEN
      PRMPT = EMSG
   END ELSE
*
* GET CONFIRMATION!
*
      PRMPT = "Confirm you want to Delete Part: ":PN_ID
      CAPTION = "Part Maintenance"
      STYLE   = 4  ;* i
      BUTTONS = 4  ;* yes / no
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      IF RESPONSE = 6 THEN  ;* ANSWERED YES
         DELETE C.FILE.VAR(C.PARTS), PN_ID
         PARTS_REC = ''
         SAVE_PARTS_REC = ''
         SAVE_PARTS_QTY = ''
         SAVE_PARTS_BOM = ''
         GOSUB LOAD.CTRLS
         PRMPT = "Part record: ":PN_ID:" has been deleted"
      END ELSE
         PRMPT = "Deletion Cancelled"
      END
   END
   CAPTION = "Part Maintenance"
   STYLE   = 4  ;* i
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
   GOSUB DIALOG.EXIT  ;* after delete we leave
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNFILE.CLICK: *
*
IF PN_ID # '' THEN
   IF SAVE_PARTS_REC # PARTS_REC THEN
*
* TEST FOR REV UPDATE REQUIRED AND NOT PERFORMED
*
      REV.REQD = @FALSE
      IF SAVE_PARTS_REC<PT_REV> # PARTS_REC<PT_REV> THEN REV.REQD = @TRUE
      IF SAVE_PARTS_REC<PT_MATL> # PARTS_REC<PT_MATL> THEN REV.REQD = @TRUE
      IF SAVE_PARTS_REC<PT_PROCESS_ID> # PARTS_REC<PT_PROCESS_ID> THEN REV.REQD = @TRUE
      IF SAVE_PARTS_REC<PT_PROCESS_DESC> # PARTS_REC<PT_PROCESS_DESC> THEN REV.REQD = @TRUE
      IF SAVE_PARTS_REC<PT_PROCESS_CERT> # PARTS_REC<PT_PROCESS_CERT> THEN REV.REQD = @TRUE
      IF SAVE_PARTS_REC<PT_TEST_SAMPLES> # PARTS_REC<PT_TEST_SAMPLES> THEN REV.REQD = @TRUE
      IF SAVE_PARTS_REC<PT_FROZEN> # PARTS_REC<PT_FROZEN> THEN REV.REQD = @TRUE
      IF SAVE_PARTS_REC<PT_SPC> # PARTS_REC<PT_SPC> THEN REV.REQD = @TRUE
*
      UPDATE.OK  = @TRUE
      IF REV.REQD THEN
*
* REV CONTROL REQUIRED FOR CHANGE, DID USER UPDATE REV? (IF REVCTL HAS NOT CHANGED THEN NO)

         IF SAVE_PARTS_REC<PT_REVCTL_DESC> = PARTS_REC<PT_REVCTL_DESC> THEN UPDATE.OK  = @FALSE
         IF SAVE_PARTS_REC<PT_REVCTL_DATE> = PARTS_REC<PT_REVCTL_DATE> THEN UPDATE.OK  = @FALSE
         IF SAVE_PARTS_REC<PT_REVCTL_INIT> = PARTS_REC<PT_REVCTL_INIT> THEN UPDATE.OK  = @FALSE
      END
*
      IF NOT(UPDATE.OK) THEN
*
* WE NEED AN UPDATE TO THE REV BLOCK!
*
         PRMPT = 'Missing revision documentation, please update!'
         CAPTION = "Part Maintenance"
         STYLE   = 4  ;* i
         BUTTONS = 0  ;* ok
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         GOTO BTNFILE.999
      END ELSE
         CALL WRITE.RECORD(PN_ID,PARTS_REC,C.PARTS,KEEP_PN_LOCKED,ERROR_STATUS)
*
         SAVE_PARTS_REC = PARTS_REC
      END
   END
*
* UPDATE QTY RECORD ?
*
   IF SAVE_PARTS_QTY # PARTS_QTY THEN
      CALL NXT.LOCKWAITING("PARTS_QTY",C.PARTS_QTY,PN_ID,GUIERRORS,GUISTATE)
      CALL WRITE.RECORD(PN_ID,PARTS_QTY,C.PARTS_QTY,@FALSE,ERROR_STATUS)

*
* AND CREATE A DUMMY LOT RECORD FOR IT
*
      RC_ID = ''
      RC_REC = ''
      RC_REC<RC_PART_NBR> = PN_ID
      RC_REC<RC_TYPE> = 'ADJ'
      LOT_COMMENTS = @LOGNAME:' adjusted inventory qtys:'
      IF SAVE_PARTS_QTY<PT_QOH1> # PARTS_QTY<PT_QOH1> THEN
         LOT_COMMENTS := ' QOH1 was: ':SAVE_PARTS_QTY<PT_QOH1>:' now: ':PARTS_QTY<PT_QOH1>
      END
      IF SAVE_PARTS_QTY<PT_QOH2> # PARTS_QTY<PT_QOH2> THEN
         LOT_COMMENTS := ' QOH2 was: ':SAVE_PARTS_QTY<PT_QOH2>:' now: ':PARTS_QTY<PT_QOH2>
      END
      IF SAVE_PARTS_QTY<PT_QOH3> # PARTS_QTY<PT_QOH3> THEN
         LOT_COMMENTS := ' QOH3 was: ':SAVE_PARTS_QTY<PT_QOH3>:' now: ':PARTS_QTY<PT_QOH3>
      END
      LOT_VEND = ''
      CALL WRITE.LOT(RC_ID,RC_REC,LOT_COMMENTS,LOT_VEND,LOT_ID)
*
      SAVE_PARTS_QTY = PARTS_QTY    ;* AND SAVE UPDATED SAVE REC
   END
*
* UPDATE BOM RECORD ?
*
   IF SAVE_PARTS_BOM # PARTS_BOM THEN
      IF PARTS_BOM = ''  THEN   ;* DID WE DELETE IT?
         CALL NXT.LOCKWAITING("PARTS_BOM",C.PARTS_BOM,PN_ID,GUIERRORS,GUISTATE)
         DELETE  C.FILE.VAR(C.PARTS_BOM), PN_ID
         RELEASE C.FILE.VAR(C.PARTS_BOM), PN_ID
      END ELSE
         CALL NXT.LOCKWAITING("PARTS_BOM",C.PARTS_BOM,PN_ID,GUIERRORS,GUISTATE)
         CALL WRITE.RECORD(PN_ID,PARTS_BOM,C.PARTS_BOM,@FALSE,ERROR_STATUS)
      END
   END
   GOSUB DIALOG.EXIT  ;* after file we leave
END
BTNFILE.999: *
*
RETURN
*-->END EVENT HANDLER<--*
*

*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.BTNPRINT.CLICK: *
IF PARTS_REC # '' THEN
   CALL PROCESS.FORM(PARTS_REC,PN_ID,"PARTS","","",PROCESS.PRINTER,GUIERRORS,GUISTATE)
   PRMPT = "Process Traveler Sent to Printer"
   CAPTION = "PN.DIALOG"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.GRDBOM.BTNCLICK: *
COL = GUIARGS<1,1>
ROW = GUIARGS<1,2>
IF COL = 5 THEN    ;* REMOVE BUTTON COLUMN?
   IF PARTS_BOM<PB_PARTNBR,ROW> # '' THEN
      BOM_PN_ID = PARTS_BOM<PB_PARTNBR,ROW>
      BOM_QTY = PARTS_BOM<PB_QTY,ROW>
      BOM_LT = PARTS_BOM<PB_LEADTIME,ROW>
      CALL BOM.DIALOG(BOM_PN_ID,BOM_QTY,BOM_LT,BOM_REMOVE,RSP,GUIERRORS,GUISTATE)
      IF RSP = NXT.CANCEL.RSP THEN  ;* (CANCEL CLICKED)
         NULL
      END ELSE   ;* MUST BE AN OK CLICK
         IF BOM_REMOVE THEN   ;* REMOVE ITEM?
            DEL PART_BOM<PB_PARTNBR,ROW>    ;* REMOVE COMPONET PART NUMBER
            DEL PARTS_BOM<PB_QTY,ROW>       ;* REMOVE COMPONET QTY
            DEL PARTS_BOM<PB_LEADTIME,ROW>  ;* AND LEADTIME
         END ELSE    ;* NOT REMOVE, UPDATE
            PARTS_BOM<PB_QTY,ROW>  = BOM_QTY
            PARTS_BOM<PB_LEADTIME,ROW>  = BOM_LT
         END
         GOSUB LOAD.BOMTAB
      END
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.GRDLINES.DBLCLICK: *
CLICK.COL = GUIARGS<1,1>
CLICK.ROW = GUIARGS<1,2>
IF CLICK.COL = 4 THEN   ;* ONLY PROCESS FOR NOTES COLUMN
   IF PARTS_REC<PT_STD_QTY,CLICK.ROW> # '' THEN   ;* AND ONLY IF A QTY HAS BEEN ENTERED

      CAPTION = "Select Document to link to Qoute"
      DEFAULT = ""
      SEL.REC = ''
      FILTER  = "All files:*.*;Document files:*.doc,*.txt;Image Files:*.jpg"
      STYLE   = 1 ;* OPEN (SELECT) SINGLE FILE
      CALL ATGUIFILEDIALOG(CAPTION,DEFAULT,FILTER,STYLE,SEL.REF,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
      IF SEL.REF # '' THEN
         SEL.REF = OCONV(SEL.REF,"MCU")
*
*  PATHS MUST BE ON SHARES!
*
         IF SEL.REF[1,2] # '\\' THEN
            PRMPT = 'Paths to Linked Documents MUST be on a Share'
            CAPTION = "PN.DIALOG"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok only
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
         END ELSE
            CALL SHARE.FILE.PATH.CALC(FILE.LOC,NETWORK_PATH_REC,SEL.REF,'EXTRACT')
            PARTS_REC<PT_STD_NOTES,CLICK.ROW> = FILE.LOC   ;* SAVE THE REF DOCUMENT LINK
*
* redisplay ROW DATA
*
*  POP QUOTE DATA
            QUOTE.LIST = ''
            QUOTE.CNT = DCOUNT(PARTS_REC<PT_STD_QTY>,@VM)
            FOR I = 1 TO QUOTE.CNT
*
               QUOTE.LIST<1,I,1> = PARTS_REC<PT_STD_QTY,I>
               QUOTE.LIST<1,I,2> = OCONV(PARTS_REC<PT_STD_PRICE,I>,PT_STD_PRICE.CNV)
               QUOTE.LIST<1,I,3> = OCONV(PARTS_REC<PT_STD_DATE,I>,PT_STD_DATE.CNV)
               QUOTE.LIST<1,I,4> = PARTS_REC<PT_STD_NOTES,I>
            NEXT I
*
            CTRLIDS = "GRDLINES"
            PROPS   = GPVALUE
            VALUES  = QUOTE.LIST
            CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
            IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         END
      END
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.GRDLINES.VALIDATEROW: *
GRD.ROW = GUIARGS<1,1>
ROW.DAT = GUIARGS<2>
*
PRICE.DATA = ''
QQTY  = ''
QDATE = ''
LOT.TYPE = ''
VALID.ROW = @TRUE
*
QQTY       = INT(ROW.DAT<1,1,1>)
PRICE.DATA = ROW.DAT<1,1,2>
QDATE      = ROW.DAT<1,1,3>
QNOTES     = ROW.DAT<1,1,4>
*
* validate what the user entered on this grid row
*
BEGIN CASE
   CASE QQTY + 0 LE 0
      EMSG = "Quote quantity must be greater than zero"
      COL.VAL = 1
      VALID.ROW = @FALSE
*
   CASE PRICE.DATA = ''
      EMSG = "Pricing data required"
      COL.VAL = 2
      VALID.ROW = @FALSE
   CASE NUM(PRICE.DATA)   ;* ACTUAL PRICE ?
      PRICE.DATA = ICONV(PRICE.DATA,PT_STD_PRICE.CNV)
   CASE 1
      LOT.TYPE = PRICE.DATA ;* LOT CHARGE REFERENCE?
      LOCATE LOT.TYPE IN LOT.CHARGES<1,1> SETTING IDX ELSE
         COL.VAL = 2
         VALID.ROW = @FALSE
         EMSG = "Lot charge: ":LOT.TYPE:" not found in validation file."
      END
END CASE
*
IF VALID.ROW THEN
   PARTS_REC<PT_STD_QTY,GRD.ROW>   = QQTY
   PARTS_REC<PT_STD_PRICE,GRD.ROW> = PRICE.DATA
   IF QDATE = '' THEN
      PARTS_REC<PT_STD_DATE,GRD.ROW>  = DATE()
   END ELSE
      PARTS_REC<PT_STD_DATE,GRD.ROW>  = ICONV(QDATE,PT_STD_DATE.CNV)
   END
   PARTS_REC<PT_STD_NOTES,GRD.ROW> = QNOTES
*
* redisplay date
*
   ROW.DAT = ''
   ROW.DAT<1,1,1> = QQTY
   IF LOT.TYPE # '' THEN
      ROW.DAT<1,1,2> =  LOT.TYPE
   END ELSE
      ROW.DAT<1,1,2> = OCONV(PRICE.DATA,PT_STD_PRICE.CNV)
   END
   ROW.DAT<1,1,3> = OCONV(PARTS_REC<PT_STD_DATE,GRD.ROW>,PT_STD_DATE.CNV)
   ROW.DAT<1,1,4> = QNOTES
*
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDLINES",GPVALUE,0,GRD.ROW,ROW.DAT,GUIERRORS,GUISTATE)

END ELSE
   PRMPT = EMSG:@SVM:'Please correct and try again'
   CAPTION = "PN.DIALOG"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDLINES",GPCOLUMN,"","",COL.VAL,GUIERRORS,GUISTATE)
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDLINES",GPROW,"","",GRD.ROW,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.CBMATL.CLICK: *
PARTS_REC<PT_MATL> = GUIARGS<1>   ;* REM COMBO BOX CLICK RETURNS ACTUAL VALUE CLICK ON
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.CBMATL.VALIDATE: *
PARTS_REC<PT_MATL> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.GRDPRO.ACTIVATEROW: *
*
* USER MOVED OFF A ROW, LETS JUST MAKE SURE WE ARE NOT LEAVING A BLANK ROW SOMEWHERE
*
PREV.ROW = GUIARGS<1,2>
CURR.ROW = GUIARGS<1,1>
ROWS.OF.DATA =  DCOUNT(PARTS_REC<PT_PROCESS_ID>,@VM)
* IF THE CURRENT ROW THE USER IS ON IS EMPTY AND THE ROW IS LEAVING MORE THAN ONE BLACK ROW ABOVE IT, MOVE TO THE LAST BLANK ROW
IF (PARTS_REC<PT_PROCESS_ID,CURR.ROW> = "") AND (CURR.ROW >  ROWS.OF.DATA + 1) THEN
   CURR.ROW = ROWS.OF.DATA + 1
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPROW,"","",CURR.ROW,GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.GRDPRO.CLICK: *
* RESET PREVIOUS SELECTED STEP COLOR
IF PROCESS.STEP.SELECTED > 0 THEN
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
PROCESS.STEP.SELECTED = GUIARGS<1,2> ;* ROW NUMBER
* ENSURE THAT STEP SELECTED IS NEXT OPEN STEP (WE DID NOT SKIP A ROW)
IF PROCESS.STEP.SELECTED > DCOUNT(PARTS_REC<PT_PROCESS_ID>,@VM) THEN
   PROCESS.STEP.SELECTED =  DCOUNT(PARTS_REC<PT_PROCESS_ID>,@VM) + 1
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPROW,"","",PROCESS.STEP.SELECTED,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRGRAY,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.GRDPRO.VALIDATECELL: *
PROCESS.COL = GUIARGS<1,1>
PROCESS.ROW = GUIARGS<1,2>
BEGIN CASE
   CASE PROCESS.COL = 1  ;* PROCESS STEP OR PROCESS GROUP ID

      SELECTED.ID = GUIARGS<2>
*
* LOOK UP SELECTED ID IN PROCESS.IDS TO DETERMINE IF THIS IS A STEP OR GROUP ID
*
      LOCATE(SELECTED.ID,PROCESS.IDS,1;IDX) THEN
         PROCESS.TYPE = PROCESS.IDS<2,IDX>
         IF PROCESS.TYPE = "STEP" THEN
            CALL GET.RECORD("PROCESS_STEPS",C.PROCESS_STEPS,SELECTED.ID,PROCESS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
            IF ERROR_STATUS = '' THEN ;* GET CERT CODE ASSOC WITH THIS STEP
               PARTS_REC<PT_PROCESS_ID,PROCESS.ROW> = SELECTED.ID
               IF SELECTED.ID = "CUSTOM" OR SELECTED.ID = "NOTES" THEN
                  PARTS_REC<PT_PROCESS_DESC,PROCESS.ROW> = PROCESS_REC<PS_PROCESS_DESC,1>
               END
               PARTS_REC<PT_PROCESS_CERT_CODE,PROCESS.ROW> = PROCESS_REC<PS_CERT_DESC>
               CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPDEFVAL,2,PROCESS.ROW,PROCESS_REC<PS_PROCESS_DESC,1>,GUIERRORS,GUISTATE)
               IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
               CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPDEFVAL,4,PROCESS.ROW,PROCESS_REC<PS_CERT_DESC>,GUIERRORS,GUISTATE)
               IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
            END ELSE
               PRMPT = 'Process_Step: ':SELECTED.ID:', Not On File'
               CAPTION = "PN.DIALOG"
               STYLE   = 2  ;* !
               BUTTONS = 0  ;* ok only
               HELPID = ""
               CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            END
*
         END ELSE    ;* MUST BE PROCESS GROUP, ADD GROUP STEPS TO PROCESS STEP LIST
            GROUP.ID = SELECTED.ID
            GOSUB GROUP.ADD
         END       ;* DID NOT FIND SELECTED.ID IN PROCESS_IDS THIS SHOULD NOT HAPPEN
*
      END ELSE
         PRMPT = 'Process_Step: ':SELECTED.ID:', Not On File'
         CAPTION = "PN.DIALOG"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      END
*
*
   CASE PROCESS.COL = 2  ;* PROCESS STEP DESC
      IF PARTS_REC<PT_PROCESS_ID,PROCESS.ROW> = 'CUSTOM' OR PARTS_REC<PT_PROCESS_ID,PROCESS.ROW> = 'NOTES' THEN
         SELECTED.DESC = GUIARGS<2>
         CONVERT '<nl>' to @SVM IN SELECTED.DESC
         PARTS_REC<PT_PROCESS_DESC,PROCESS.ROW> = SELECTED.DESC
      END ELSE
         PRMPT = 'Only CUSTOM and NOTES Process Steps are Editable'
         CAPTION = "PN.DIALOG"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDPRO",GPDEFVAL,2,PROCESS.ROW,PROCESS_REC<PS_PROCESS_DESC,1>,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      END
   CASE PROCESS.COL = 3
      PARTS_REC<PT_PROCESS_CERT,PROCESS.ROW> = GUIARGS<2> + 0

   CASE 1   ;* ASSUME COL 4, CERT DESC
      PARTS_REC<PT_PROCESS_CERT_CODE,PROCESS.ROW> = GUIARGS<2>

END CASE
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.GRDREVCTL.VALIDATEROW: *
GRD.ROW = GUIARGS<1,1>
ROW.DAT = GUIARGS<2>
*
REVNBR = ''
REVDESC = ''
REVDATE = ''
REVINIT = ''
*
VALID.ROW = @TRUE
*
REVCNT = DCOUNT(PARTS_REC<PT_REVCTL_DATE>,@VM)
*
REVNBR  = GRD.ROW
REVDESC = ROW.DAT<1,1,2>
REVDATE = ROW.DAT<1,1,3>
IF REVDATE = '' THEN REVDATE = OCONV(DATE(),PT_REVCTL_DATE.CNV)
REVINIT = ROW.DAT<1,1,4>
*
IF REVNBR > REVCNT +1 THEN REVNBR = REVCNT + 1
*
* validate what the user entered on this REV GRID
*
BEGIN CASE
   CASE REVDESC = ''
      EMSG = "Description required"
      COL.VAL = 2
      VALID.ROW = @FALSE
*
   CASE REVINIT = ''
      EMSG = "Initials required"
      COL.VAL = 4
      VALID.ROW = @FALSE
END CASE
*
IF VALID.ROW THEN
*
   PARTS_REC<PT_REVCTL_DESC,REVNBR> = REVDESC
   PARTS_REC<PT_REVCTL_DATE,REVNBR> = ICONV(REVDATE,PT_REVCTL_DATE.CNV)
   PARTS_REC<PT_REVCTL_INIT,REVNBR> = REVINIT"L#3"
*
* redisplay date
*
   ROW.DAT = ''
   ROW.DAT<1,1,1> =  REVNBR
   ROW.DAT<1,1,2> =  REVDESC
   ROW.DAT<1,1,3> =  OCONV(PARTS_REC<PT_REVCTL_DATE,REVCNT>,PT_REVCTL_DATE.CNV)
   ROW.DAT<1,1,4> =  REVINIT"L#3"
*
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDREVCTL",GPVALUE,0,GRD.ROW,ROW.DAT,GUIERRORS,GUISTATE)

END ELSE
   PRMPT = EMSG:@SVM:'Please correct and try again'
   CAPTION = "PN.DIALOG"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDREVCTL",GPCOLUMN,"","",COL.VAL,GUIERRORS,GUISTATE)
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDREVCTL",GPROW,"","",GRD.ROW,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.GRDRT.CLICK: *
* RESET PREVIOUS SELECTED STEP COLOR
IF PROCESS.STEP.SELECTED > 0 THEN
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
END
PROCESS.STEP.SELECTED = GUIARGS<1,2> ;* ROW NUMBER
* ENSURE THAT STEP SELECTED IS NEXT OPEN STEP (WE DID NOT SKIP A ROW)
IF PROCESS.STEP.SELECTED > DCOUNT(SEQ.LIST<1>,@VM) THEN
   PROCESS.STEP.SELECTED =  DCOUNT(SEQ.LIST<1>,@VM) + 1
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPROW,"","",PROCESS.STEP.SELECTED,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
END
CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDRT",GPBACKCOLOR,"",PROCESS.STEP.SELECTED,CLRGRAY,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
IF SEQ.LIST<1,PROCESS.STEP.SELECTED,1> # '' THEN   ;* IS THERE A SEQ ID?
   RT_ID = PN_ID:'*':ENG_ID:'*':SEQ.LIST<1,PROCESS.STEP.SELECTED,1>
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.LBSPC.CLICK: *
PARTS_REC<PT_SPC> =  SPC.LIST<1,GUIARGS<1>,1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.LSTESTRTLIST.CLICK: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.LSTRTLIST.CLICK: *
ENG_ID = ENG.LIST<1,GUIARGS<1>,1>
CALL WRT.GRDRT.UPDATE(PN_ID,ENG_ID,SEQ.LIST,"GRDRT",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTDESC.VALIDATE: *
PARTS_REC<PT_DESC> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTDFLTENGID.VALIDATE: *
ENG.ID.FOUND = @FALSE
FOR ZZ = 1 TO DCOUNT(ENG.LIST<1>,@VM)
   IF GUIARGS<2> = ENG.LIST<1,ZZ,1> THEN
      ENG.ID.FOUND = @TRUE
      EXIT
   END
NEXT ZZ
IF ENG.ID.FOUND THEN
   PARTS_REC<PT_DFLT_ENG_ID> = GUIARGS<2>
END ELSE
*
* DID NOT FIND SELECTED DEFAULT IN LIST, ERROR
*
   PRMPT = 'Could not locate selected Engineering Default Id, Not Set'
   CAPTION = "Part Maintenance"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
* and reset to previous value
*
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTDFLTENGID",GPVALUE,"","",PARTS_REC<PT_DFLT_ENG_ID>,GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTDRAWING.VALIDATE: *
PARTS_REC<PT_DRAWING> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTLAB.VALIDATE: *
PARTS_REC<PT_STD_LAB> = GUIARGS<2>
GOSUB LOAD.STDTOTAL
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTLOC1.VALIDATE: *
PARTS_QTY<PT_LOC1> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTLOC2.VALIDATE: *
PARTS_QTY<PT_LOC2> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTLOC3.VALIDATE: *
PARTS_QTY<PT_LOC3> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTMATL.VALIDATE: *
PARTS_REC<PT_STD_MATL> = GUIARGS<2>
GOSUB LOAD.STDTOTAL
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTNOTES.VALIDATE: *
PARTS_REC<PT_NOTES> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTOP.VALIDATE: *
PARTS_REC<PT_STD_OP> = GUIARGS<2>
GOSUB LOAD.STDTOTAL
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTPN.VALIDATE: *
PN_ID = OCONV(GUIARGS<2>,"MCU")
IF PN_ID # '' THEN  ;* THIS CAN HAPPEN IF USER ENTERS TEXT THEN BACKSPACES THEN CLICKS CANCEL
   GOSUB PART.GET
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTPTUSER1.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTPTUSER2.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTPTUSER3.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTPTUSER4.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTPTUSER5.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTPTUSER6.VALIDATE: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTQOH1.VALIDATE: *
IF NUM(GUIARGS<2>) THEN
   TSTQTY = GUIARGS<2> + 0
   IF TSTQTY GE 0 THEN
      PARTS_QTY<PT_QOH1> = TSTQTY
      PARTS_QTY<PT_QOHU1> = @LOGNAME : " on ": TIMEDATE()
      GOSUB LOAD.QOHTOTAL
   END ELSE
*
* BAD QOH VALUE
*
      PRMPT = 'QOH Must be >= 0'
      CAPTION = "Part Maintenance"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
* and reset to previous value
*
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTQOH1",GPVALUE,"","",PARTS_QTY<PT_QOH1>,GUIERRORS,GUISTATE)

   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTQOH2.VALIDATE: *
IF NUM(GUIARGS<2>) THEN
   TSTQTY = GUIARGS<2> + 0
   IF TSTQTY GE 0 THEN
      PARTS_QTY<PT_QOH2> = TSTQTY
      PARTS_QTY<PT_QOHU2> = @LOGNAME : " on ": TIMEDATE()
      GOSUB LOAD.QOHTOTAL
   END ELSE
*
* BAD QOH VALUE
*
      PRMPT = 'QOH Must be >= 0'
      CAPTION = "Part Maintenance"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
* and reset to previous value
*
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTQOH2",GPVALUE,"","",PARTS_QTY<PT_QOH2>,GUIERRORS,GUISTATE)

   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTQOH3.VALIDATE: *
IF NUM(GUIARGS<2>) THEN
   TSTQTY = GUIARGS<2> + 0
   IF TSTQTY GE 0 THEN
      PARTS_QTY<PT_QOH3> = TSTQTY
      PARTS_QTY<PT_QOHU3> = @LOGNAME : " on ": TIMEDATE()
      GOSUB LOAD.QOHTOTAL
   END ELSE
*
* BAD QOH VALUE
*
      PRMPT = 'QOH Must be >= 0'
      CAPTION = "Part Maintenance"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
*
* and reset to previous value
*
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTQOH3",GPVALUE,"","",PARTS_QTY<PT_QOH3>,GUIERRORS,GUISTATE)

   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTREV.VALIDATE: *
PARTS_REC<PT_REV> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTSEQINC.VALIDATE: *
IF GUIARGS<2> < 0 THEN
   PRMPT = 'Warning, Sequence Increment Must Be > 0!'
   CAPTION = "Part Maintenance"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTSEQINC",GPVALUE,"","","100",GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTSEQSTR.VALIDATE: *
IF GUIARGS<2> < 0 THEN
   PRMPT = 'Warning, Starting Sequence Must Be > 0!'
   CAPTION = "Part Maintenance"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTSEQSTR",GPVALUE,"","","100",GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PARTS.PART.TXTSTDNOTES.VALIDATE: *
PARTS_REC<PT_STANDARDS_NOTES> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"PN.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
************************************************************
* $PAGE$
************************************************************
DISABLE.BTNS:
*
* routine DISABLE controls for ITEM BUSY *
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<-1> = "TXTPN"
PROPS<-1>   =  GPENABLED
VALUES<-1>  = 0
*
CTRLIDS<-1> = "BTNFILE"
PROPS<-1>   =  GPENABLED
VALUES<-1>  = 0
*
CTRLIDS<-1> = "BTNADD"
PROPS<-1>   =  GPENABLED
VALUES<-1>  = 0
*
CTRLIDS<-1> = "BTNROLLSTDS"
PROPS<-1>   =  GPENABLED
VALUES<-1>  = 0
*
CTRLIDS<-1> = "FRMRT"
PROPS<-1>   =  GPENABLED
VALUES<-1>  = 0
*
CTRLIDS<-1> = "FRMPROCESS"
PROPS<-1>   =  GPENABLED
VALUES<-1>  = 0
*
CTRLIDS<-1> = "FRMESTIMATE"
PROPS<-1>   =  GPENABLED
VALUES<-1>  = 0
*
CTRLIDS<-1> = "BTNCANCEL"
PROPS<-1>   =  GPENABLED
VALUES<-1>  = 1
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
**
RETURN
************************************************************
* $PAGE$
************************************************************
ENABLE.CTRLS:
*
* routine SET controls STATE TO ENABLE.STATE *
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<1> = "TXTREV"
PROPS<1>   =  GPENABLED
VALUES<1>  = ENABLE.STATE
*
CTRLIDS<2> = "TXTDESC"
PROPS<2>   =  GPENABLED
VALUES<2>  = ENABLE.STATE
*
CTRLIDS<3> = "TXTDRAWING"
PROPS<3>   =  GPENABLED
VALUES<3>  = ENABLE.STATE
*
CTRLIDS<4> = "TXTNOTES"
PROPS<4>   =  GPENABLED
VALUES<4>  = ENABLE.STATE
*
CTRLIDS<5> = "CBMATL"
PROPS<5>   =  GPENABLED
VALUES<5>  = ENABLE.STATE
*
CTRLIDS<6> = "TXTPICLINK"
PROPS<6>   =  GPENABLED
VALUES<6>  = ENABLE.STATE
*
IF USER.IS.RESTRICTED THEN
* USER NOT ALLOW, DO NOT MAKE ACTIVE
   CTRLIDS<7> = "GRDLINES"
   PROPS<7>   =  GPENABLED
   VALUES<7>  = 0
END ELSE
   CTRLIDS<7> = "GRDLINES"
   PROPS<7>   =  GPENABLED
   VALUES<7>  = ENABLE.STATE
END
*
IF USER_REC<USER_PROCESS_STEPS> THEN
   CTRLIDS<8> = "GRDPRO"
   PROPS<8>   =  GPENABLED
   VALUES<8>  = 0
END ELSE
   CTRLIDS<8> = "GRDPRO"
   PROPS<8>   =  GPENABLED
   VALUES<8>  = ENABLE.STATE
END
*
CTRLIDS<9> = "GRDREVCTL"
PROPS<9>   =  GPENABLED
VALUES<9>  = ENABLE.STATE
*
CTRLIDS<10> = "BTNBROWSE"
PROPS<10>   =  GPENABLED
VALUES<10>  = ENABLE.STATE
*
CTRLIDS<11> = "BTNMOD"
PROPS<11>   =  GPENABLED
VALUES<11>  = ENABLE.STATE
*
CTRLIDS<12> = "BTNDELPRO"
PROPS<12>   =  GPENABLED
VALUES<12>  = ENABLE.STATE
*
CTRLIDS<13> = "BTNINSBEFORE"
PROPS<13>   =  GPENABLED
VALUES<13>  = ENABLE.STATE
*
CTRLIDS<14> = "BTNINSAFTER"
PROPS<14>   =  GPENABLED
VALUES<14>  = ENABLE.STATE
*
CTRLIDS<15> = "BTNFILE"
PROPS<15>   =  GPENABLED
VALUES<15>  = ENABLE.STATE
*
CTRLIDS<16> = "BTNCANCEL"
PROPS<16>   =  GPENABLED
VALUES<16>  = ENABLE.STATE
*
CTRLIDS<17> = "BTNDEL"
PROPS<17>   =  GPENABLED
VALUES<17>  = ENABLE.STATE
*
CTRLIDS<18> = "BTNPRINT"
PROPS<18>   =  GPENABLED
VALUES<18>  = ENABLE.STATE
*
CTRLIDS<19> = "BTNCOPY"
PROPS<19>   =  GPENABLED
VALUES<19>  = ENABLE.STATE
*
CTRLIDS<20> = "BTNACT"
PROPS<20>   =  GPENABLED
VALUES<20>  = ENABLE.STATE
*
CTRLIDS<21> = "TXTPN"
PROPS<21>   =  GPENABLED
VALUES<21>  = NOT(ENABLE.STATE)
*
CTRLIDS<22> = "CHKTESTPCS"
PROPS<22>   =  GPENABLED
VALUES<22>  = ENABLE.STATE
*
CTRLIDS<23> = "CHKFROZEN"
PROPS<23>   =  GPENABLED
VALUES<23>  = ENABLE.STATE
*
CTRLIDS<24> = "LBSPC"
PROPS<24>   =  GPENABLED
VALUES<24>  = ENABLE.STATE
*
* USER RESTRICED FROM ROUTING / PROCESS CHANGES?
IF USER_REC<USER_PROCESS_STEPS> THEN
   CTRLIDS<25> = "FRMRT"
   PROPS<25>   =  GPENABLED
   VALUES<25>  = 0
*
   CTRLIDS<26> = "FRMPROCESS"
   PROPS<26>   =  GPENABLED
   VALUES<26>  = 0
*
   CTRLIDS<27> = "FRMESTIMATE"
   PROPS<27>   =  GPENABLED
   VALUES<27>  = 0
*
END ELSE
   CTRLIDS<25> = "FRMRT"
   PROPS<25>   =  GPENABLED
   VALUES<25>  = ENABLE.STATE
*
   CTRLIDS<26> = "FRMPROCESS"
   PROPS<26>   =  GPENABLED
   VALUES<26>  = ENABLE.STATE
*
   CTRLIDS<27> = "FRMESTIMATE"
   PROPS<27>   =  GPENABLED
   VALUES<27>  = ENABLE.STATE
*
END
*
IF USER.IS.RESTRICTED THEN
* USER NOT ALLOWED, DO NOT MAKE INV TAB ACTIVE
   CTRLIDS<28> = "TABINV"
   PROPS<28>   =  GPENABLED
   VALUES<28>  = 0
*
   CTRLIDS<29> = "BOM"
   PROPS<29>   =  GPENABLED
   VALUES<29>  = 0
*

END ELSE
   CTRLIDS<28> = "TABINV"
   PROPS<28>   =  GPENABLED
   VALUES<28>  = ENABLE.STATE
*
   CTRLIDS<29> = "BOM"
   PROPS<29>   =  GPENABLED
   VALUES<29>  = ENABLE.STATE
*
   CTRLIDS<30> = "BTNADD"
   PROPS<30>   =  GPENABLED
   VALUES<30>  = ENABLE.STATE
*
   CTRLIDS<31> = "BTNROLLSTDS"
   PROPS<31>   =  GPENABLED
   VALUES<31>  = ENABLE.STATE
END
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
**
RETURN
************************************************************
* $PAGE$
************************************************************
ENABLE.NEW.PN.CTRLS:
*
* routine LOADS AND ENABLES controls for ITEM DETIAL *
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<-1> = "TXTPN"
PROPS<-1>   =  GPENABLED
VALUES<-1>  = 1
*
CTRLIDS<-1> = "BTNCANCEL"
PROPS<-1>   =  GPENABLED
VALUES<-1>  = 1
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
**
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CTRLS:
*
* routine LOADS AND ENABLES controls for ITEM DETIAL *
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
*
CTRLIDS<1> = "TXTPN"
PROPS<1>   = GPVALUE
VALUES<1>  = PN_ID
*
CTRLIDS<2> = "TXTREV"
PROPS<2>   = GPVALUE
VALUES<2>  = PARTS_REC<PT_REV>
*
CTRLIDS<3> = "TXTDESC"
PROPS<3>   = GPVALUE
VALUES<3>  = PARTS_REC<PT_DESC>
*
CTRLIDS<4> = "TXTDRAWING"
PROPS<4>   = GPVALUE
VALUES<4>  = PARTS_REC<PT_DRAWING>
*
CTRLIDS<5> = "TXTNOTES"
PROPS<5>   = GPVALUE
VALUES<5>  = PARTS_REC<PT_NOTES>
*
CTRLIDS<6> = "CBMATL"
PROPS<6>   = GPVALUE
VALUES<6>  = PARTS_REC<PT_MATL>
*
CTRLIDS<7> = "TXTPICLINK"
PROPS<7>   = GPVALUE
VALUES<7>  = PARTS_REC<PT_PICTURE>
*
CTRLIDS<8> = "PICTURE1"
PROPS<8>   = GPVALUE
VALUES<8>  = ""
IF PARTS_REC<PT_PICTURE> # '' THEN
*
* RESOLVE TO SERVER WHERE FILES ARE STORED
*
   CALL SHARE.FILE.PATH.CALC(PARTS_REC<PT_PICTURE>,NETWORK_PATH_REC,SHARE.FILE.PATH,'EXPAND')
   IF SHARE.FILE.PATH # "" THEN
      VALUES<8>  =  SHARE.FILE.PATH
   END
*
END
*
IF USER.IS.RESTRICTED THEN
* USER NOT ALLOW, DO NOT LOAD
   CTRLIDS<9> = "GRDLINES"
   PROPS<9>   = GPVALUE
   VALUES<9>  = " "
*
END ELSE
*  POP QUOTE DATA
   QUOTE.LIST = ''
   QUOTE.CNT = DCOUNT(PARTS_REC<PT_STD_QTY>,@VM)
   FOR I = 1 TO QUOTE.CNT
*
      QUOTE.LIST<1,I,1> = PARTS_REC<PT_STD_QTY,I>
      QUOTE.LIST<1,I,2> = OCONV(PARTS_REC<PT_STD_PRICE,I>,PT_STD_PRICE.CNV)
      QUOTE.LIST<1,I,3> = OCONV(PARTS_REC<PT_STD_DATE,I>,PT_STD_DATE.CNV)
      QUOTE.LIST<1,I,4> = PARTS_REC<PT_STD_NOTES,I>
   NEXT I
*
   CTRLIDS<9> = "GRDLINES"
   PROPS<9>   = GPVALUE
   VALUES<9>  = QUOTE.LIST
END
*
REVCTL.LIST = ''
REVCTL.CNT = DCOUNT(PARTS_REC<PT_REVCTL_DESC>,@VM)
FOR I = 1 TO REVCTL.CNT
*
   REVCTL.LIST<1,I,1> = I
   REVCTL.LIST<1,I,2> = PARTS_REC<PT_REVCTL_DESC,I>
   REVCTL.LIST<1,I,3> = OCONV(PARTS_REC<PT_REVCTL_DATE,I>,PT_REVCTL_DATE.CNV)
   REVCTL.LIST<1,I,4> = PARTS_REC<PT_REVCTL_INIT,I>
NEXT I
*
CTRLIDS<10> = "GRDREVCTL"
PROPS<10>   = GPVALUE
VALUES<10>  = REVCTL.LIST
*
CTRLIDS<11> = "CHKTESTPCS"
PROPS<11>   = GPVALUE
VALUES<11>  = PARTS_REC<PT_TEST_SAMPLES>
*
CTRLIDS<12> = "CHKFROZEN"
PROPS<12>   = GPVALUE
VALUES<12>  = PARTS_REC<PT_FROZEN>
*
CTRLIDS<13> = "TXTDFLTENGID"
PROPS<13>   = GPVALUE
VALUES<13>  = PARTS_REC<PT_DFLT_ENG_ID>
*
LOCATE PARTS_REC<PT_SPC> IN SPC.IDX<1> SETTING IDX THEN
   CTRLIDS<14> = "LBSPC"
   PROPS<14>   = GPVALUE
   VALUES<14>  = IDX
END ELSE
   CTRLIDS<14> = "LBSPC"
   PROPS<14>   = GPVALUE
   VALUES<14>  = 0
END
*
* MAKE VISIABLE PROCESS AND ROUTING FRAME BASED ON PERMISSIONS
*
BEGIN CASE
   CASE PN_ID = ''
      CTRLIDS<15> = "FRMPROCESS"
      PROPS<15>   = GPENABLED
      VALUES<15>  = 0
*
      CTRLIDS<16> = "FRMRT"
      PROPS<16>   = GPENABLED
      VALUES<16>  = 0
*
      CTRLIDS<17> = "FRMESTIMATE"
      PROPS<17>   = GPENABLED
      VALUES<17>  = 0
*
*CTRLIDS<18> = "FRMPROCESS"
*PROPS<18>   = GPVISIBLE
*VALUES<18>  = 0
**
*CTRLIDS<19> = "FRMRT"
*PROPS<19>   = GPVISIBLE
*VALUES<19>  = 0
**
*CTRLIDS<20> = "FRMESTIMATE"
*PROPS<20>  = GPVISIBLE
*VALUES<20>  = 0
*
* USER RESTRICED FROM ROUTING / PROCESS CHANGES?
*
   CASE  USER_REC<USER_PROCESS_STEPS>
      CTRLIDS<15> = "FRMPROCESS"
      PROPS<15>   = GPENABLED
      VALUES<15>  = 0
*
      CTRLIDS<16> = "FRMPROCESS"
      PROPS<16>   = GPVISIBLE
      VALUES<16>  = 0
*
      CTRLIDS<17> = "FRMRT"
      PROPS<17>   = GPENABLED
      VALUES<17>  = 0
*
      CTRLIDS<18> = "FRMRT"
      PROPS<18>  = GPVISIBLE
      VALUES<18>  = 0
*
      CTRLIDS<19> = "FRMESTIMATE"
      PROPS<19>   = GPENABLED
      VALUES<19>  = 0
*
      CTRLIDS<20> = "FRMESTIMATE"
      PROPS<20>  = GPVISIBLE
      VALUES<20>  = 0

   CASE 1

      CTRLIDS<15> = "FRMPROCESS"
      PROPS<15>   = GPENABLED
      VALUES<15>  = 1
*
      CTRLIDS<16> = "FRMPROCESS"
      PROPS<16>   = GPVISIBLE
      VALUES<16>  = 1
*
      CTRLIDS<17> = "FRMRT"
      PROPS<17>   = GPENABLED
      VALUES<17>  = 1
*
      CTRLIDS<18> = "FRMRT"
      PROPS<18>  = GPVISIBLE
      VALUES<18>  = 1
*
      CTRLIDS<19> = "FRMESTIMATE"
      PROPS<19>   = GPENABLED
      VALUES<19>  = 1
*
      CTRLIDS<20> = "FRMESTIMATE"
      PROPS<20>  = GPVISIBLE
      VALUES<20>  = 1
*
END CASE
*
CTRLIDS<-1> = "CHKPURCHASE"
PROPS<-1>   = GPVALUE
VALUES<-1>  = PARTS_REC<PT_PURCHASED>
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*

* CLEAR THE CURRENT SEQ.LIST, THEN REFRESH
*
SEQ.LIST = ''
CALL ATGUISETPROPS(GUIAPP,GUIFRM,"GRDRT",GPVALUE,SEQ.LIST,GUIERRORS,GUISTATE)
CALL WRT.LSTRTLIST.UPDATE(PN_ID,ENG.LIST,PARTS_REC,"LSTRTLIST",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
*
* AND DISPLAY PROCESS STEPS
*
GOSUB LOAD.GRDPRO
*
GOSUB LOAD.INVTAB
GOSUB LOAD.BOMTAB


**
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.BOMTAB:
*
*  LOADS CONTROL GRDBOM WITH COMPONET PARTS
*
BOM.LIST = ''
BOM.CNT = DCOUNT(PARTS_BOM<PB_PARTNBR>,@VM)
FOR I = 1 TO BOM.CNT
*
   BOM_PN = PARTS_BOM<PB_PARTNBR,I>
   CALL GET.RECORD("PARTS",C.PARTS,BOM_PN,BOM_PN_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
   IF ERROR_STATUS = ERR_NOF OR PARTS_REC = '' THEN
      BOM_PN_DESC = 'Not On File!'
   END ELSE
      BOM_PN_DESC = BOM_PN_REC<PT_DESC>
   END
   BOM.LIST<1,I,1> = BOM_PN
   BOM.LIST<1,I,2> = BOM_PN_DESC
   BOM.LIST<1,I,3> = OCONV(PARTS_BOM<PB_QTY,I>,PB_QTY.CNV)
   BOM.LIST<1,I,4> = PARTS_BOM<PB_LEADTIME,I>
   BOM.LIST<1,I,5> = 'Modify'
*
NEXT I
*
CTRLIDS = "GRDBOM"
PROPS   = GPVALUE
VALUES  = BOM.LIST
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,CTRLIDS,PROPS,"","",VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR

RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.INVTAB:
*
* routine LOADS AND ENABLES controls for ITEM DETIAL *
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*lblPhPartNumberV
*
CTRLIDS<1> = "LBLPHPARTNUMBERV"
PROPS<1>   = GPVALUE
VALUES<1>  = PN_ID
*
CTRLIDS<2> = "LBLPHDESCV"
PROPS<2>   = GPVALUE
VALUES<2>  = PARTS_REC<PT_DESC>
*
CTRLIDS<3> = "TXTLOC1"
PROPS<3>   = GPVALUE
VALUES<3>  = PARTS_QTY<PT_LOC1>
*
CTRLIDS<4> = "TXTLOC2"
PROPS<4>   = GPVALUE
VALUES<4>  = PARTS_QTY<PT_LOC2>
*
CTRLIDS<5> = "TXTLOC3"
PROPS<5>   = GPVALUE
VALUES<5>  = PARTS_QTY<PT_LOC3>
*
CTRLIDS<6> = "TXTQOH1"
PROPS<6>   = GPVALUE
VALUES<6>  = PARTS_QTY<PT_QOH1> + 0
*
CTRLIDS<7> = "TXTQOH2"
PROPS<7>   = GPVALUE
VALUES<7>  = PARTS_QTY<PT_QOH2> + 0
*
CTRLIDS<8> = "TXTQOH3"
PROPS<8>   = GPVALUE
VALUES<8>  = PARTS_QTY<PT_QOH3> + 0
*
CTRLIDS<9> = "LBLQOHU1V"
PROPS<9>   = GPVALUE
VALUES<9>  = PARTS_QTY<PT_QOHU1>
*
CTRLIDS<10> = "LBLQOHU2V"
PROPS<10>   = GPVALUE
VALUES<10>  = PARTS_QTY<PT_QOHU2>
*
CTRLIDS<11> = "LBLQOHU3V"
PROPS<11>   = GPVALUE
VALUES<11>  = PARTS_QTY<PT_QOHU3>
*
CTRLIDS<12> = "TXTMATL"
PROPS<12>   = GPVALUE
VALUES<12>  = PARTS_REC<PT_STD_MATL>+ 0
*
CTRLIDS<13> = "TXTOP"
PROPS<13>   = GPVALUE
VALUES<13>  = PARTS_REC<PT_STD_OP>+ 0
*
CTRLIDS<14> = "TXTLAB"
PROPS<14>   = GPVALUE
VALUES<14>  = PARTS_REC<PT_STD_LAB>+ 0
*
CTRLIDS<15> = "TXTSTDNOTES"
PROPS<15>   = GPVALUE
VALUES<15>  = PARTS_REC<PT_STANDARDS_NOTES>
*
CTRLIDS<16> = "LBLBOMPHPARTNUMBERV"
PROPS<16>   = GPVALUE
VALUES<16>  = PN_ID
*
CTRLIDS<17> = "LBLBOMPHDESCV"
PROPS<17>   = GPVALUE
VALUES<17>  = PARTS_REC<PT_DESC>
***
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
GOSUB LOAD.QOHTOTAL
*
GOSUB LOAD.STDTOTAL
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.QOHTOTAL:
*
QOHTOTAL = PARTS_QTY<PT_QOH1> + PARTS_QTY<PT_QOH2> + PARTS_QTY<PT_QOH3> + 0
*
CTRLIDS = "LBLTQOHV"
PROPS   = GPVALUE
VALUES  = QOHTOTAL
***
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.STDTOTAL:
*
STDTOTAL = PARTS_REC<PT_STD_MATL> + PARTS_REC<PT_STD_OP> + PARTS_REC<PT_STD_LAB> + 0
*
CTRLIDS = "LBLSTDV"
PROPS   = GPVALUE
VALUES  = STDTOTAL
***
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
GROUP.ADD:
*
* ROUTINE IS CALLED BY GRDPRO.VALIDATECELL TO INSERT THE PROCESS STEPS DEFINED BY PROCESS_GROUPS RECORD "GROUP.ID"
* BEGIN INSERTION AT PROCESS.ROW (REPRESENTS VALUE MARK WITHIN PARTS RECORD FOR WHERE USER WANTS THIS GROUP INSERTED)
*
*
* FIRST SEE IF WE HAVE A VALID PROCESS_GROUPS RECORD
*
CALL GET.RECORD("PROCESS_GROUPS",C.PROCESS_GROUPS,GROUP.ID,GROUP_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF ERROR_STATUS = '' THEN
*
   STEP.INSERT.POINT = PROCESS.ROW
   STEP.COUNT = DCOUNT(GROUP_REC<PG_PROCESS_STEPS>,@VM)
   FOR SI = 1 TO STEP.COUNT
      STEP.ID = GROUP_REC<PG_PROCESS_STEPS,SI>

      CALL GET.RECORD("PROCESS_STEPS",C.PROCESS_STEPS,STEP.ID,PROCESS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      IF ERROR_STATUS = '' THEN ;* INSERT STEP ID AND CERT
*
* INSERT BEFORE ALL STEPS UP TO THE LAST ONE IN THE GROUP LIST
         IF SI < STEP.COUNT THEN
            INS STEP.ID BEFORE PARTS_REC<PT_PROCESS_ID,STEP.INSERT.POINT>
            INS PROCESS_REC<PS_CERT_DESC> BEFORE PARTS_REC<PT_PROCESS_CERT_CODE,STEP.INSERT.POINT>
            INS '' BEFORE PARTS_REC<PT_PROCESS_CERT,STEP.INSERT.POINT>
*
            IF STEP.ID = "CUSTOM" OR STEP.ID = "NOTES" THEN
               INS PROCESS_REC<PS_PROCESS_DESC,1> BEFORE PARTS_REC<PT_PROCESS_DESC,STEP.INSERT.POINT>
            END ELSE
               INS ''BEFORE PARTS_REC<PT_PROCESS_DESC,STEP.INSERT.POINT>
            END
*
            STEP.INSERT.POINT += 1
*
* LAST ONE OVERWRITES ORIGINAL STEP
         END ELSE
            PARTS_REC<PT_PROCESS_ID,STEP.INSERT.POINT> = STEP.ID
            PARTS_REC<PT_PROCESS_CERT_CODE,STEP.INSERT.POINT> = PROCESS_REC<PS_CERT_DESC>
            PARTS_REC<PT_PROCESS_CERT,STEP.INSERT.POINT> = ''
*
            IF STEP.ID = "CUSTOM" OR STEP.ID = "NOTES" THEN
               PARTS_REC<PT_PROCESS_DESC,STEP.INSERT.POINT> = PROCESS_REC<PS_PROCESS_DESC,1>
            END ELSE
               PARTS_REC<PT_PROCESS_DESC,STEP.INSERT.POINT> = ''
            END

         END

      END ELSE
         PRMPT = 'Process_Group: ':GROUP.ID:', Process_Step: ':SELECTED.ID:', Not On File, Insertion Skipped'
         CAPTION = "PN.DIALOG"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      END
   NEXT SI
*
* UPDATE THE GRIND
   GOSUB LOAD.GRDPRO
*
END ELSE
   PRMPT = 'Process_Group: ':GROUP.ID:', Not On File, Insertion Skipped'
   CAPTION = "PN.DIALOG"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END


RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.GRDPRO: *
*
*  LOADS CONTROL GRDPRO WITH PROCESS STEPS
*
PROCESS.LIST = ''
PROCESS.CNT = DCOUNT(PARTS_REC<PT_PROCESS_ID>,@VM)
FOR I = 1 TO PROCESS.CNT
*
   PROCESS_ID = PARTS_REC<PT_PROCESS_ID,I>
   PROCESS.LIST<1,I,1> = PROCESS_ID
   IF PROCESS_ID = "CUSTOM" OR PROCESS_ID = "NOTES" THEN
      PROCESS.LIST<1,I,2> = PARTS_REC<PT_PROCESS_DESC,I,1> ;* ONLY DISPLAY 1ST LINE!
   END ELSE
      CALL GET.RECORD("PROCESS_STEPS",C.PROCESS_STEPS,PROCESS_ID,PROCESS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      IF ERROR_STATUS = '' THEN ;* GET CERT CODE ASSOC WITH THIS STEP
         PROCESS.LIST<1,I,2> = PROCESS_REC<PS_PROCESS_DESC,1>
      END ELSE
         PROCESS.LIST<1,I,2> = "Process Step Missing!"
      END
   END
   PROCESS.LIST<1,I,3> = PARTS_REC<PT_PROCESS_CERT,I>
   PROCESS.LIST<1,I,4> = PARTS_REC<PT_PROCESS_CERT_CODE,I>
*
NEXT I
*
CTRLIDS = "GRDPRO"
PROPS   = GPVALUE
VALUES  = PROCESS.LIST
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,CTRLIDS,PROPS,"","",VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR

RETURN
************************************************************
* $PAGE$
************************************************************
PART.GET:
*
* ACCESS PART NUMBER PN_ID
*
MSG_LIST = ''
MSG_LIST<1> = "Unable to Update Lock: ":PN_ID:@SVM:"Click OK to Proceed Without Locking Record,":@SVM:"Cancel to Reattempt Lock"
MSG_LIST<2> = "Record not Locked,":@SVM:"Updates Not Allowed!"

TRY.AGAIN:
IF COUNT(PN_ID,'*') > 0 THEN
   PRMPT = "'*' is an illegal character for the Part Number value"
   CAPTION = "Part Maintenance"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   ERROR_STATUS = ERR_NOF
END ELSE
   CALL GET.RECORD("PARTS_BOM",C.PARTS_BOM,PN_ID,PARTS_BOM,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
   CALL GET.RECORD("PARTS_QTY",C.PARTS_QTY,PN_ID,PARTS_QTY,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
   CALL GET.RECORD("PARTS",C.PARTS,PN_ID,PARTS_REC,@TRUE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
   IF ERROR_STATUS = ERR_BUSY THEN
* DISPLAY DATA BUT DO NOT ALLOW MODIFY
      SAVE_PARTS_REC = PARTS_REC   ;* SAVE COPY FOR FILE TEST
      SAVE_PARTS_QTY = PARTS_QTY   ;* SAVE COPY FOR FILE TEST
      SAVE_PARTS_BOM = PARTS_BOM    ;* SAVE COPY FOR FILE TEST
      GOSUB LOAD.CTRLS
      GOSUB DISABLE.BTNS
   END ELSE
      IF ERROR_STATUS = ERR_NOF OR PARTS_REC = '' THEN
         IF  USER.PASSED.PN THEN
            ENABLE.STATE = 1
            GOSUB ENABLE.CTRLS           ;* CALLER PASSED PN TO ADD, DO IT
            GOSUB NEW.PART
            CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTPN",GPVALUE,0,0,PN_ID,GUIERRORS,GUISTATE)
            CALL ATGUIACTIVATE(GUIAPP,GUIFRM,"TXTREV",GUIERRORS,GUISTATE)
         END ELSE
*   SEARCH FOR PART? (REGARDLESS MUST RELEASE LOCK)
            RELEASE C.FILE.VAR(C.PARTS), PN_ID
            PRMPT = "Search for part number matching : ":PN_ID:"?"
            CAPTION = "Part Maintenance"
            STYLE   = 0  ;* no icon
            BUTTONS = 4  ;* yes / no
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            IF RESPONSE = 6 THEN  ;* yes, search for part
               PN_TO_SEARCH = PN_ID
               CALL PN.SEARCH(PN_TO_SEARCH,PN_SELECTED,GUIERRORS,GUISTATE)
               IF PN_SELECTED = '' THEN   ;* NONE FOUND OR SELECTED
                  PRMPT = "No part number found"
                  CAPTION = "Part Maintenance"
                  STYLE   = 2  ;* !
                  BUTTONS = 0  ;* ok only
                  HELPID = ""
                  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
                  ERROR_STATUS = ERR_NOF
               END ELSE
                  PN_ID = PN_SELECTED
                  GOTO TRY.AGAIN
               END
            END ELSE
*
* ADD NEW OR SEARCH ?
*
               PRMPT = "Add Part Number: ":PN_ID:"?"
               CAPTION = "Part Maintenance"
               STYLE   = 0  ;* no icon
               BUTTONS = 4  ;* YES / NO
               HELPID = ""
               CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
               IF RESPONSE = 6 THEN
                  ENABLE.STATE = 1
                  GOSUB ENABLE.CTRLS           ;* NEW PN TO ADD
                  GOSUB NEW.PART
                  CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTPN",GPVALUE,0,0,PN_ID,GUIERRORS,GUISTATE)
                  CALL ATGUIACTIVATE(GUIAPP,GUIFRM,"TXTREV",GUIERRORS,GUISTATE)
               END ELSE
                  RELEASE C.FILE.VAR(C.PARTS), PN_ID
                  CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTPN",GPVALUE,0,0,"",GUIERRORS,GUISTATE)
                  CALL ATGUIACTIVATE(GUIAPP,GUIFRM,"TXTPN",GUIERRORS,GUISTATE)
               END
            END
         END
      END ELSE
         SAVE_PARTS_REC = PARTS_REC   ;* SAVE COPY FOR FILE TEST
         SAVE_PARTS_QTY = PARTS_QTY   ;* SAVE COPY FOR FILE TEST
         SAVE_PARTS_BOM = PARTS_BOM   ;* SAVE COPY FOR FILE TEST
         ENABLE.STATE = 1
         GOSUB ENABLE.CTRLS
         GOSUB LOAD.CTRLS
      END
   END
END
RETURN
************************************************************
* $PAGE$
************************************************************
SAVE.CHECK:
* ROUTINE CHECK FOR CURRENT PARTS_REC = SAVE_PARTS_REC
* IF NOT THE SAME FILE HAS NOT BEEN UPDATED, WARN USER
* SAVE.CHECK.OK = TRUE IF 1) RECORDS ARE THE SAME (FILE DOES NOT NEED UPDATING) OR 2) USER DOES NOT CARE
SAVE.CHECK.OK = @TRUE
IF PARTS_REC # SAVE_PARTS_REC THEN
   PRMPT = "Part record has changed but not saved.":@SVM:"Select OK to continue, Cancel to cancel action"
   CAPTION = "Part Maintenance"
   STYLE   = 2  ;* !
   BUTTONS = 1  ;* ok / cancel
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   IF RESPONSE = 2 THEN  ;* CANCEL
      SAVE.CHECK.OK = @FALSE
   END
END
RETURN
************************************************************
* $PAGE$
************************************************************
NEW.PART:
*


PARTS_REC<PT_REVCTL_DESC> = 'ORIGINAL RELEASE'
PARTS_REC<PT_REVCTL_DATE> = DATE()
PARTS_REC<PT_REVCTL_INIT> = ''
*
PARTS_REC<PT_SPC> = DEFAULTS_REC<DFLT_SPC>
PARTS_REC<PT_REVCTL_DESC,1> = 'ORIGINAL RELEASE'
PARTS_REC<PT_REVCTL_DATE,1> = DATE()
PARTS_REC<PT_REVCTL_INIT,1> = ""
*
* DISPLAY NEW PART DEFAULTS TO USER
*
GOSUB LOAD.CTRLS
RETURN
************************************************************
* $PAGE$
************************************************************
DIALOG.EXIT:
IF PARTS_REC # '' THEN
   GOSUB SAVE.CHECK
END ELSE
   SAVE.CHECK.OK = @TRUE
END
*
IF SAVE.CHECK.OK THEN
   IF NOT(KEEP_PN_LOCKED) THEN
      RELEASE C.FILE.VAR(C.PARTS), PN_ID
   END
END
*
* DO WE LEAVE OR KEEP PROCESSING PART EDITS?
*
CALLER.HIST = SYSTEM(1002)
CALLER.NAME =  CALLER.HIST<2,1>
*
IF CALLER.NAME = "NEXTJOB.MENU" THEN  ;* CALLED FROM MAIN MENU, KEEP GOING
   ENABLE.STATE = 0
   GOSUB ENABLE.CTRLS
   SEQ.LIST = 0                 ;* DYNAMIC ARRAY TO HOLD INFO FOR GRDRT
   PROCESS.STEP.SELECTED = 0    ;* PROCESSES STEP SELECTED
   ENG_ID = ''                  ;* ENGINEERING ID
   PN_ID = ''
   PARTS_REC = ''
   PARTS_QTY = ''
   PARTS_BOM = ''
*
   SAVE_PARTS_REC = ''
   SAVE_PARTS_QTY = ''
   SAVE_PARTS_BOM = ''
   GOSUB LOAD.CTRLS
   GOSUB ENABLE.NEW.PN.CTRLS
END ELSE
   GOSUB GUI.PARTS.PART.CLOSE;GUIEVT=0
END
RETURN
END

