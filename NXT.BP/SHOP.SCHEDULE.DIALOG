SUBROUTINE SHOP.SCHEDULE.DIALOG(GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: SHOP.SCHEDULE.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 05/01/2016
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* ROUTINE is called to perform shop reschedule
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES NXT.WO.STATUS.DEF
$INCLUDE NXT.INCLUDES WO.H

*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID = "SHOP.SCHEDULE.DIALOG"
GET_REC_MSG_LIST = ''
SCHD_FLAGS = ''
*
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'SHOP.SCHEDULE.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'SHOP.SCHEDULE.DIALOG' ELSE
   CALL ATGUIERROR(3,'SHOP.SCHEDULE.DIALOG','',0,GRFATAL,"'SHOP.SCHEDULE.DIALOG' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('SHOPSCHD','SHOPSCHD','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"LAST_SHOP_SCHEDULE",LAST_SS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF LAST_SS_REC = '' THEN
   LAST.SCHD = 'Last Shop Schedule: Not Run'
END ELSE
   LAST.SCHD = 'Last Shop Schedule: ':OCONV(LAST_SS_REC<1>,"D2/")
END

CALL ATGUISETPROP('SHOPSCHD','SHOPSCHD',"LBLLASTSS",GPVALUE,"","",LAST.SCHD,GUIERRORS,GUISTATE)
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='SHOPSCHD'
         BEGIN CASE
            CASE GUIFRM='SHOPSCHD'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.SHOPSCHD.SHOPSCHD.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCANCEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.SHOPSCHD.SHOPSCHD.BTNCANCEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNSS'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.SHOPSCHD.SHOPSCHD.BTNSS.CLICK;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.SHOPSCHD.SHOPSCHD.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.SHOPSCHD.SHOPSCHD.BTNCANCEL.CLICK: *
GOSUB GUI.SHOPSCHD.SHOPSCHD.CLOSE;GUIEVT=0
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.SHOPSCHD.SHOPSCHD.BTNSS.CLICK: *
GOSUB GET.WO.ID.LIST
*
WO.LIST.CT = DCOUNT( WO.ID.LIST,@AM)
PCT.COMP = 0
*
FOR I = 1 TO WO.LIST.CT
   WO_ID = WO.ID.LIST<I>
   *
   * GET THE WORK ORDER
   *
   CALL GET.RECORD("WO",C.WO,WO_ID,WO_REC,@TRUE,ERROR.STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
   IF WO_REC = '' THEN
      *CALLED WITH INVALID WORK ORDER ID, REPORT ERROR
      LOG.OPTS  = "DISPLAY"
      ERROR_NBR = ERR_SYS
      ERROR_MSG =  "SHOP.SCHEDULE.DIALOG CALLED WITH INVALID WORK ORDER ID: ": WO_ID
      CALL LOG.ERROR(LOG.OPTS,"SHOP.SCHEDULE.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   END ELSE

      IF WO_REC<WO_FREEZE_SCHD> THEN
         * WORK ORDER SET TO NOT RESCHEDULE SKIP
         *  *
         RELEASE C.FILE.VAR(C.WO),  WO_ID

      END ELSE
         SCHD_FLAGS<1> = @FALSE ;* DO NOT SHOW SCHD COMPLETE DIALOG
         CALL WO.SCHEDULE(WO_ID,WO_REC,SCHD_FLAGS,GUIERRORS,GUISTATE)
         CALL WRITE.RECORD(WO_ID,WO_REC,C.WO,@FALSE,ERROR_STATUS)
      END
   END
   NEW.PCT.COMP = INT((I/WO.LIST.CT) * 100)
   IF NEW.PCT.COMP > (PCT.COMP + 10) THEN  ;* UPDATE ROUGHTLY AT 10% COMPLETE INCREMENTS
      PCT.COMP = NEW.PCT.COMP
      CALL ATGUISETPROP('SHOPSCHD','SHOPSCHD',"GAUGE1",GPVALUE,"","",PCT.COMP,GUIERRORS,GUISTATE)
   END
NEXT I
LAST_SS_REC = DATE()
CALL WRITE.RECORD("LAST_SHOP_SCHEDULE",LAST_SS_REC,C.SYSTEM_FILE,@FALSE,ERROR_STATUS)
LAST.SCHD = 'Last Shop Schedule: ':OCONV(LAST_SS_REC<1>,"D2/")
CALL ATGUISETPROP('SHOPSCHD','SHOPSCHD',"LBLLASTSS",GPVALUE,"","",LAST.SCHD,GUIERRORS,GUISTATE)
*
*
CAPTION = "SHOP SCHEDULE"
STYLE   = 2  ;* !
BUTTONS = 0  ;* ok
PRMPT = I :' Work Orders Scheduled'
HELPID = ""
CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
*GET.WO.ID.LIST - GET LIST OF WORK ORDER TO SCHEDULE
* RETURN IN WO.ID.LIST
*
GET.WO.ID.LIST: *
WO.RELEASED.CODE = WORK.ORDER.STATUS.LIST<1,WO.RELEASED.IDX,1>
WO.ID.LIST = ''
*
SLIST = "SELECT WO WITH WO_STATUS = '":WO.RELEASED.CODE:"' TO 2"
*
** CRT SLIST
*
EXECUTE SLIST CAPTURING DMMY.OUT
*
IF @SELECTED GE 1 THEN
   *
   READLIST WO.ID.LIST FROM 2
END ELSE
   PRMPT = 'No Works Orders found for Shop Schedule'
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*
END
