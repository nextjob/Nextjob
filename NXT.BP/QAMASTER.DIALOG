SUBROUTINE QAMASTER.DIALOG(GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: QAMASTER.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 03/15/2015
* UPDATED:
*
* MAINTENANCE RECORD:
*
*
* EQUATE:
*
*
* VARIABLES:
*
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* DIALOG CREATES AND MAINTAINS THE QAMASTER RECORDS FOR OPTIONAL METHOD OF QUALITY CHARACTERISTIC MAINTENANCE
* THE QAMASTER RECORDS ARE USED AS AN OPTION TO SIMILAR DATA STORED IN THE RT / WR RECORDS (ROUTINGS / WORK ORDER ROUTINGS)
* THE DATA SET DEFINES THE CHARATERISTICS FOR DATA VALUES AQUIRED FROM OPERATOR INPUT VIA QADA.DIALOG
* NXT.EQUATE SETTING - NXT_QA_CHAR_SOURCE IS SET TO ID WICH DATA SOURCE IS USED
* WHEN USING THE QA_MASTER DATA SET, CHARACTERISTIC ID'S MUST BE UNIQUE WITHIN A PART NUMBER'S DATA SET.
* ALSO THERE IS ONLY ONE DATA SET FOR
* THE PART NUBMER.
* WHEN USING THE RT / WR DATA SET, CHARACTERISTIC ID'S MUST BE UNIQUE WITHIN A PART NUMBER'S ROUTING SEQUENCE.
*   ALSO THERE IS A DATA SET FOR EACH ENGINEERING VERSION (ROUTING) FOR THE PART
* 
********  CODE NOT COMPLETE / ALSO CHANGES TO QADA.DIALOG NOT COMPLETE
*
* PROCESS:
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES QA_MASTER.H
$INCLUDE NXT.INCLUDES AQL.C0.TABLE
*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID = "QAMASTER.DIALOG"
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'QAMASTER.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'QAMASTER.DIALOG' ELSE
   CALL ATGUIERROR(3,'QAMASTER.DIALOG','',0,GRFATAL,"'QAMASTER.DIALOG' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
MSG_LIST = ''    ;* GET.RECORD CANNED MESSAGE
* SEED GUI APPLICATION AND GUI FORM VARIABLES AT START UP
GUIAPP = 'QAMASTER'
GUIFRM = 'QAMASTER'
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
GOSUB LOAD.QA.METHODS  ;* LOAD METHODS INTO QAGRID DROPDOWN LIST
GOSUB LOAD.QA.AQL      ;* LOAD AQL VALUES IN QAGRID DROPDOWN LIST
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('QAMASTER','QAMASTER','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='QAMASTER'
         BEGIN CASE
            CASE GUIFRM='QAMASTER'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.QAMASTER.QAMASTER.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNDELETE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.QAMASTER.QAMASTER.BTNDELETE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNPRINT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.QAMASTER.QAMASTER.BTNPRINT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LSTRTLIST'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.QAMASTER.QAMASTER.LSTRTLIST.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='QAGRID'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.QAMASTER.QAMASTER.QAGRID.CLICK;GUIEVT=0
                        CASE GUIEVT=GEVALIDATEROW
                           GOSUB GUI.QAMASTER.QAMASTER.QAGRID.VALIDATEROW;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT2PN'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.QAMASTER.QAMASTER.TXT2PN.VALIDATE;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.QAMASTER.QAMASTER.BTNDELETE.CLICK: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.QAMASTER.QAMASTER.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.QAMASTER.QAMASTER.BTNPRINT.CLICK: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.QAMASTER.QAMASTER.LSTRTLIST.CLICK: *
REL_ENG_ID = ENG.LIST<1,GUIARGS<1>,1>
IF REL_ENG_ID # '' THEN
   GOSUB LOAD.SEQ.LIST
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.QAMASTER.QAMASTER.QAGRID.CLICK: *
* RESET PREVIOUS SELECTED STEP COLOR
IF SELECTED.QA > 0 THEN
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"QAGRID",GPBACKCOLOR,"",SELECTED.QA,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
SELECTED.QA = GUIARGS<1,2> ;* ROW NUMBER
QA.LIST.CNT = DCOUNT(QA.LIST<1>,@VM)
* ENSURE THAT STEP SELECTED IS NEXT OPEN STEP (WE DID NOT SKIP A ROW)
IF SELECTED.QA > QA.LIST.CNT THEN
   SELECTED.QA =  QA.LIST.CNT + 1
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"QAGRID",GPROW,"","",SELECTED.QA,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
CALL ATGUISETPROP(GUIAPP,GUIFRM,"QAGRID",GPBACKCOLOR,"",SELECTED.QA,CLRGRAY,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.QAMASTER.QAMASTER.QAGRID.VALIDATEROW: *
*the user has changed data in at least one cell of the previously active row
*and moved to a different row (or activated a different control).
*GUIARGS<1,1> = row number being validated
*GUIARGS<2> = values of all of the row's cells separated by subvalue
*marks.
*
* SOME HANDY DEBUG INFO, REMOVE "*"
*********************************************
*PRMPT = "QAGRID.VALIDATEROW "
*PRMPT := " 1: ": GUIARGS<2,1,1> + 0
*PRMPT := " 2: ": GUIARGS<2,1,2>
*PRMPT := " 3: ": GUIARGS<2,1,3>
*PRMPT := " 4: ": GUIARGS<2,1,4>
*PRMPT := " 5: ": GUIARGS<2,1,5>
*PRMPT := " 6: ": GUIARGS<2,1,6>
*PRMPT := " 7: ": GUIARGS<2,1,7>
*PRMPT := " 8: ": GUIARGS<2,1,8>
*PRMPT := " QA.CNT: ": GUIARGS<1,1>
*STYLE   = 2  ;* !
*BUTTONS = 0  ;* ok
*HELPID = ""
*CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
************************************************
QA.ROW = GUIARGS<1,1>
CHAR_ID = TRIM(GUIARGS<2,1,2>)
IF CHAR_ID = '' OR CHAR_ID = " " THEN  ;* CHARACTERISTIC REQD!
   PRMPT = "Characteristic Cannot Be Null "
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   GOSUB LOAD.QA.GRID
END ELSE
   *
   * AND MUST BE UNIQUE!
   UNIQUE.ID = @TRUE
   FOR I = 1 TO DCOUNT(QA.LIST<1>,@VM)
      IF I = QA.ROW THEN
         NULL ;* SKIP COMPARE TO ITSELF
      END ELSE
         IF CHAR_ID = QA.LIST<1,I,2> THEN
            PRMPT = "Characteristic Id Must be Unique"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            UNIQUE.ID = @FALSE
            GOSUB LOAD.QA.GRID
            EXIT
         END
      END
   NEXT I
   IF UNIQUE.ID THEN
      *
      * DID USER CHANGE CHAR_ID?
      *
      IF (QA.LIST<1,QA.ROW,2>  # '') AND (QA.LIST<1,QA.ROW,2>  # CHAR_ID) THEN
         PRMPT = "Warning: You Are Changing the Characteristic Id, This Action Could Result in Previously Save QA Data For This Id Becoming Meaningless"
         STYLE   = 2  ;* !
         BUTTONS = 1  ;* ok / CANCEL
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         IF RESPONSE = NXT.CANCEL.RSP THEN
            GOSUB LOAD.QA.GRID
            GOTO QAGRID.VALIDATEROW.999
         END
      END
      *
      * ASSEMBLE QA_MASTER RECORD
      *
      QAM_REC = ''
      *
      QAM_REC<QAM_ACTIVE> = GUIARGS<2,1,1> + 0
      QAM_REC<QAM_CHAR>  = GUIARGS<2,1,3>
      QAM_REC<QAM_AQL>   = GUIARGS<2,1,4>
      QAM_REC<QAM_LOC>   = GUIARGS<2,1,5>
      QAM_REC<QAM_WO_SEQ> = GUIARGS<2,1,6>
      QAM_REC<QAM_METHOD> = GUIARGS<2,1,7>
      QAM_REC<QAM_VAL1>  = GUIARGS<2,1,8>
      QAM_REC<QAM_VAL2>  = GUIARGS<2,1,9>
      *
      *
      * VALIDATE BEFORE ALLOWING FILE OPERATION
      *
      QAM_ID =  PN_ID:'*':CHAR_ID
      QA.VAL.ROW = QA.ROW
      GOSUB QA.VALIDATE
      *
      * QA.VALID RETURNED FLAG T/F
      * QA.VALID.MSG IF QA.VALID = FALSE, RETURNED ERROR MSG
      IF NOT(QA.VALID) THEN
         PRMPT = QA.VALID.MSG
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      END ELSE
         CALL WRITE.RECORD(QAM_ID,QAM_REC,C.QA_MASTER,@FALSE,ERROR_STATUS)
         GOSUB LOAD.QA.GRID
      END
      *
   END
END

QAGRID.VALIDATEROW.999: *
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.QAMASTER.QAMASTER.TXT2PN.VALIDATE: *
PN_ID = OCONV(GUIARGS<2>,"MCU")
GOSUB PN.GET

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
LOAD.QA.METHODS:
CALL LIST.LOAD(C.VALIDATION_FILE,"QA.METHODS","2",'',METHOD.LIST,METHOD.IDX,METHOD.COUNT,EMSG)

*
IF METHOD.COUNT > 0 THEN ;* NO ITEMS FOUND
   VALUE = METHOD.LIST
   CONVERT @SVM TO '|' IN VALUE
   CONVERT @VM TO @SVM IN VALUE
   *
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"QAGRID",GPCOLITEMS,7,0,VALUE,GUIERRORS,GUISTATE)
END

RETURN
*
************************************************************
LOAD.QA.AQL:
* AQL.C0.IDX DEFINED IN AQL.C0.TABLE INCUDE FILE
*
VALUE = AQL.C0.IDX
CONVERT @AM TO @SVM IN VALUE
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"QAGRID",GPCOLITEMS,4,0,VALUE,GUIERRORS,GUISTATE)
*
RETURN
************************************************************
QA.VALIDATE: *
* QA.VAL.ROW VM OF QA DATA TO VALIDATE WITHIN WRT_REC
* QA.VALID RETURNED FLAG T/F
* QA.VALID.MSG IF QA.VALID = FALSE, RETURNED ERROR MSG
QA.VALID = @TRUE
QA.VALID.MSG = ''
BEGIN CASE
   CASE QAM_ID = ''
      QA.VALID.MSG = "Missing Characteristic ID"
   CASE QAM_REC<QAM_CHAR> = ''
      QA.VALID.MSG = "Missing Characteristic Desc"
   CASE QAM_REC<QAM_METHOD> = ''
      QA.VALID.MSG = "Missing Method"
   CASE QAM_REC<QAM_AQL> = ''
      QA.VALID.MSG = "Missing AQL Table Value"
   CASE QAM_REC<QAM_VAL1> = ''
      QA.VALID.MSG = "Missing Value 1"
   CASE QAM_REC<QAM_VAL2> = ''
      QA.VALID.MSG = "Missing Value 2"
   CASE NUM(QAM_REC<QAM_VAL1>)
      IF NOT(NUM(QAM_REC<QAM_VAL2>)) THEN
         QA.VALID.MSG = "Value 1 and Value 2 Must be of the Same Type"
      END ELSE
         IF QAM_REC<QAM_VAL1> GE QAM_REC<QAM_VAL2> THEN
            QA.VALID.MSG = "Value 1 - Lower Limit, Value 2 - Upper Limit"
         END
      END
   CASE NOT(NUM(QAM_REC<QAM_VAL1>))
      IF (QAM_REC<QAM_VAL1> # QA.CHAR.ACCEPT.TEXT) OR (QAM_REC<QAM_VAL2> # QA.CHAR.REJECT.TEXT) THEN
         QA.VALID.MSG = "Non Numeric Type Must be of: ":QA.CHAR.ACCEPT.TEXT: " " :QA.CHAR.REJECT.TEXT
      END
END CASE
*
IF QA.VALID.MSG # '' THEN
   QA.VALID.MSG = "QA Characteristic Row: ":QA.VAL.ROW:" ":QA.VALID.MSG:" Please Correct"
   QA.VALID = @FALSE
END
RETURN
******************************************************************************************
PN.GET: *
PARTS_REC = ""
CALL GET.RECORD("PARTS",C.PARTS,PN_ID,PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF PARTS_REC # '' THEN
   * POP ENG ID LIST, DESC AND DRAWING INFO
   *
   CALL WRT.LSTRTLIST.UPDATE(PN_ID,ENG.LIST,PARTS_REC,"LSTRTLIST",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
   *
   CTRLIDS = "TXT2PN"
   PROPS   = GPVALUE
   VALUES  = PN_ID
   *
   CTRLIDS<2> = "LBLDESCV"
   PROPS<2>   = GPVALUE
   VALUES<2>  = PARTS_REC<PT_DESC>
   *
   CTRLIDS<3> = "LBLDRAWV"
   PROPS<3>   = GPVALUE
   VALUES<3>  = PARTS_REC<PT_DRAWING>
   *
   CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   *
END ELSE
   *  *
   PRMPT = "Part Number:":PN_ID:" Not On File, Search?"
   CAPTION = PROG_ID
   STYLE   = 0  ;* no icon
   BUTTONS = 4  ;* yes / no
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

   IF RESPONSE = 6 THEN  ;* yes, search for part
      PN_TO_SEARCH = PN_ID
      CALL PN.SEARCH(PN_TO_SEARCH,PN_SELECTED,GUIERRORS,GUISTATE)
      IF PN_SELECTED = '' THEN   ;* NONE FOUND OR SELECTED
         *
         * WE NOW HAVE AN INVALID PART NUMBER IN THE TEXT BOX, CLEAR IT ALL OUT AFTER ERROR MSG DISPLAYED
         *
         GOSUB CLEAR.PART.FIELDS
      END ELSE
         PN_ID = PN_SELECTED
         GOTO PN.GET
      END
   END ELSE ;* NO DO NOT SEARCH FOR PART
      *
      * WE NOW HAVE AN INVALID PART NUMBER IN THE TEXT BOX, CLEAR IT ALL OUT AFTER ERROR MSG DISPLAYED
      *
      GOSUB CLEAR.PART.FIELDS

   END
END
RETURN
******************************************************************************************
CLEAR.PART.FIELDS:
*
* CLEAR OUT PART DATA ON FRMWO
*
CTRLIDS = "TXT2PN"
PROPS   = GPVALUE
VALUES  = ''
*
CTRLIDS<2> = "LBLDESCV"
PROPS<2>   = GPVALUE
VALUES<2>  = ''
*
CTRLIDS<3> = "LBLDRAWV"
PROPS<3>   = GPVALUE
VALUES<3>  = ''
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* AND RESET ID
*
PN_ID = ''
RETURN
****************************************************************************************
LOAD.SEQ.LIST:
*
* LOAD THE SEQ LIST FOR THIS ROUTING / ENG ID
*
SLIST = 'SSELECT RT BY PARTNBR BY ENGID BY SEQNBR WITH PARTNBR = "':PN_ID:'" AND WITH ENGID = "':REL_ENG_ID:'" TO 2'
EXECUTE SLIST CAPTURING DMMY.OUT
SEQ.LIST = ''
*
IF @SELECTED GE 1 THEN
   READLIST IDLIST FROM 2 THEN
      LIST.CT = DCOUNT(IDLIST,@AM)
      FOR I = 1 TO LIST.CT
         FROM_RT_ID = IDLIST<I,1>
         SEQ_ID = FIELD(FROM_RT_ID,"*",3)   ;* SEQ NUMBER
         SEQ.LIST<1,1,I> = SEQ_ID
      NEXT I
   END
   *
   *
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"QAGRID",GPCOLITEMS,6,0,SEQ.LIST,GUIERRORS,GUISTATE)
END
*
RETURN
****************************************************************************************
LOAD.QA.GRID:  *
* NEED TO WRITE THIS ROUTINE, SEE QADA.DIALOG RT.DIALOG FOR SAMPLES
RETURN
END
