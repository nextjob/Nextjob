SUBROUTINE AR.DIALOG(GUIERRORS,GUISTATE)
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: GUISUB.AR
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2007
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
*
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* PROCESS ACCOUNTS RECEIVABLE INVOICES (APPLY CUSTOMER CHECKS TO INVOICE)
* 
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES CUSTOMERS.H
$INCLUDE NXT.INCLUDES AR.H
$INCLUDE NXT.INCLUDES AR_CHECKS.H
$INCLUDE NXT.INCLUDES VALIDATION_FILE.H
*
*-->BEGIN GUI HEADER<--*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "AR.DIALOG"
GUIERRORS = ''
GUIAPP = "AR"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "AR"
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
  CALL ATGUIERROR(3,'AR.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
  RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'AR.DIALOG' ELSE
  CALL ATGUIERROR(3,'AR.DIALOG','',0,GRFATAL,"'AR.DIALOG' is not on file.",GUIERRORS)
  RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
  CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('AR','AR','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
* INIT VARIABLES
*
GET_REC_MSG_LIST = ''   ;* OPTIONAL MESSAGE TO STANDARD GET.RECORD ROUTINE
GOSUB RESET.BUFFERS     ;* INIT VARIABLES
*
* USER RECORD
*
USER_RECORD_ID = "USER*":@LOGNAME
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,USER_RECORD_ID,USER_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF USER_REC # '' THEN
  IF USER_REC<USER_PRICE_RESTRICTED> THEN
    USER.IS.RESTRICTED = @TRUE
    PRMPT = "Your user privileges do not allow access to this module"
    CAPTION = "Account Receivable"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok only
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
    GOSUB GUI.AR.AR.CLOSE;GUIEVT=0
    RETURN
  END
  GOSUB LOAD.CM.NAME.LIST         ;* ADD CUSTOMER NAMES TO LST1CUSTNAME
END ELSE
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "Unknown User: ":@LOGNAME
  CALL LOG.ERROR(LOG.OPTS,"GUISUB.AR", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  GOSUB GUI.AR.AR.CLOSE;GUIEVT=0
  RETURN
END
*
* BANK CODES
*
CALL GET.RECORD("VALIDATION_FILE",C.VALIDATION_FILE,"BANKS",BANKS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF BANKS_REC = '' THEN
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "Missing BANKS from VALIDATION_FILE"
  CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  GOSUB GUI.AR.AR.CLOSE;GUIEVT=0
END
*
* GL TRANSACTION CODESS
*
CALL GET.RECORD("VALIDATION_FILE",C.VALIDATION_FILE,"GL.TRANS.CODES",GLC_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF GLC_REC = '' THEN
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "Missing GL.TRANS.CODES from VALIDATION_FILE"
  CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  GOSUB GUI.AR.AR.CLOSE;GUIEVT=0
END
*
*
* CREATE LISTS FOR  DROP DOWN CONTROLS
*
BANK.LIST  = ''  ;* LIST FOR PAYMENT TERMS SELECTION
BANK.IDX   = ''
*
CALL LIST.LOAD(C.VALIDATION_FILE,"BANKS","2",'',BANK.LIST,BANK.IDX,LIST.COUNT,EMSG)
CTRLIDS = "LSTBANK"
PROPS   = GPITEMS
VALUES  = BANK.LIST
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
  CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN RETURN
  IF GUIEVT EQ GEQUIT THEN
    GUI.DLG.EXIT = 1
  END ELSE
    GUIAPP=OCONV(GUIAPP,'MCU')
    GUIFRM=OCONV(GUIFRM,'MCU')
    GUICTL=OCONV(GUICTL,'MCU')
    GOSUB GUI.DECODE.EVENT
  END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
  GUI.APP.LIST = ''
  CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
  IF GUI.APP.LIST EQ '' THEN
    * Quit event fired after last GUI object is deleted - discard it
    CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
    * We could call ATGUISHUTDOWN here if we wanted, but there's no
    * harm just leaving the GUI environment initialized, in case we
    * want to use it again...
  END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
  * Add your code here...
END ELSE
  * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
  BEGIN CASE
    CASE GUIAPP='AR'
      BEGIN CASE
        CASE GUIFRM='AR'
          BEGIN CASE
            CASE GUICTL=''
              BEGIN CASE
                CASE GUIEVT=GECLOSE
                  GOSUB GUI.AR.AR.CLOSE;GUIEVT=0
              END CASE
            CASE GUICTL='BTNCANCEL'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.AR.AR.BTNCANCEL.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNDELETE'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.AR.AR.BTNDELETE.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNPROCESS'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.AR.AR.BTNPROCESS.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNSAVE'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.AR.AR.BTNSAVE.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='GRID1'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATECELL
                  GOSUB GUI.AR.AR.GRID1.VALIDATECELL;GUIEVT=0
              END CASE
            CASE GUICTL='LSTBANK'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.AR.AR.LSTBANK.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='LSTCUST'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.AR.AR.LSTCUST.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='TXTAMOUNT'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.AR.AR.TXTAMOUNT.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTCHECK'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.AR.AR.TXTCHECK.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTDATE'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.AR.AR.TXTDATE.VALIDATE;GUIEVT=0
              END CASE
          END CASE
      END CASE
  END CASE
  IF GUIEVT THEN
    * Unhandled event - may be dynamic
    GOSUB GUI.DYNAMIC.EVENTS
  END
END ELSE
  GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AR.AR.BTNDELETE.CLICK: *
PRMPT = "Need to Add Invoice Delete Code!"
CAPTION = "AR.DIALOG"
STYLE   = 4  ;* i
BUTTONS = 0  ;* ok
HELPID = ""
CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.AR.AR.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
  GOSUB GUI.DIALOG.RETURN
  CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
  GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AR.AR.BTNCANCEL.CLICK: *
GOSUB RESET.BUFFERS
GOSUB RESET.FORM
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AR.AR.BTNPROCESS.CLICK: *
BEGIN CASE
  CASE INV.LIST = ''
    PRMPT = "No invoices to process"
    CAPTION = "Accounts Receivable"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  CASE BAL.VAL GT 0
    PRMPT = "Remaining balance on check to apply"
    CAPTION = "Accounts Receivable"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  CASE BAL.VAL LT 0
    PRMPT = "Negative balance on check, please correct"
    CAPTION = "Accounts Receivable"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

  CASE 1
    *
    * APPY INVOICES TO CHECK, FIRST ACCESS ALL AR RECORDS AND LOCK
    *
    INV.COUNT = DCOUNT(INV.LIST<1>,@VM)
    DIM AR_RECORDS(INV.COUNT)
    FOR I = 1 TO INV.COUNT    ;* FOR EACH INVOICE IN LIST
      *
      * GET AR.RECORD AND UPDATE AR_BAL_DUE, AR_PAY_DATE, AR_PAY_AMOUNT, AR_CHECK
      *
      AR_ID = INV.LIST<1,I,1>
      CALL GET.RECORD("AR",C.AR,AR_ID,AR_RECORDS(I),@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      IF ERROR_STATUS # '' THEN
        *
        * CANNOT GET AR RECORD, STOP PROCESSING
        *
        PRMPT = "Unable to PROCESS, AR record ":AR_ID:"not accessable, reason ":ERROR_STATUS
        CAPTION = "Accounts Receivable"
        STYLE   = 2  ;* !
        BUTTONS = 0  ;* ok
        HELPID = ""
        CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
        FOR X = 1 TO I
          AR_ID = INV.LIST<1,X,1>
          RELEASE C.FILE.VAR(C.AR), AR_ID
        NEXT X
        GOTO BTNPROCESS.999
      END
      *
    NEXT I
    *
    * WE NOW HAVE ALL THE AR RECORDS READ IN AND LOCKED, UPDATE WITH CHECK DATA
    *
    FOR I = 1 TO INV.COUNT    ;* FOR EACH INVOICE IN LIST
      AR_ID = INV.LIST<1,I,1>
      AMOUNT.TO.APPLY = ICONV(INV.LIST<1,I,6>,AR_BAL_DUE.CNV)
      *
      AC_REC<AC_INVOICES,-1>   = AR_ID
      AC_REC<AC_INV_AMTS,-1>   = AMOUNT.TO.APPLY
      *
      AR_REC = AR_RECORDS(I)
      *                               * BAL DUE = CURRENT BAL DUE - (AMT TO APPLY + WRITE OFF)
      AR_REC<AR_BAL_DUE> -= (AMOUNT.TO.APPLY+ICONV(INV.LIST<1,I,5>,AR_BAL_DUE.CNV))
      AR_REC<AR_PAY_DATE,-1> = AC_REC<AC_DATE>
      AR_REC<AR_PAY_AMOUNT,-1> = AMOUNT.TO.APPLY
      AR_REC<AR_CHECK,-1> = CHECK_NBR
      CALL WRITE.RECORD(AR_ID,AR_REC,C.AR,@FALSE,ERROR_STATUS)
    NEXT I
    *
    * NOW WRITE OUT THE AR_CHECK RECORD
    *
    CALL WRITE.RECORD(AC_ID,AC_REC,C.AR_CHECKS,@FALSE,ERROR_STATUS)
    *
    * FINALLY WRITE THE GLT RECORD
    *
    DB_AMT = AC_REC<AC_AMOUNT>
    CR_AMT = AC_REC<AC_AMOUNT>
    CALL WRITE.GLT(BANK.GLT.CD,DB_AMT,CR_AMT,AC_REC<AC_DATE>,"AR-CHK",AC_ID,GUIERRORS,GUISTATE)
    *
    GOSUB RESET.BUFFERS
    GOSUB RESET.FORM
END CASE
BTNPROCESS.999: *
RETURN
*-->END EVENT HANDLER<--*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AR.AR.BTNSAVE.CLICK: *
PRMPT = "Need to Add Invoice Save Code!"
CAPTION = "AR.DIALOG"
STYLE   = 4  ;* i
BUTTONS = 0  ;* ok
HELPID = ""
CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AR.AR.GRID1.VALIDATECELL: *
GRD.COL = GUIARGS<1,1>
GRD.ROW = GUIARGS<1,2>
CELL.VAL = GUIARGS<2>
*
* ONLY ALLOW ACTION IF CHECK NUMBER AND AMOUNT ALREADY ENTERED
*
IF AC_REC<AC_AMOUNT> = "" OR AC_ID = "" OR AC_REC<AC_DATE> = "" THEN
  PRMPT = "Invoice entry not allowed until Check Number, Date and Amount entered"
  CAPTION = "Accounts Receivable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  GOSUB LOAD.INV.LIST
END ELSE
  BEGIN CASE
      *
      * USER ENTERED INVOICE ?
    CASE GRD.COL = 1
      *
      * ALREADY IN LIST ?
      *
      AR_ID = CELL.VAL
      INV.COUNT = DCOUNT(INV.LIST,@VM)
      FOR I = 1 TO INV.COUNT
        IF INV.LIST<1,I,1> = AR_ID THEN
          PRMPT = "Invoice: ":AR_ID:" already applied on this check"
          CAPTION = "Accounts Receivable"
          STYLE   = 2  ;* !
          BUTTONS = 0  ;* ok
          HELPID = ""
          CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
          GOTO GRID1.VAL.CELL.999
        END
      NEXT I
      CALL GET.RECORD("AR",C.AR,AR_ID,AR_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
      BEGIN CASE
        CASE ERROR_STATUS = ERR_NOF  ;*  NON - EXISTENT AR #
          PRMPT = "Invoice: ":AR_ID:" not on file"
          CAPTION = "Accounts Receivable"
          STYLE   = 2  ;* !
          BUTTONS = 0  ;* ok
          HELPID = ""
          CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

        CASE AR_REC<AR_CUST_ID> # CM_ID   ;* WRONG CUSTOMER
          PRMPT = "Invoice: ":AR_ID:" not for customer: ":CM_ID
          CAPTION = "Accounts Receivable"
          STYLE   = 2  ;* !
          BUTTONS = 0  ;* ok
          HELPID = ""
          CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

        CASE AR_REC<AR_BAL_DUE> = 0 AND AR_REC<AR_PAY_DATE> # ""  ;* PAID
          PRMPT = "Invoice: ":AR_ID:" already paid!"
          CAPTION = "Accounts Receivable"
          STYLE   = 2  ;* !
          BUTTONS = 0  ;* ok
          HELPID = ""
          CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

        CASE 1
          INV.LIST<1,GRD.ROW,1> = AR_ID
          INV.LIST<1,GRD.ROW,2> = OCONV(AR_REC<AR_INV_DATE>,AR_INV_DATE.CNV)
          INV.LIST<1,GRD.ROW,3> = OCONV(AR_REC<AR_AMOUNT>,AR_AMOUNT.CNV)
          INV.LIST<1,GRD.ROW,4> = OCONV(AR_REC<AR_BAL_DUE>,AR_BAL_DUE.CNV)
          INV.LIST<1,GRD.ROW,5> = 0
          INV.LIST<1,GRD.ROW,6> = OCONV(AR_REC<AR_BAL_DUE>,AR_BAL_DUE.CNV)
          GOSUB LOAD.INV.LIST
          GOTO GRID1.VAL.CELL.999
      END CASE
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRID1",GPVALUE,1,GRD.ROW,"",GUIERRORS,GUISTATE)
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRID1",GPCOLUMN,"","",1,GUIERRORS,GUISTATE)
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRID1",GPROW,"","",GRD.ROW,GUIERRORS,GUISTATE)
      GOTO GRID1.VAL.CELL.999
      *
      * USER ENTERED WRITE OFF AMOUNT ?
    CASE GRD.COL = 5
      IF CELL.VAL LE INV.LIST<1,GRD.ROW,6> THEN
        INV.LIST<1,GRD.ROW,5> = CELL.VAL
        INV.LIST<1,GRD.ROW,6> = OCONV(AR_REC<AR_BAL_DUE>,AR_BAL_DUE.CNV) - CELL.VAL
        GOSUB LOAD.INV.LIST
      END ELSE
        PRMPT = "Write Off amount cannot be greater than invoice amount due!"
        CAPTION = "Accounts Receivable"
        STYLE   = 2  ;* !
        BUTTONS = 0  ;* ok
        HELPID = ""
        CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
        CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRID1",GPCOLUMN,"","",5,GUIERRORS,GUISTATE)
        CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRID1",GPROW,"","",GRD.ROW,GUIERRORS,GUISTATE)
        GOTO GRID1.VAL.CELL.999
      END
      *
      * USER ENTERED AMOUNT TO APPLY ?
    CASE GRD.COL = 6
      IF CELL.VAL LE INV.LIST<1,GRD.ROW,6> THEN
        INV.LIST<1,GRD.ROW,6> = CELL.VAL
        GOSUB LOAD.INV.LIST
      END ELSE
        PRMPT = "Amount to apply cannot be greater than invoice amount due!"
        CAPTION = "Accounts Receivable"
        STYLE   = 2  ;* !
        BUTTONS = 0  ;* ok
        HELPID = ""
        CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
        CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRID1",GPCOLUMN,"","",6,GUIERRORS,GUISTATE)
        CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRID1",GPROW,"","",GRD.ROW,GUIERRORS,GUISTATE)
        GOTO GRID1.VAL.CELL.999
      END
  END CASE
END
GRID1.VAL.CELL.999: *
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AR.AR.LSTBANK.CLICK: *
BANK_TEST = BANK.LIST<1,GUIARGS<1>,1>
* BANKS_REC
* VANDALIDATE BANK SELECTED
*  - DOES THE CODE HAVE A VALID GL TRAN CODE FOR AP?
*
GLC.VALUE = BANKS_REC<CODE_VAL1,GUIARGS<1>>    ;* WE ARE ASSUMING THE BANK REC AND THE BANK LIST ARE LAID OUT THE SAME
LOCATE GLC.VALUE IN GLC_REC<1,1> BY "AL" SETTING IDX THEN
  GLC.FOUND = @TRUE
  BANK.GLT.CD = GLC.VALUE
END ELSE
  BANK_CODE  =  ''
  BANK.GLT.CD = ''
  PRMPT = "Bank Code: ":BANK_TEST:' Has an Invalid AP Gl Trans Code: ':GLC.VALUE:', Please Correct'
  CAPTION = "Accounts Receivable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  CALL ATGUISETPROP(GUIAPP,GUIFRM,"LSTBANK",GPVALUE,0,0,0,GUIERRORS,GUISTATE)
END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AR.AR.LSTCUST.CLICK: *
*
IF GUIARGS<1> GT 0 THEN       ;* CLICKED EMPTY LIST TEST
  IF INV.LIST # '' THEN  ;* CHANGING CUSTOMER ON CHECK NOT ALLOWED!
    PRMPT = "Warning, changing of customer not allowed"
    CAPTION = "Accounts Receivable"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* OK
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RSP, GUIERRORS,GUISTATE)
    CALL ATGUISETPROP(GUIAPP,GUIFRM,"LSTCUST",GPVALUE,0,0,CUST.LIST.IDX,GUIERRORS,GUISTATE)
    IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
  END ELSE
    CM_ID  = CUSTOMER.LIST<1,GUIARGS<1>,1>
    IF CM_ID # '' THEN
      CALL GET.CUSTOMER(CM_ID,CM_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
      *
      IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH CUST
        LOG.OPTS = "DISPLAY"
        ERROR_NBR = ERR_SYS
        ERROR_MSG = 'Selection of non-existent customer from list'
        CALL LOG.ERROR(LOG.OPTS,"GUISUB.AR", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      END ELSE
        *
        CUST.LIST.IDX   = GUIARGS<1>   ;* SAVE FOR CUST CHANGE TEST
        *
        CTRLIDS  = "LBLCUSTNAME"
        PROPS    = GPVALUE
        VALUES   = CM_REC<CM_NAME>
        *
        CTRLIDS<-1>  = "TXTDATE"
        PROPS<-1>    = GPENABLED
        VALUES<-1>   = 1
        *
        CTRLIDS<-1>  = "TXTCHECK"
        PROPS<-1>    = GPENABLED
        VALUES<-1>   = 1
        *
        CTRLIDS<-1>  = "TXTAMOUNT"
        PROPS<-1>    = GPENABLED
        VALUES<-1>   = 1
        *
        CTRLIDS<-1>  = "GRID1"
        PROPS<-1>    = GPENABLED
        VALUES<-1>   = 1
        *
        CTRLIDS<-1>  = "BTNPROCESS"
        PROPS<-1>    = GPENABLED
        VALUES<-1>   = 1
        *
        CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
        IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
        *
      END
    END
  END
END
CNC999: *
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AR.AR.TXTAMOUNT.VALIDATE: *
* USER ENTERED A CHECK VALUE, SAVE AND RE-DISPLAY
*
CHECK_AMT = GUIARGS<2>
AC_REC<AC_AMOUNT> = ICONV(CHECK_AMT,AC_AMOUNT.CNV)
CHECK.AMT = OCONV(AC_REC<AC_AMOUNT>,AC_AMOUNT.CNV)
CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTAMOUNT",GPVALUE,0,0,CHECK.AMT,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
GOSUB LOAD.INV.LIST  ;* CACULATE BALANCE TO APPLY
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AR.AR.TXTCHECK.VALIDATE: *
*
* USER ENTERED A CHECK NUMBER, SAVE AND RE-DISPLAY
*
CHECK_NBR = INT(GUIARGS<2>)
IF AC_ID # '' THEN
  OLD_AC_ID = AC_ID    ;* SAVE FOR RELEASE (IF WE GET A GOOD ID)
END

*
* SEE IF THIS CHECK NUMBER USED BEFORE FOR CUSTOMER
*
AC_ID = CM_ID:'*':CHECK_NBR
*
CALL GET.RECORD("AR_CHECKS",C.AR_CHECKS,AC_ID,TEST_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
*
IF ERROR_STATUS = ERR_NOF THEN ;*  NOT FOUND, OK TO USE
  IF OLD_AC_ID # '' THEN  ;* WAS THIS A CHANGE TO THE CHECK ID??
    RELEASE C.FILE.VAR(C.AR_CHECKS), OLD_AC_ID
    OLD_AC_ID = ''
  END
  CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTCHECK",GPVALUE,0,0,CHECK_NBR,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END ELSE
  PRMPT = "Check Number ":CHECK_NBR:" Already on file for Customer, not allowed"
  CAPTION = "Accounts Receivable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* OK
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RSP, GUIERRORS,GUISTATE)
  CALL ATGUIACTIVATE(GUIAPP,GUIFRM,"TXTCHECK",GUIERRORS,GUISTATE)
END
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AR.AR.TXTDATE.VALIDATE: *
DATE.TEST = ICONV(GUIARGS<2>,AC_DATE.CNV)
IF DATE.TEST = "" THEN
  PRMPT = "Invalid date: ":GUIARGS<2>
  CAPTION = "Accounts Receivable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* OK
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RSP, GUIERRORS,GUISTATE)
  CALL ATGUIACTIVATE(GUIAPP,GUIFRM,"TXTDATE",GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END ELSE
  DATE.OUT =  OCONV(DATE.TEST,AC_DATE.CNV)
  IF DATE.TEST LE DATE() THEN
    AC_REC<AC_DATE> = DATE.TEST
    CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTDATE",GPVALUE,0,0,DATE.OUT,GUIERRORS,GUISTATE)
    IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
  END ELSE
    PRMPT = "Check date cannot be a future date"
    CAPTION = "Accounts Receivable"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* OK
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RSP, GUIERRORS,GUISTATE)
    CALL ATGUIACTIVATE(GUIAPP,GUIFRM,"TXTDATE",GUIERRORS,GUISTATE)
    IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
  END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"AR.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
************************************************************
* $PAGE$
************************************************************
CALC.BALANCE:
*
* CACULATE AND DISPLAY BALANCE TO APPLY
*
INV.AMT = 0
INV.COUNT = DCOUNT(INV.LIST<1>,@VM)
FOR I = 1 TO INV.COUNT
  INV.AMT += INV.LIST<1,I,6>
NEXT I
*
AR.AMT = OCONV(AC_REC<AC_AMOUNT>,AC_AMOUNT.CNV)
BAL.VAL = AR.AMT - INV.AMT
*
IF BAL.VAL LT 0 THEN
  PRMPT = "Warning, total value of check applied"
  CAPTION = "Accounts Receivable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* OK
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RSP, GUIERRORS,GUISTATE)
END
*
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CM.NAME.LIST: *
*
* LOADS THE LSTCUST LIST
*
MAX.LIST = 200
START.LIST = 1
CALL GUI.SEARCH ("CUSTOMERS","","*","CM_NAME","CM_NAME,CM_ADDR,CM_CITY",MAX.LIST,START.LIST,CUSTOMER.LIST,LST.IDS,LIST.CT,EMSG)
*
IF EMSG<1> = 'No Items Found' THEN  ;* NO ITEMS FOUND
  VALUE = ''
END ELSE
  VALUE = CUSTOMER.LIST
END
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"LSTCUST",GPITEMS,0,0,VALUE,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
*
************************************************************
* $PAGE$
************************************************************
LOAD.INV.LIST: *
* INV.LIST<1,I,1> = INVOICE NUMBER
* INV.LIST<1,I,2> = DUE DATE
* INV.LIST<1,I,3> = INVOICE AMOUNT
* INV.LIST<1,I,4> = BAL DUE
* INV.LIST<1,I,5> = WRITE OFF
* INV.LIST<1,I,6> = AMOUNT TO APPLY
*
* SUM VALUE OF INVOICES TO APPLY
*
GOSUB CALC.BALANCE
*
CTRLIDS = ""
PROPS   = ""
VALUES  = ""
*
CTRLIDS<1> = "GRID1"
PROPS<1>   = GPVALUE
VALUES<1>  = INV.LIST
*
CTRLIDS<2> = "LBLBALVAL"
PROPS<2>   = GPVALUE
VALUES<2>  = BAL.VAL"R2"
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
RESET.BUFFERS: *
BANK.GLT.CD = ''
AC_REC    = ''         ;* AR_CHECKS RECORD
OLD_AC_ID = ''         ;* OLD AR_CHECKS ID
AC_ID     = ''         ;* AR_CHECKS ID
CUST.LIST.IDX   = ''   ;* CUSTOMER LIST INDEX OF SELECTED CUSTOMER
BAL.VAL   = 0          ;* AMOUNT OF CHECK REMAINING TO BE APPLIED TO INVOICE(S)
INV.LIST  = '' ;* INVOICE LIST DEFINED AS:
* INV.LIST<1,x,1> = INVOICE NUMBER
* INV.LIST<1,x,2> = DUE DATE
* INV.LIST<1,x,3> = INVOICE AMOUNT
* INV.LIST<1,x,4> = BALANCE DUE
* INV.LIST<1,x,5> = WRITEOFF AMOUNT
* INV.LIST<1,x,6> = AMOUNT TO APPLY
RETURN
************************************************************
* $PAGE$
************************************************************
RESET.FORM: *
*
CALL ATGUIRESET(GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
*
CTRLIDS  = ""
PROPS    = ""
VALUES   = ""
*
CTRLIDS<1> = "GRID1"
PROPS<1>   = GPVALUE
VALUES<1>  = INV.LIST
*
CTRLIDS<2>  = "TXTDATE"
PROPS<2>    = GPENABLED
VALUES<2>   = 0
*
CTRLIDS<3>  = "TXTCHECK"
PROPS<3>    = GPENABLED
VALUES<3>   = 0
*
CTRLIDS<4>  = "TXTAMOUNT"
PROPS<4>    = GPENABLED
VALUES<4>   = 0
*
CTRLIDS<-1>  = "GRID1"
PROPS<-1>    = GPENABLED
VALUES<-1>   = 0
*
CTRLIDS<-1>  = "BTNPROCESS"
PROPS<-1>    = GPENABLED
VALUES<-1>   = 0
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
END
