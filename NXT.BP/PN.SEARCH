SUBROUTINE PN.SEARCH(PN_SEED,PN_ID,GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: PN.SEARCH
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2007
* UPDATED: 
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
* PN_SEED = PART NUMBER TO SEARCH FOR
* PN_ID = RETURNED PART NUMBER SELECTED
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* ROUTINE IS CALLED TO SEARCH FOR PART NUMBER
* IF LOCK_REC THEN LOCK  RECORD GET_ID
* IF NOT LOCKSET THEN ERROR_STATUS = ERR_BUSY  
* READ REC ELSE
*   GET_REC = ''
*   IF NULL ERROR_STATUS THEN ERROR_STATUS = ERR_NOF
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
*
$INCLUDE GUIBP ATGUIEQUATES
*
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'PN.SEARCH','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'PN.SEARCH' ELSE
   CALL ATGUIERROR(3,'PN.SEARCH','',0,GRFATAL,"'PN.SEARCH' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('PN.SEARCH','PNS','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
************************************************************
* INITIALIZE VARIABLES
SRCHDESC = ''     ;* SEARCH TXT - DESC
SRCHDRAW = ''     ;* SEARCH TXT - DRAWING
SRCHPN   = ''     ;* SEARCH TXT - PART NUMBER
PN_ID    = ''     ;* INIT RETURNED ID TO NULL (NOT FOUND)
IF PN_SEED # '' THEN
   SRCHPN   = PN_SEED
   CALL ATGUISETPROP('PN.SEARCH','PNS',"CBPN",GPVALUE,0,0,PN_SEED,GUIERRORS,GUISTATE)
END           
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
* Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
* We could call ATGUISHUTDOWN here if we wanted, but there's no
* harm just leaving the GUI environment initialized, in case we
* want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
* Add your code here...
END ELSE
* Add your code here...
END
RETURN 
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
 BEGIN CASE
 CASE GUIAPP='PN.SEARCH'
 BEGIN CASE
  CASE GUIFRM='PNS'
  BEGIN CASE
   CASE GUICTL=''
   BEGIN CASE
    CASE GUIEVT=GECLOSE
    GOSUB GUI.PN.SEARCH.PNS.CLOSE;GUIEVT=0
    END CASE
   CASE GUICTL='BTNCANCEL'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PN.SEARCH.PNS.BTNCANCEL.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='BTNSEARCHDESC'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PN.SEARCH.PNS.BTNSEARCHDESC.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='BTNSEARCHDRAW'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PN.SEARCH.PNS.BTNSEARCHDRAW.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='BTNSEARCHPN'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PN.SEARCH.PNS.BTNSEARCHPN.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='CBDESC'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PN.SEARCH.PNS.CBDESC.CLICK;GUIEVT=0
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.PN.SEARCH.PNS.CBDESC.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='CBDRAW'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PN.SEARCH.PNS.CBDRAW.CLICK;GUIEVT=0
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.PN.SEARCH.PNS.CBDRAW.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='CBPN'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.PN.SEARCH.PNS.CBPN.CLICK;GUIEVT=0
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.PN.SEARCH.PNS.CBPN.VALIDATE;GUIEVT=0
    END CASE
   END CASE
  END CASE
 END CASE
 IF GUIEVT THEN
  * Unhandled event - may be dynamic
  GOSUB GUI.DYNAMIC.EVENTS
 END
END ELSE
 GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PN.SEARCH.PNS.CBDESC.CLICK: *
SRCH.CONTROL = "CBDESC"
CLICK.STRNG  = GUIARGS<1>
GOSUB GENERIC.LIST.CLICK
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PN.SEARCH.PNS.CBDESC.VALIDATE: *
SRCHDESC = GUIARGS<2>     ;* SEARCH TXT - DESC
SRCHDRAW = ''             ;* SEARCH TXT - DRAWING
SRCHPN   = ''             ;* SEARCH TXT - PART NUMBER
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PN.SEARCH.PNS.CBDRAW.CLICK: *
SRCH.CONTROL = "CBDRAW"
CLICK.STRNG  = GUIARGS<1>
GOSUB GENERIC.LIST.CLICK
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PN.SEARCH.PNS.CBDRAW.VALIDATE: *
SRCHDESC = ''             ;* SEARCH TXT - DESC
SRCHDRAW = GUIARGS<2>     ;* SEARCH TXT - DRAWING
SRCHPN   = ''             ;* SEARCH TXT - PART NUMBER
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PN.SEARCH.PNS.CBPN.CLICK: *
SRCH.CONTROL = "CBPN"
CLICK.STRNG  = GUIARGS<1>
GOSUB GENERIC.LIST.CLICK
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PN.SEARCH.PNS.CBPN.VALIDATE: *
SRCHDESC = ''             ;* SEARCH TXT - DESC
SRCHDRAW = ''             ;* SEARCH TXT - DRAWING
SRCHPN   = GUIARGS<2>     ;* SEARCH TXT - PART NUMBER

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.PN.SEARCH.PNS.CLOSE: *
*
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PN.SEARCH.PNS.BTNCANCEL.CLICK: *
GOSUB GUI.PN.SEARCH.PNS.CLOSE; GUIEVT=0
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PN.SEARCH.PNS.BTNSEARCHDESC.CLICK: *
IF SRCHDESC # '' THEN
   SRCH.CONTROL = "CBDESC"
   SRCH.STRNG  = SRCHDESC
   SRCH.FLD    = "PT_DESC"
   GOSUB GENERIC.SEARCH.HANDLER
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PN.SEARCH.PNS.BTNSEARCHDRAW.CLICK: *
IF SRCHDRAW # '' THEN
   SRCH.CONTROL = "CBDRAW"
   SRCH.STRNG  = SRCHDRAW
   SRCH.FLD    = "PT_DRAWING"
   GOSUB GENERIC.SEARCH.HANDLER
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PN.SEARCH.PNS.BTNSEARCHPN.CLICK: *
IF SRCHPN # '' THEN
   SRCH.CONTROL = "CBPN"
   SRCH.STRNG  = SRCHPN
   SRCH.FLD    = "@ID"
   GOSUB GENERIC.SEARCH.HANDLER
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
************************************************************
* $PAGE$
************************************************************
GENERIC.SEARCH.HANDLER: *
*
* USER PASSES: SRCH.CONTROL- CONTROL WE ARE SEARCHING
*            * SRCH.STRNG  - STRING TO SEARCH FOR
*            * SRCH.FLD    - DICTIONARY FIELD TO SEARCH
* ROUTINE RETURNS: 
*
IF SRCH.STRNG # "" THEN
   LAST.LIST = 1      ;* WANT FIRST PAGE OF IDS
   PN.LIST = ''
   PN.ID.LIST = ''
   EMSG = ''
   CALL GUI.SEARCH2("PARTS",SRCH.FLD,SRCH.STRNG,"@ID","PT_DESC",200,LAST.LIST,PN.LIST,PN.ID.LIST,PN.CNT,EMSG)         
*
   LAST.SEARCH = SRCH.STRNG
   IF EMSG<1> = 'No Items Found' THEN  ;* NO ITEMS FOUND THEN
      CALL ATGUIMSGBOX("No Items Match The Search","PN.SEARCH",0,0,"",DMMY,GUIERRORS,GUISTATE)  
   END ELSE
      CTRLIDS = ''
      PROPS   = ''
      VALUES  = ''
*
      CTRLIDS<1> = SRCH.CONTROL
      PROPS<1>   = GPITEMS
      VALUES<1>  = PN.LIST
*
      CTRLIDS<2> = SRCH.CONTROL
      PROPS<2>   = GPVALUE
      VALUES<2>  = "Select from list"
      
      CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      CALL ATGUIACTIVATE(GUIAPP,GUIFRM,SRCH.CONTROL,GUIERRORS,GUISTATE) 
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR     
   END
END
GSH.999: *
RETURN
************************************************************
* $PAGE$
************************************************************
GENERIC.LIST.CLICK: *
*
* USER PASSES: SRCH.CONTROL- CONTROL WE ARE SEARCHING
*            * CLICK.STRNG  - STRING RETURNED BY LIST CLICK
*            * SRCH.FLD    - DICTIONARY FIELD TO SEARCH
* ROUTINE RETURNS: GAGE.ID
BEGIN CASE
   CASE CLICK.STRNG = ''
      NULL
*
   CASE CLICK.STRNG = "$MORE$"      ;* USER NEED TO SEE MORE OF SEARCH LIST
*        LAST.LIST = NEXT SELECTED ITEM INDEX TO DISPLAY FROM PRIOR GUI_SEARCH CALL 
      PN.LIST = ''
      PN.ID.LIST = ''
      EMSG = ''
      CALL GUI.SEARCH2("PARTS",SRCH.FLD,LAST.SEARCH,"@ID","PT_DESC",200,LAST.LIST,PN.LIST,PN.ID.LIST,PN.CNT,EMSG)         
      
      IF EMSG<1> = 'No Items Found' THEN  ;* NO ITEMS FOUND 
         CALL ATGUIMSGBOX("No Items Match The Search","PN.SEARCH",0,0,"",DMMY,GUIERRORS,GUISTATE)  
      END ELSE
         CTRLIDS = ''
         PROPS   = ''
         VALUES  = ''
*
         CTRLIDS<1> = SRCH.CONTROL
         PROPS<1>   = GPITEMS
         VALUES<1>  = PN.LIST
*
         CTRLIDS<2> = SRCH.CONTROL
         PROPS<2>   = GPVALUE
         VALUES<2>  = "Select from list"
         
         CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR     
*            CALL ATGUIACTIVATE(GUIAPP,GUIFRM,SRCH.CONTROL,GUIERRORS,GUISTATE)        
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      END
   CASE 1
      PARTS_REC = ''
      PN.TO.TEST = CLICK.STRNG
      MSG_LIST = ''
      CALL GET.RECORD("PARTS",C.PARTS,PN.TO.TEST,PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)        
      IF PARTS_REC # '' THEN
* GOOD ID
         PN_ID = PN.TO.TEST
         GOSUB GUI.PN.SEARCH.PNS.CLOSE; GUIEVT=0
      END ELSE
* BAD REPORT
         CALL ATGUIMSGBOX("No Items Match The Search","PN.SEARCH",0,0,"",DMMY,GUIERRORS,GUISTATE)
      END
END CASE
*

GLC.999: *
RETURN

**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"PN.SEARCH", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE) 
RETURN
*-->END ERROR HANDLER<--*
END
