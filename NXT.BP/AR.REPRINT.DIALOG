SUBROUTINE AR.REPRINT.DIALOG(GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: CREDIT.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 05/15/2014
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* REPRINT AR (INVOICE OR CREDIT MENO)
*
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES CUSTOMERS.H
$INCLUDE NXT.INCLUDES SALES.H
$INCLUDE NXT.INCLUDES VALIDATION_FILE.H
$INCLUDE NXT.INCLUDES AR.H
*
*
$INCLUDE GUIBP ATGUIEQUATES
GUIERRORS = ''
PROG_ID   = "AR.REPRINT.DIALOG"
GUIERRORS = ''
GUIAPP = "AR.REPRINT"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "AR.REPRINT"  ;* crease dialog startup time.
*
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'AR.REPRINT.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'AR.REPRINT.DIALOG' ELSE
   CALL ATGUIERROR(3,'AR.REPRINT.DIALOG','',0,GRFATAL,"'AR.REPRINT.DIALOG' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
CALL CREDIT.TEMPLATE(CREDITFORM)  ;* GET CREDIT FORM TEMPLATE
CALL INVOICE.TEMPLATE(INVTEMPLATE)  ;* GET INVOICE TEMPLATE
*
GET_REC_MSG_LIST = ''   ;* DEFAULT MESSAGE LIST
*
* SYSTEM DEFAULTS RECORD
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"DEFAULTS",DEFAULTS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
*
* USER RECORD
*
USER_RECORD_ID = "USER*":@LOGNAME
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,USER_RECORD_ID,USER_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF USER_REC # '' THEN
   IF USER_REC<USER_PRICE_RESTRICTED> THEN
      USER.IS.RESTRICTED = @TRUE
      LOG.OPTS  = "DISPLAY"
      ERROR_NBR = ERR_SYS
      ERROR_MSG =  "Restricted user: ":@LOGNAME:" does not have access to Invoicing"
      CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      GOSUB GUI.AR.REPRINT.AR.REPRINT.CLOSE;GUIEVT=0
      RETURN
   END ELSE
      USER.IS.RESTRICTED = @FALSE
   END
   *
   * SETUP PRINTERS
   *
   *
   IF USER_REC<USER_INVOICE_PRINTER> = '' THEN
      INVOICE.PRINTER = 0  ;* SET TO DEFAULT PRINTER
      LOG.OPTS  = "DISPLAY"
      ERROR_NBR = ERR_SYS
      ERROR_MSG =  "Missing INVOICE_PRINTER from USER record in, SYSTEM_FILE"
      CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   END ELSE
      INVOICE.PRINTER = USER_REC<USER_INVOICE_PRINTER>
   END
   *
END ELSE
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "Unknown User: ":@LOGNAME
   CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GOSUB GUI.AR.REPRINT.AR.REPRINT.CLOSE;GUIEVT=0
   RETURN
END
*
* COMPANY RECORD
*
GET_REC_MSG_LIST = ''
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"COMPANY_RECORD",COMPANY_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF COMPANY_REC = '' THEN
   LOG.OPTS  = "DISPLAY"
   ERROR_NBR = ERR_SYS
   ERROR_MSG =  "Missing COMPANY_RECORD from SYSTEM_FILE"
   CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   GOSUB GUI.AR.REPRINT.AR.REPRINT.CLOSE;GUIEVT=0
   RETURN
END
*

GOSUB CLEAR.BUFFERS
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('AR.REPRINT','AR.REPRINT','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='AR.REPRINT'
         BEGIN CASE
            CASE GUIFRM='AR.REPRINT'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.AR.REPRINT.AR.REPRINT.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BNTPRINT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.AR.REPRINT.AR.REPRINT.BNTPRINT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCANCEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.AR.REPRINT.AR.REPRINT.BTNCANCEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTORDNBR'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.AR.REPRINT.AR.REPRINT.TXTORDNBR.VALIDATE;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.AR.REPRINT.AR.REPRINT.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AR.REPRINT.AR.REPRINT.BNTPRINT.CLICK: *
IF AR_REC # '' THEN
   *
   * SET PDF FLAG
   *

   CALL ATGUIGETPROP(GUIAPP,GUIFRM, "CHKPDF", GPVALUE, 0, 0,CREATE.PDF, GUIERRORS, GUISTATE)

   *
   * IS THIS A CREDIT OR INVOICE?
   *
   IF AR_REC<AR_AMOUNT> < 0 THEN
      *
      * CREDIT
      CREDITFM = CREDITFORM
      CALL CREDIT.FORM(AR_ID,AR_REC,CREDITFM)
      *
      CREDITFM1 = CREDITFM:ESC:'*p1000x3050Y':COMPANY_REC<COMP_NAME>:ESC:'*p0x0Y'
      IF  (CREATE.PDF) OR (INVOICE.PRINTER < 0) THEN
         PDF.NAME = 'CREDIT-':AR_ID:'.PDF'
         DISPLAY.ON.CREATION = @TRUE
         CALL PCL.TO.PDF(CREDITFM1,PDF.NAME,DISPLAY.ON.CREATION,GUIERRORS,GUISTATE)
      END ELSE
         IF NX.PRINT.ENABLE THEN PRINT ON INVOICE.PRINTER CREDITFM1
         IF NX.PRINT.ENABLE THEN PRINTER CLOSE ON INVOICE.PRINTER
      END
   END ELSE
      *
      * INVOICE
      INVFM = INVTEMPLATE
      CALL INVOICE.FORM(AR_ID,AR_REC,INVFM)

      INVFM1 = INVFM:ESC:'*p1000x3050Y':COMPANY_REC<COMP_NAME>:ESC:'*p0x0Y'

      IF  (CREATE.PDF) OR (INVOICE.PRINTER < 0) THEN
         PDF.NAME = 'INVOICE-':AR_ID:'.PDF'
         DISPLAY.ON.CREATION = @TRUE
         CALL PCL.TO.PDF(INVFM1,PDF.NAME,DISPLAY.ON.CREATION,GUIERRORS,GUISTATE)
      END ELSE
         IF NX.PRINT.ENABLE THEN PRINT ON INVOICE.PRINTER INVFM1
         IF NX.PRINT.ENABLE THEN PRINTER CLOSE ON INVOICE.PRINTER
      END
   END
END
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AR.REPRINT.AR.REPRINT.BTNCANCEL.CLICK: *
GOSUB CLEAR.BUFFERS
GOSUB LOAD.GRD.CTRLS
GOSUB LOAD.CM.CTRLS
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AR.REPRINT.AR.REPRINT.TXTORDNBR.VALIDATE: *
AR_ID = OCONV(GUIARGS<2>,'MCU')
IF AR_ID # '' THEN

   CALL GET.RECORD("AR",C.AR,AR_ID,AR_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
   BEGIN CASE
      CASE ERROR_STATUS = ERR_NOF  ;*  NON - EXISTENT AR #
         PRMPT = "AR Record: ":AR_ID:" not on file"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         GOSUB GUI.AR.REPRINT.AR.REPRINT.BTNCANCEL.CLICK
      CASE 1
         CM_ID = AR_REC<AR_CUST_ID>
         CALL GET.CUSTOMER(CM_ID,CM_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
         *
         IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH CUST
            LOG.OPTS = "DISPLAY"
            ERROR_NBR = ERR_SYS
            ERROR_MSG = 'AR Record: ':AR_ID:' Has non existent Cust Id: ':CM_ID
            CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         END ELSE
            GOSUB LOAD.GRDLINES
            GOSUB LOAD.GRD.CTRLS
            GOSUB LOAD.CM.CTRLS
         END
   END CASE
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,PROG.ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
************************************************************
* $PAGE$
************************************************************
LOAD.GRDLINES:
*
* GET THE SALES RECORDS BASED ON IDS SAVE ON AR_RECORD AND DISPLAY IN GRID
IDLIST = AR_REC<AR_SALES_ID>
LIST.CT = DCOUNT(IDLIST,@VM)
FOR SI = 1 TO LIST.CT
   SA_ID = IDLIST<1,SI>
   CALL GET.RECORD("SALES",C.SALES,SA_ID,SA_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
   IF ERROR_STATUS # '' THEN
      *
      * CANNOT GET SALES RECORD, STOP INVOICING
      *
      PRMPT = "Unable to access sales record ":SA_ID:" reason ":ERROR_STATUS
      CAPTION = PROG_ID
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
      *
      GOTO LOAD.GRDLINES.999
   END ELSE

      SALES.DETAIL.LIST<1,SI,1> = SA_REC<SA_PART_NBR>    ;* PART NUMBER ON SALES RECORD
      DEL.DATE = SA_REC<SA_DEL_DATE>
      IF DEL.DATE = '' THEN DEL.DATE = DATE()   ;* FOR EXTRA CHARGES, NO DEL DATE
      SALES.DETAIL.LIST<1,SI,2> = OCONV(DEL.DATE,SA_DEL_DATE.CNV) ;* DATE SHIPPED
      SALES.DETAIL.LIST<1,SI,3> = SA_REC<SA_DEL_QTY> ;*QTY SHIPPED
      *
      * SET THE PRICE
      *
      IF SA_REC<SA_LOT_FLAG> THEN ;* LOT CHARGE ??
         SALES.DETAIL.LIST<1,SI,4> = 'Y'
         SALES.DETAIL.LIST<1,SI,5> = OCONV(SA_REC<SA_PRICE_EA>,SA_PRICE_EA.CNV) ;*PRICE EACH
         SALES.DETAIL.LIST<1,SI,6> = SALES.DETAIL.LIST<1,SI,7>

      END ELSE
         SALES.DETAIL.LIST<1,SI,4> = 'N'
         SALES.DETAIL.LIST<1,SI,5> = OCONV(SA_REC<SA_PRICE_EA>,SA_PRICE_EA.CNV) ;*PRICE EACH
         SALES.DETAIL.LIST<1,SI,6> = OCONV((SA_REC<SA_DEL_QTY> * SA_REC<SA_PRICE_EA>),SA_PRICE_EA.CNV) ;*LINE TOTAL
      END
   END
   *
NEXT SI
LOAD.GRDLINES.999:
RETURN
************************************************************
* $PAGE$
************************************************************
CLEAR.BUFFERS: *
*
AR_ID = ''
AR_REC = ''
CM_ID = ''
CM_REC = ''
*
SALES.DETAIL.LIST = ''
*
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CM.CTRLS:
*
* routine LOADS controls for customer *
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<-1> = "TXTORDNBR"
PROPS<-1>   = GPVALUE
VALUES<-1>  = AR_ID
*
CTRLIDS<-1> = "LBLBILLCUST"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_ID
*
CTRLIDS<-1> = "LBL1BILLNAMEVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_NAME>
*
CTRLIDS<-1> = "LBL1BILLADDR1VAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_ADDR>
*
CTRLIDS<-1> = "LBL1BILLADDR2VAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_ADDR2>
*
CTRLIDS<-1> = "LBL1BILLCITYVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_CITY>
*
CTRLIDS<-1> = "LBL1BILLZIPVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_ZIP>
*
CTRLIDS<-1> = "LBL1BILLSTVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_STATE>
*
CTRLIDS<-1> = "LBL1BILLCOVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = CM_REC<CM_COUNTRY>
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
**
RETURN

************************************************************
* $PAGE$
************************************************************
LOAD.GRD.CTRLS: *
*
CTRLIDS = ""
PROPS   = ""
VALUES  = ""
*
CTRLIDS<-1> = "GRDLINES"
PROPS<-1>   = GPVALUE
VALUES<-1>  = SALES.DETAIL.LIST
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR

RETURN
END
