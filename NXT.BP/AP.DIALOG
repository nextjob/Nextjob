SUBROUTINE AP.DIALOG(GUIERRORS,GUISTATE)
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: AP.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2014
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
*
*
* FILES:
*
*
* DESIGN DESCRIPTION:
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES VENDORS.H
$INCLUDE NXT.INCLUDES AP_INVOICE.H
$INCLUDE NXT.INCLUDES AP_CHECKS.H
$INCLUDE NXT.INCLUDES VALIDATION_FILE.H
*
*-->BEGIN GUI HEADER<--*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "AP.DIALOG"
GUIERRORS = ''
GUIAPP = "AP"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "AP"
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
  CALL ATGUIERROR(3,'AP.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
  RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'AP.DIALOG' ELSE
  CALL ATGUIERROR(3,'AP.DIALOG','',0,GRFATAL,"'AP.DIALOG' is not on file.",GUIERRORS)
  RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
  CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('AP','AP','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
MSG_LIST = ''  ;* ERROR MESSAGE IS FOR GET.RECORD ROUTINES
*
*
* COMPANY RECORD
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"COMPANY_RECORD",COMPANY_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF COMPANY_REC = '' THEN
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "Missing COMPANY_RECORD from SYSTEM_FILE"
  CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  GOSUB GUI.AP.AP.CLOSE;GUIEVT=0
  RETURN
END
*
* GL TRANSACTION CODESS
*
CALL GET.RECORD("VALIDATION_FILE",C.VALIDATION_FILE,"GL.TRANS.CODES",GLC_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF GLC_REC = '' THEN
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "Missing GL.TRANS.CODES from VALIDATION_FILE"
  CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  GOSUB GUI.AP.AP.CLOSE;GUIEVT=0
END
*
* BANK CODES
*
CALL GET.RECORD("VALIDATION_FILE",C.VALIDATION_FILE,"BANKS",BANKS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF BANKS_REC = '' THEN
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "Missing BANKS from VALIDATION_FILE"
  CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  GOSUB GUI.AP.AP.CLOSE;GUIEVT=0
END
*
* SYSTEM DEFAULTS RECORD
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"DEFAULTS",DEFAULTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
*
* USER RECORD
*
USER_RECORD_ID = "USER*":@LOGNAME
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,USER_RECORD_ID,USER_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF USER_REC # '' THEN
  IF USER_REC<USER_PRICE_RESTRICTED> THEN
    USER.IS.RESTRICTED = @TRUE
  END ELSE
    USER.IS.RESTRICTED = @FALSE
  END
  *
  IF USER_REC<USER_PACKSLIP_PRINTER> = '' THEN
    PACKSLIP.PRINTER = 0  ;* SET TO DEFAULT PRINTER
    LOG.OPTS  = "DISPLAY"
    ERROR_NBR = ERR_SYS
    ERROR_MSG =  "Missing PACKSLIP_PRINTER from USER record in, SYSTEM_FILE"
    CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  END ELSE
    PACKSLIP.PRINTER = USER_REC<USER_PACKSLIP_PRINTER>
  END
  *
  IF USER_REC<USER_INVOICE_PRINTER> = '' THEN
    INVOICE.PRINTER = 0  ;* SET TO DEFAULT PRINTER
    LOG.OPTS  = "DISPLAY"
    ERROR_NBR = ERR_SYS
    ERROR_MSG =  "Missing INVOICE_PRINTER from USER record in, SYSTEM_FILE"
    CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  END ELSE
    INVOICE.PRINTER = USER_REC<USER_INVOICE_PRINTER>
  END
  *
  IF USER_REC<USER_PROCESS_PRINTER> = '' THEN
    PROCESS.PRINTER = 0  ;* SET TO DEFAULT PRINTER
    LOG.OPTS  = "DISPLAY"
    ERROR_NBR = ERR_SYS
    ERROR_MSG =  "Missing PROCESS_PRINTER from USER record in, SYSTEM_FILE"
    CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  END ELSE
    PROCESS.PRINTER = USER_REC<USER_PROCESS_PRINTER>
  END
  *
  IF USER_REC<USER_LABEL_PRINTER> = '' THEN
    LABEL.PRINTER = 0  ;* SET TO DEFAULT PRINTER
    LOG.OPTS  = "DISPLAY"
    ERROR_NBR = ERR_SYS
    ERROR_MSG =  "Missing LABEL_PRINTER from USER record in, SYSTEM_FILE"
    CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  END ELSE
    LABEL.PRINTER = USER_REC<USER_LABEL_PRINTER>
  END
  GOSUB LOAD.VN.NAME.LIST         ;* ADD VENDOR NAMES TO LST1VENNAME
  GOSUB CLEAR.BUFFERS
END ELSE
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "Unknow User: ":@LOGNAME
  CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  GOSUB GUI.AP.AP.CLOSE;GUIEVT=0
  RETURN
END
*
*
* CREATE LISTS FOR  DROP DOWN CONTROLS
*
BANK.LIST  = ''  ;* LIST FOR PAYMENT TERMS SELECTION
BANK.IDX   = ''
*
CALL LIST.LOAD(C.VALIDATION_FILE,"BANKS","2",'',BANK.LIST,BANK.IDX,LIST.COUNT,EMSG)
CTRLIDS = "LSTBANK"
PROPS   = GPITEMS
VALUES  = BANK.LIST
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
*
GOSUB CLEAR.BUFFERS
GOSUB LOAD.CONTROLS
*

*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
  CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN RETURN
  IF GUIEVT EQ GEQUIT THEN
    GUI.DLG.EXIT = 1
  END ELSE
    GUIAPP=OCONV(GUIAPP,'MCU')
    GUIFRM=OCONV(GUIFRM,'MCU')
    GUICTL=OCONV(GUICTL,'MCU')
    GOSUB GUI.DECODE.EVENT
  END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
  GUI.APP.LIST = ''
  CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
  IF GUI.APP.LIST EQ '' THEN
    * Quit event fired after last GUI object is deleted - discard it
    CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
    * We could call ATGUISHUTDOWN here if we wanted, but there's no
    * harm just leaving the GUI environment initialized, in case we
    * want to use it again...
  END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
  * Add your code here...
END ELSE
  * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
  BEGIN CASE
    CASE GUIAPP='AP'
      BEGIN CASE
        CASE GUIFRM='AP'
          BEGIN CASE
            CASE GUICTL=''
              BEGIN CASE
                CASE GUIEVT=GECLOSE
                  GOSUB GUI.AP.AP.CLOSE;GUIEVT=0
              END CASE
            CASE GUICTL='BTNCANCEL'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.AP.AP.BTNCANCEL.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNPRINT'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.AP.AP.BTNPRINT.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNPROCESS'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.AP.AP.BTNPROCESS.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNSELALL'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.AP.AP.BTNSELALL.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNSELDUE'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.AP.AP.BTNSELDUE.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='GRID1'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.AP.AP.GRID1.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='LST1VENNAME'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.AP.AP.LST1VENNAME.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='LSTBANK'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.AP.AP.LSTBANK.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='TXTAMOUNT'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.AP.AP.TXTAMOUNT.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTCHECK'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.AP.AP.TXTCHECK.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTDATE'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.AP.AP.TXTDATE.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTDUE'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.AP.AP.TXTDUE.VALIDATE;GUIEVT=0
              END CASE
          END CASE
      END CASE
  END CASE
  IF GUIEVT THEN
    * Unhandled event - may be dynamic
    GOSUB GUI.DYNAMIC.EVENTS
  END
END ELSE
  GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AP.AP.BTNPRINT.CLICK: *
EMSG = ''
BEGIN CASE
    *
  CASE VN_ID = ''
    EMSG = 'No Vendor Selected, Please Correct'
  CASE BANK_CODE  = ''
    EMSG = 'No Bank Selected, Please Correct'
  CASE CHECK_DATE = ''
    EMSG  = "No Check Date,  Please Correct"
  CASE CHECK_AMT = 0
    EMSG  = "No Invoices Selected,  Please Correct"
  CASE (MANUAL_CHK_AMT GT CHECK_AMT)
    EMSG  = "Check Amount Cannot Exceed Invoice Selected Amount, Please Correct"
    *
END CASE
IF EMSG # '' THEN
  *
  PRMPT = EMSG
  CAPTION = "Account Payable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

END ELSE
  PRMPT = "Place Check Stock in Priner and Click OK to Print Check or Cancel"
  CAPTION = "Account Payable"
  STYLE   = 0  ;* !
  BUTTONS = 1  ;* ok / cancel
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  IF RESPONSE = 1 THEN
    PAYOR.NAME = VN_REC<VN_NAME>
    CALL PRINT.AP.CHECK(AP.GRID.LIST,CHECK_AMT,CHECK_DATE,VN_ID,VN_REC,PAYOR.NAME,INVOICE.PRINTER)
  END
END


RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.AP.AP.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
  GOSUB GUI.DIALOG.RETURN
  CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
  GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AP.AP.BTNCANCEL.CLICK: *
GOSUB CLEAR.BUFFERS
GOSUB LOAD.CONTROLS
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AP.AP.BTNPROCESS.CLICK: *
*
* VALIDATE CHECK DATA AND WRITE IF ALL OK
*
CHECK_ID = BANK_CODE:'*':CHECK_NBR
CALL GET.RECORD("AP_CHECKS",C.AP_CHECKS,CHECK_ID,TEST_CHECK_REC,@TRUE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF TEST_CHECK_REC = ''  THEN
  *
  *
  * ASSEMBLE CHECK RECORD AND WRITE IT OUT
  * THEN PARSE THROUGH INVOICES PAID AND UPDATE STATUS
  *
  GOSUB VALIDATED.CHK
  IF VALID.CHK THEN
    GOSUB PROCESS.CHK
    *
    PRMPT = "Check ":CHECK_NBR:" Processed"
    CAPTION = "Account Payable"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
    *
    GOSUB CLEAR.BUFFERS
    GOSUB LOAD.CONTROLS
  END
  *

END ELSE
  PRMPT = "Check ":GUIARGS<2>:" Already on File for Bank, Re-enter"
  CAPTION = "Account Payable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RELEASE C.FILE.VAR(C.AP_CHECKS), CHECK_ID
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AP.AP.BTNSELALL.CLICK: *
GOSUB CLEAR.AP.DATA
*
* ACCESS THE INVOIVE (AP_INVOICE RECORD)
*
SLIST = 'SSELECT AP_INVOICE WITH VENDOR = "':VN_ID:'" AND WITH AP_BAL_DUE > "0" AND WITH AP_HOLD # 1 TO 2'
EXECUTE SLIST CAPTURING DMMY.OUT
*
IF @SELECTED GE 1 THEN
  READLIST APLIST FROM 2 THEN
    AP.LIST.CT = DCOUNT(APLIST,@AM)
  END
  GOSUB POP.AP.LIST
END ELSE
  AP.LIST.CT = 0
  PRMPT = "No Invoices Found"
  CAPTION = "Account Payable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AP.AP.BTNSELDUE.CLICK: *
IF SEL_DATE # '' THEN
  GOSUB CLEAR.AP.DATA
  *
  * ACCESS THE INVOIVE (AP_INVOICE RECORD)
  *
  SLIST = 'SSELECT AP_INVOICE WITH VENDOR = "':VN_ID:'" AND WITH AP_HOLD # 1 AND WITH AP_BAL_DUE > "0" AND WITH AP_DUE_DATE LE "':OCONV(SEL_DATE,AP_DUE_DATE.CNV):'" TO 2'
  EXECUTE SLIST CAPTURING DMMY.OUT
  *
  IF @SELECTED GE 1 THEN
    READLIST APLIST FROM 2 THEN
      AP.LIST.CT = DCOUNT(APLIST,@AM)
    END
    GOSUB POP.AP.LIST
  END ELSE
    AP.LIST.CT = 0
    PRMPT = "No Invoices Found"
    CAPTION = "Account Payable"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  END

END ELSE
  PRMPT = "No Due By Date Entered"
  CAPTION = "Account Payable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AP.AP.GRID1.CLICK: *
GRD.COL = GUIARGS<1,1>
GRD.ROW = GUIARGS<1,2>

IF GRD.ROW LE AP.LIST.CT  THEN      ;* ONLY ROWS POPULATED WITH INVOICE DATA
  BEGIN CASE
    CASE GRD.COL = 1    ;* CHECK BOX
      *

      IF AP.GRID.LIST<1,GRD.ROW,1> THEN ;* ALREADY CHECKED, RESET
        AP.GRID.LIST<1,GRD.ROW,1> = 0
      END ELSE
        AP.GRID.LIST<1,GRD.ROW,1> = 1 ;* NOT CHECKED, SET
      END

  END CASE
  GOSUB CALC.AP.TOTAL     ;* RECALC CHECK AMOUNT
END
*
CTRLIDS = "GRID1"
PROPS   = GPVALUE
VALUES  = AP.GRID.LIST
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AP.AP.LST1VENNAME.CLICK: *
*
IF GUIARGS<1> GT 0 THEN       ;* CLICKED EMPTY LIST TEST
  *
  VN_ID  = VENDORS.LIST<1,GUIARGS<1>,1>
  IF  VN_ID # '' THEN
    BEGIN CASE
      CASE  VN_ID = "$MORE$"      ;* USER NEEDS TO SEE MORE OF SEARCH LIST
        *        VENDORS.START.LIST = NEXT SELECTED ITEM INDEX TO DISPLAY FROM PRIOR GUI_SEARCH2 CALL
        VENDORS.LIST = ''
        VENDOR.IDS = ''
        EMSG = ''
        CALL GUI.SEARCH2 ("VENDORS","","*","VN_NAME","VN_NAME VN_ADDR VN_CITY",VENDORS.MAX.LIST,VENDOR.START.LIST,VENDORS.LIST,VENDOR.IDS,LIST.CT,EMSG)
        *
        CTRLIDS = ''
        PROPS   = ''
        VALUES  = ''
        *
        CTRLIDS<1> = "LST1VENNAME"
        PROPS<1>   = GPITEMS
        VALUES<1>  = VENDORS.LIST
        *
        CTRLIDS<2> =  "LST1VENNAME"
        PROPS<2>   = GPVALUE
        VALUES<2>  = ""
        CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
        IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
        *
      CASE VN_ID = "$TOP$"      ;* USER NEEDS TO SEE TOP OF LIST
        *         VENDORS.START.LIST = NEXT SELECTED ITEM INDEX TO DISPLAY FROM PRIOR GUI_SEARCH2 CALL
        VENDORS.LIST = ''
        VENDOR.IDS = ''
        EMSG = ''
        CALL GUI.SEARCH2 ("VENDORS","","*","VN_NAME","VN_NAME VN_ADDR VN_CITY",VENDORS.MAX.LIST,VENDOR.START.LIST,VENDORS.LIST,VENDOR.IDS,LIST.CT,EMSG)
        *
        CTRLIDS = ''
        PROPS   = ''
        VALUES  = ''
        *
        CTRLIDS<1> = "LST1VENNAME"
        PROPS<1>   = GPITEMS
        VALUES<1>  = VENDORS.LIST
        *
        CTRLIDS<2> = "LST1VENNAME"
        PROPS<2>   = GPVALUE
        VALUES<2>  = ""
        CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
        IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
        *
      CASE 1                     ;* SHOULD BE A VENDOR ID, GET VENDOR REC
        *
        CALL GET.VENDOR(VN_ID,VN_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
        *
        IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH CUST
          LOG.OPTS = "DISPLAY"
          ERROR_NBR = ERR_SYS
          ERROR_MSG = 'Selection of non-existent vendor from list'
          CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
        END ELSE
          GOSUB CLEAR.AP.DATA
          GOSUB LOAD.CONTROLS

        END
    END CASE
  END
END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AP.AP.LSTBANK.CLICK: *
BANK_TEST = BANK.LIST<1,GUIARGS<1>,1>
* BANKS_REC
* VANDALIDATE BANK SELECTED
*  - DOES THE CODE HAVE A VALID GL TRAN CODE FOR AP?
*
GLC.VALUE = BANKS_REC<CODE_VAL2,GUIARGS<1>>    ;* WE ARE ASSUMING THE BANK REC AND THE BANK LIST ARE LAID OUT THE SAME
LOCATE GLC.VALUE IN GLC_REC<1,1> BY "AL" SETTING IDX THEN
  GLC.FOUND = @TRUE
  BANK_CODE  =  BANK_TEST
  BANK.GLT.CD = GLC.VALUE
END ELSE
  BANK_CODE  =  ''
  BANK.GLT.CD = ''
  PRMPT = "Bank Code: ":BANK_TEST:' Has an Invalid AP Gl Trans Code: ':GLC.VALUE:', Please Correct'
  CAPTION = "Account Payable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  CALL ATGUISETPROP(GUIAPP,GUIFRM,"LSTBANK",GPVALUE,0,0,0,GUIERRORS,GUISTATE)
END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AP.AP.TXTAMOUNT.VALIDATE: *
* CHECK_AMT  =  CALCULATED AMOUNT TO PAY, IF USER OVERWRITES ALLOW?
NEW_AMT = ICONV(GUIARGS<2>,AC_AMOUNT.CNV)
MANUAL_CHK_AMT = 0
*
* REM WE ALLOW NEG AMOUNTS, TREAT AS CREDIT FROM VENDOR
*
IF NEW_AMT # CHECK_AMT THEN
  IF NEW_AMT GT CHECK_AMT THEN
    PRMPT = "Check Amount: ":OCONV(NEW_AMT,AC_AMOUNT.CNV):' Cannot Exceed Invoice Selected Amount, Please Correct'
    CAPTION = "Account Payable"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
    MANUAL_CHK_AMT = 0
  END ELSE
    *
    * LOOKS LIKE WE ARE TAKING A DISCOUNT, CONFIRM
    *
    PRMPT = "Check Amount: ":OCONV(NEW_AMT,AC_AMOUNT.CNV):' Not Equal to Cacluated Amount: ':OCONV(CHECK_AMT,AC_AMOUNT.CNV):' Take Discount?'
    CAPTION = "Account Payable"
    STYLE   = 3  ;* ?
    BUTTONS = 4  ;* YES(6)/NO
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
    IF RESPONSE = 6 THEN   ;* YES, TAKE DISCOUNT
      MANUAL_CHK_AMT = NEW_AMT
    END ELSE
      MANUAL_CHK_AMT = 0
    END
  END
END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AP.AP.TXTCHECK.VALIDATE: *
*
* VALIDATE CHECK NUMBER, CANNOT ALREADY BE ON FILE!
*
CHECK_NBR  = ''

IF BANK_CODE # '' THEN
  TEST_CHECK_ID = BANK_CODE:'*':GUIARGS<2>
  CALL GET.RECORD("AP_CHECKS",C.AP_CHECKS,TEST_CHECK_ID,TEST_CHECK_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
  IF TEST_CHECK_REC = ''  THEN
    CHECK_NBR  = GUIARGS<2>
  END ELSE
    PRMPT = "Check ":GUIARGS<2>:" Already on File for Bank, Re-enter"
    CAPTION = "Account Payable"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  END
END ELSE
  PRMPT = "Select Bank Code prior to Check Number Entry"
  CAPTION = "Account Payable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END

CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTCHECK",GPVALUE,0,0,CHECK_NBR,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AP.AP.TXTDATE.VALIDATE: *
CHECK_DATE = ICONV(GUIARGS<2>,"D")
EMSG = ''
BEGIN CASE
  CASE  CHECK_DATE > DATE()
    EMSG = "Cannot Future Date Check"
  CASE CHECK_DATE LE COMPANY_REC<COMP_APCUTOFF>
    EMSG = 'Check Dated Prior to AP Cutoff (':OCONV(COMPANY_REC<COMP_APCUTOFF>,COMP_CUTOFF.CNV):'), Not Allowed!'
END CASE
*
IF EMSG # '' THEN
  CHECK_DATE = ''
  PRMPT = EMSG
  CAPTION = "Account Payable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTDATE",GPVALUE,0,0,OCONV(CHECK_DATE,AC_DATE.CNV),GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.AP.AP.TXTDUE.VALIDATE: *
SEL_DATE = ICONV(GUIARGS<2>,"D")
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTDUE",GPVALUE,0,0,OCONV(SEL_DATE,AP_DUE_DATE.CNV),GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"AP.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
************************************************************
* $PAGE$
************************************************************
CLEAR.BUFFERS:
VN_ID       = '' ;* VENDOR ID
VN_REC      = '' ;* VENDOR RECORD BUFFER
SEL_DATE    = '' ;* SELECT DUE BY DATE
GOSUB CLEAR.AP.DATA
*
BANK_CODE  =  '' ;* SELECTED BANK CODE
BANK.GLT.CD = '' ;* GL TRANS CODE FOR AP ENTRY
CHECK_DATE = ''
CHECK_NBR  = ''
CHECK_AMT  = 0   ;* TOTAL AMT TO PAY
MANUAL_CHK_AMT = 0 ;* AMOUNT ENTERED TO OVERRIDE CALCULATED CHECK AMOUNT
*
RETURN
************************************************************
* $PAGE$
************************************************************
CLEAR.AP.DATA: *
AP_REC      = '' ;* AP_CHECKS RECORD
AP_ID       = '' ;* AND ID
AP.LIST.CT = 0   ;* NUMBER OF AP_INVOICE KEYS IN APLIST
APLIST     = ''  ;* LIST OF AP_INVOICE KEYS CREATED WHEN SELECT BUTTONS ARE FIRED
AP.GRID.LIST = '' ;* DYN ARRAY TO POPULATE GRID1 AND HOLD INVOCIE DATA
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.VN.NAME.LIST: *
*
* LOADS THE LST1VENNAME LIST
*
VENDORS.MAX.LIST = 300
VENDORS.START.LIST = 1
CALL GUI.SEARCH2 ("VENDORS","","*","VN_NAME","VN_NAME VN_ADDR VN_CITY",VENDORS.MAX.LIST,VENDORS.START.LIST,VENDORS.LIST,VENDOR.IDS,LIST.CT,EMSG)
*
IF EMSG<1> = 'No Items Found' THEN  ;* NO ITEMS FOUND
  VALUE = ''
END ELSE
  VALUE = VENDORS.LIST
END
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"LST1VENNAME",GPITEMS,0,0,VALUE,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
POP.AP.LIST: *
*
* create list to populate grid
*
AP.GRID.LIST = ''

FOR AI = 1 TO AP.LIST.CT
  AP_ID = APLIST<AI,1>
  INVOICE_DATE = ''
  INVOICE_ID = ''
  CALL GET.RECORD("AP_INVOICE",C.AP_INVOICE,AP_ID,AP_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
  IF AP_REC = '' THEN
    LOG.OPTS = "DISPLAY"
    ERROR_NBR = ERR_SYS
    ERROR_MSG = 'AP_INVOICE record found with select but cannot be read: ':AP_ID
    CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
    AP.GRID.LIST<1,AI,1> = 0  ;* SELECTED CHECK BOX, ALWAYS START WITH NO INVOICES SELECTED
    AP.GRID.LIST<1,AI,2> = FIELD(AP_ID,"*",2):'*NOF*!'  ;* INVOICE NUMBER
    AP.GRID.LIST<1,AI,3> = 'Missing'
    AP.GRID.LIST<1,AI,4> = 0
    AP.GRID.LIST<1,AI,5> = 0
    AP.GRID.LIST<1,AI,6> = 0
  END ELSE

    AP.GRID.LIST<1,AI,1> = 0  ;* SELECTED CHECK BOX, ALWAYS START WITH NO INVOICES SELECTED
    AP.GRID.LIST<1,AI,2> = FIELD(AP_ID,"*",2)  ;* INVOICE NUMBER
    AP.GRID.LIST<1,AI,3> = OCONV(AP_REC<AP_DUE_DATE>,AP_DUE_DATE.CNV)
    AP.GRID.LIST<1,AI,4> = OCONV(AP_REC<AP_INV_AMT>,AP_INV_AMT.CNV)
    AP.GRID.LIST<1,AI,5> = OCONV(AP_REC<AP_BAL_DUE>,AP_BAL_DUE.CNV)
    AP.GRID.LIST<1,AI,6> = OCONV(AP_REC<AP_BAL_DUE>,AP_BAL_DUE.CNV)

  END
NEXT AI

CTRLIDS = "GRID1"
PROPS   = GPVALUE
VALUES  = AP.GRID.LIST
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
CALC.AP.TOTAL:
CHECK_AMT  = 0
FOR AI = 1 TO AP.LIST.CT
  IF AP.GRID.LIST<1,AI,1> THEN  ;* INVOICE SELECTED FOR PAYMENT ??
    CHECK_AMT  += ICONV(AP.GRID.LIST<1,AI,6>,AP_BAL_DUE.CNV)
  END
NEXT AI
*
CTRLIDS = "LBLCHKAMTV"
PROPS  = GPVALUE
VALUES  = OCONV(CHECK_AMT,AP_BAL_DUE.CNV)
*
CTRLIDS<-1> = "TXTAMOUNT"
PROPS<-1>  = GPVALUE
VALUES<-1>  = OCONV(CHECK_AMT,AP_BAL_DUE.CNV)
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CONTROLS:
*
* routine LOADS controls
*
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
IX = 1
CTRLIDS<IX> = "LBLVENDNAME"
PROPS<IX>   = GPVALUE
VALUES<IX>  = VN_REC<VN_NAME>
*
IX = 2
LOCATE VN_ID IN VENDOR.IDS<1,1> SETTING IDX THEN
  CTRLIDS<IX> = "LST1VENNAME"
  PROPS<IX>   = GPVALUE
  VALUES<IX>  = IDX
END ELSE
  CTRLIDS<IX> = "LST1VENNAME"
  PROPS<IX>   = GPVALUE
  VALUES<IX>  = 0
END
*
IX = 3
CTRLIDS<IX> = "LSTBANK"
PROPS<IX>   = GPVALUE
VALUES<IX>  = 0
*
IX = 4
CTRLIDS<IX> = "TXTDATE"
PROPS<IX>   = GPVALUE
VALUES<IX>  = CHECK_DATE
*
IX = 5
CTRLIDS<IX> = "GRID1"
PROPS<IX>   = GPVALUE
VALUES<IX>  = AP.GRID.LIST
**
IX = 6
CTRLIDS<IX> = "TXTCHECK"
PROPS<IX>   = GPVALUE
VALUES<IX>  = CHECK_NBR
**
IX = 7
CTRLIDS<IX> = "LBLCHKAMTV"
PROPS<IX>  =  GPVALUE
VALUES<IX>  = OCONV(CHECK_AMT,AP_BAL_DUE.CNV)
**
IX = 8
CTRLIDS<IX> = "TXTAMOUNT"
PROPS<IX>  =  GPVALUE
VALUES<IX>  = OCONV(CHECK_AMT,AP_BAL_DUE.CNV)
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
VALIDATED.CHK: *
* SET  VALID.CHK
VALID.CHK = @FALSE
EMSG = ''
BEGIN CASE
    *
  CASE VN_ID = ''
    EMSG = 'No Vendor Selected, Please Correct'
  CASE BANK_CODE  = ''
    EMSG = 'No Bank Selected, Please Correct'
  CASE CHECK_NBR = ''
    EMSG = 'No Check Number Entered, Please Correct'
  CASE CHECK_DATE = ''
    EMSG  = "No Check Date,  Please Correct"
  CASE CHECK_AMT = 0
    EMSG  = "No Invoices Selected,  Please Correct"
  CASE (MANUAL_CHK_AMT GT CHECK_AMT)
    EMSG  = "Check Amount Cannot Exceed Invoice Selected Amount, Please Correct"
    *
END CASE
IF EMSG # '' THEN
  *
  PRMPT = EMSG
  CAPTION = "Account Payable"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

END ELSE
  VALID.CHK = @TRUE
END
RETURN
************************************************************
* $PAGE$
************************************************************
PROCESS.CHK: *
* MANUAL_CHK_AMT = 0  ??
* ASSEMBLE CHECK RECORD AND WRITE IT OUT
* THEN PARSE THROUGH INVOICES PAID AND UPDATE STATUS
*
CHK_REC = ''
PAID.INV.LIST = ''

CHK_REC<AC_DATE> = ICONV(CHECK_DATE,AC_DATE.CNV)  ;* CHECK DATE
IF MANUAL_CHK_AMT = 0 THEN
  CHK_REC<AC_AMOUNT> = CHECK_AMT
  CHK_REC<AC_DISC> = 0
END ELSE
  CHK_REC<AC_AMOUNT> = MANUAL_CHK_AMT
  CHK_REC<AC_DISC> = CHECK_AMT - MANUAL_CHK_AMT
END
CHK_REC<AC_DATE>   = CHECK_DATE
CHK_REC<AC_VENDOR> = VN_ID
CHK_REC<AC_STATUS> = 'OPEN'
CHK_REC<AC_STATUS_DT> = DATE()
CHK_REC<AC_CREATE_DT> = DATE()
CHK_REC<AC_CREATE_USER> = @LOGNAME
*
* ADD IN INVOICE KEYS
FOR AI = 1 TO AP.LIST.CT
  IF AP.GRID.LIST<1,AI,1> THEN  ;* INVOICE SELECTED FOR PAYMENT ??
    PAID.INV.LIST<1,-1> = VN_ID:'*':AP.GRID.LIST<1,AI,2>
  END
NEXT AI
CHK_REC<AC_INVOICES> = PAID.INV.LIST

*
AP_CHECK_ID = BANK_CODE:'*':CHECK_NBR
CALL WRITE.RECORD(AP_CHECK_ID,CHK_REC,C.AP_CHECKS,@FALSE,ERROR_STATUS)
*
* NOW UPDATE THE PAID INVOICES AS PAID
*
INV.COUNT = DCOUNT(PAID.INV.LIST<1>,@VM)
FOR I = 1 TO INV.COUNT
  AP_ID = PAID.INV.LIST<1,I>

  CALL NXT.LOCKWAITING("AP_INVOICE",C.AP_INVOICE,AP_ID,GUIERRORS,GUISTATE)
  CALL GET.RECORD("AP_INVOICE",C.AP_INVOICE,AP_ID,AP_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
  IF AP_REC = ''  THEN

    PRMPT = "Invoice ":AP_ID:" Referenced on this AP Check but not found, See SYS ADMIN"
    CAPTION = "Ap Entry"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  END ELSE
    *
    * UPDATE AP INVOICE BAL DUE
    *
    AP_REC<AP_BAL_DUE> = 0    ;* NEED TO LOOK AT THE LOGIC FOR PARTIAL PAYMENT, BUT FOR NOW WE PAY IN FULL
    AP_REC<AP_CHECK_KEY> = AP_CHECK_ID
    CALL WRITE.RECORD(AP_ID,AP_REC,C.AP_INVOICE,@FALSE,ERROR_STATUS)
  END
NEXT I
*
* FINALLY WRITE THE GLT RECORD
*
DB_AMT = CHK_REC<AC_AMOUNT>
CR_AMT = CHK_REC<AC_AMOUNT>
CALL WRITE.GLT(BANK.GLT.CD,DB_AMT,CR_AMT,CHECK_DATE,"AP-CHK",AP_CHECK_ID,GUIERRORS,GUISTATE)
RETURN
END
