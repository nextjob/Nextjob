SUBROUTINE RTCOPY.DIALOG(FROM_PN_ID,TO_PN_ID,TO_ENG_ID,COPY_STATUS,GUIERRORS,GUISTATE)
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: RTCOPY.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 04/17/2013
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
* FROM_PN_ID  - ON ENTRY PART NUMBER TO COPY ROUTING FROM OR NULL FOR NO DEFAULT
* TO_PN_ID - ON ENTRY PART NUMBER TO COPY ROUTING TO
* TO_PN_ID - ENG_ID OF ROUTING CREATED
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* ROUTINE IS CALLED TO COPY EXISTING ROUTING TO NEW ROUTING
* NORMAL USAGE WOULD BE FOR USER TO CALL TO CREATE COPY OF PART ROUTING TO A NEW REV OF SAME PART
* IE) COPY REV 1 TO CREATE REV 2
* CODE ALWAYS COPYS TO NEXT AVAILABLE ROUTING (TO_PARTS_REC<PT_ENG_ID> + 1)
* * * * n o t e !!! caller must update PT_ENG_ID field of TO_PARTS_REC if call successful!!!!!!!!
* IF FROM_PN_ID IS NULL USE PN.SEARCH TO FIND PART TO COPY FROM
*
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES RTREV.H
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES WRT.H
*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "RTCOPY.DIALOG"
GUIAPP = "RTCOPY"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "RTCOPY"
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
  CALL ATGUIERROR(3,'RTCOPY.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
  RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'RTCOPY.DIALOG' ELSE
  CALL ATGUIERROR(3,'RTCOPY.DIALOG','',0,GRFATAL,"'RTCOPY.DIALOG' is not on file.",GUIERRORS)
  RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
  CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
MSG_LIST = ''    ;* GET.RECORD CANNED MESSAGE
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('RTCOPY','RTCOPY','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN

ENG_ID = ''  ;* INIT FROM ENG ID
COPY_STATUS = RT_CANCEL ;* INIT TO CANCEL STUTUS

CALL GET.RECORD("PARTS",C.PARTS,TO_PN_ID,TO_PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF TO_PARTS_REC # '' THEN
  *
  TO_ENG_ID = TO_PARTS_REC<PT_ENG_ID> + 1
  *
  CTRLIDS = "LBLPNV"
  PROPS   = GPVALUE
  VALUES  = TO_PN_ID
  *
  CTRLIDS<2> = "LBLENGV"
  PROPS<2>   = GPVALUE
  VALUES<2>  = TO_ENG_ID
  *
  CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END ELSE
  * BAD REPORT
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "Invalid To Part Id Passed"
  CALL LOG.ERROR(LOG.OPTS,"RTCOPY.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
END

IF FROM_PN_ID # '' THEN

  CALL GET.RECORD("PARTS",C.PARTS,FROM_PN_ID,FROM_PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
  IF FROM_PARTS_REC # '' THEN
    GOSUB DSP.FROM.PN

  END ELSE
    * BAD REPORT
    LOG.OPTS  = "DISPLAY"
    ERROR_NBR = ERR_SYS
    ERROR_MSG =  "From Invalid Part Id Passed"
    CALL LOG.ERROR(LOG.OPTS,"RTCOPY.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  END
END ELSE  ;* NO FROM PART PASSED
  ENG.LIST = ''
END
*-->END GUI STARTUP<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
  CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN RETURN
  IF GUIEVT EQ GEQUIT THEN
    GUI.DLG.EXIT = 1
  END ELSE
    GUIAPP=OCONV(GUIAPP,'MCU')
    GUIFRM=OCONV(GUIFRM,'MCU')
    GUICTL=OCONV(GUICTL,'MCU')
    GOSUB GUI.DECODE.EVENT
  END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
  GUI.APP.LIST = ''
  CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
  IF GUI.APP.LIST EQ '' THEN
    * Quit event fired after last GUI object is deleted - discard it
    CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
    * We could call ATGUISHUTDOWN here if we wanted, but there's no
    * harm just leaving the GUI environment initialized, in case we
    * want to use it again...
  END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
  * Add your code here...
END ELSE
  * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
  BEGIN CASE
    CASE GUIAPP='RTCOPY'
      BEGIN CASE
        CASE GUIFRM='RTCOPY'
          BEGIN CASE
            CASE GUICTL=''
              BEGIN CASE
                CASE GUIEVT=GECLOSE
                  GOSUB GUI.RTCOPY.RTCOPY.CLOSE;GUIEVT=0
              END CASE
            CASE GUICTL='BTNCOPY'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.RTCOPY.RTCOPY.BTNCOPY.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='LSTRTLIST'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.RTCOPY.RTCOPY.LSTRTLIST.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='TXTPN'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.RTCOPY.RTCOPY.TXTPN.VALIDATE;GUIEVT=0
              END CASE
          END CASE
      END CASE
  END CASE
  IF GUIEVT THEN
    * Unhandled event - may be dynamic
    GOSUB GUI.DYNAMIC.EVENTS
  END
END ELSE
  GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.RTCOPY.RTCOPY.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
  GOSUB GUI.DIALOG.RETURN
  CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
  GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.RTCOPY.RTCOPY.BTNCOPY.CLICK: *
IF FROM_PN_ID # '' THEN
  IF ENG_ID # '' THEN
    * Get ok to proceed with copy
    PRMPT = 'Copy Routing: ': FROM_PN_ID:' Eng Id: ':ENG_ID:' to ':TO_PN_ID:' Eng Id: ':TO_ENG_ID
    CAPTION = "Routing Copy"
    STYLE   = 0  ;* no icon
    BUTTONS = 4  ;* yes / no
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
    IF RESPONSE = 6 THEN  ;* yes, COPY ROUTING
      GOSUB COPY.RT
      COPY_STATUS = RT_COPY ;*  STATUS = COPY
      PRMPT = 'Routing Copy Complete'
      CAPTION = "Routing Copy"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      GOSUB GUI.RTCOPY.RTCOPY.CLOSE;GUIEVT=0
    END ELSE
      PRMPT = 'Routing NOT Copied'
      CAPTION = "Routing Copy"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
    END
    *
  END ELSE
    PRMPT = 'Must Select an Eng Id to copy from'
    CAPTION = "Routing Copy"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok only
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  END
END ELSE
  PRMPT = 'Must Select Part Number to copy from'
  CAPTION = "Routing Copy"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok only
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.RTCOPY.RTCOPY.LSTRTLIST.CLICK: *
IF ENG.LIST # '' THEN
  ENG_ID = ENG.LIST<1,GUIARGS<1>,1>
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.RTCOPY.RTCOPY.TXTPN.VALIDATE: *
FROM_PN_ID = GUIARGS<2>
IF FROM_PN_ID # '' THEN  ;* THIS CAN HAPPEN IF USER ENTERS TEXT THEN BACKSPACES THEN CLICKS CANCEL
  GOSUB PART.GET
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
PART.GET:
*
* ACCESS PART NUMBER PN_ID
*
MSG_LIST = ''
*
TRY.AGAIN:
CALL GET.RECORD("PARTS",C.PARTS,FROM_PN_ID,FROM_PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF ERROR_STATUS = ERR_BUSY THEN
  GOSUB DSP.FROM.PN
END ELSE
  IF ERROR_STATUS = ERR_NOF OR FROM_PARTS_REC = '' THEN
    *
    *  SEARCH ?
    *

    PRMPT = "Search for part number matching : ":FROM_PN_ID:"?"
    CAPTION = "Routing Copy"
    STYLE   = 0  ;* no icon
    BUTTONS = 4  ;* yes / no
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
    IF RESPONSE = 6 THEN  ;* yes, search for part
      PN_TO_SEARCH =FROM_PN_ID
      CALL PN.SEARCH(PN_TO_SEARCH,PN_SELECTED,GUIERRORS,GUISTATE)
      IF PN_SELECTED = '' THEN   ;* NONE FOUND OR SELECTED
        PRMPT = "No part number found"
        CAPTION = "Routing Copy"
        STYLE   = 2  ;* !
        BUTTONS = 0  ;* ok only
        HELPID = ""
        CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
        ERROR_STATUS = ERR_NOF
      END ELSE
        FROM_PN_ID = PN_SELECTED
        GOTO TRY.AGAIN
      END
    END ELSE
      FROM_PN_ID = ''
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXTPN",GPVALUE,0,0,FROM_PN_ID,GUIERRORS,GUISTATE)
    END

  END ELSE
    GOSUB DSP.FROM.PN
  END
END
RETURN
************************************************************
DSP.FROM.PN:
*
* DISPLAY SELECTED FROM PART NUMBER
*
CALL WRT.LSTRTLIST.UPDATE(FROM_PN_ID,ENG.LIST,FROM_PARTS_REC,"LSTRTLIST",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
*
CTRLIDS = "TXTPN"
PROPS   = GPVALUE
VALUES  = FROM_PN_ID
*
CTRLIDS<2> = "TXTDESC"
PROPS<2>   = GPVALUE
VALUES<2>  = FROM_PARTS_REC<PT_DESC>
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
ENG_ID = ''
*
RETURN
************************************************************
COPY.RT:
*
* CREATE ROUTING COPY
*
* NOW GET OUR SEQ DATA OF FROM_PN_ID
SLIST = 'SSELECT RT BY PARTNBR BY ENGID BY SEQNBR WITH PARTNBR = "':FROM_PN_ID:'" AND WITH ENGID = "':ENG_ID:'" TO 2'
EXECUTE SLIST CAPTURING DMMY.OUT
*
IF @SELECTED GE 1 THEN
  READLIST IDLIST FROM 2 THEN
    LIST.CT = DCOUNT(IDLIST,@AM)
    FOR I = 1 TO LIST.CT
      FROM_RT_ID = IDLIST<I,1>
      SEQ_ID = FIELD(FROM_RT_ID,"*",3)   ;* SEQ NUMBER
      CALL GET.RECORD("RT",C.RT,FROM_RT_ID,RT_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
      IF ERROR_STATUS = '' THEN
        TO_RT_ID = TO_PN_ID:'*':TO_ENG_ID:'*':SEQ_ID
        CALL WRITE.RECORD(TO_RT_ID,RT_REC,C.RT,@FALSE,ERROR_STATUS)
      END ELSE
        LOG.OPTS = "DISPLAY"
        ERROR_NBR = ERR_NOF
        ERROR_MSG = 'During RT Copy: ':FROM_RT_ID:' ':ERR_MESSAGE(ERR_NOF)
        CALL LOG.ERROR(LOG.OPTS,"RTCOPY.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      END
    NEXT I
  END
END
*
RETURN
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"RTCOPY.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
*
END
