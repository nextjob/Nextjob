SUBROUTINE POAP.DIALOG(GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: POAP.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 05/15/2014
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* DIALOG IS CALLED TO CREATE AP RECORD FOR PURCHASE ORDER
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES NXT.WO.STATUS.DEF
$INCLUDE NXT.INCLUDES AP_INVOICE.H
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES PO_PARENT.H
$INCLUDE NXT.INCLUDES PO_CHILD.H
$INCLUDE NXT.INCLUDES RECEIPTS.H
$INCLUDE NXT.INCLUDES VENDORS.H
$INCLUDE NXT.INCLUDES VSHIP_TO.H
$INCLUDE NXT.INCLUDES WO.H
$INCLUDE NXT.INCLUDES WR.H
$INCLUDE NXT.INCLUDES WC.H
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
*
*
$INCLUDE GUIBP ATGUIEQUATES
GUIERRORS = ''
PROG_ID   = "POAP.DIALOG"
MSG_LIST  = ''
GUIAPP = "POAP"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "POAP"  ;* crease dialog startup time.
*
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
  CALL ATGUIERROR(3,'POAP','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
  RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'POAP' ELSE
  CALL ATGUIERROR(3,'POAP','',0,GRFATAL,"'POAP' is not on file.",GUIERRORS)
  RETURN
END
*
* COMPANY RECORD
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"COMPANY_RECORD",COMPANY_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF COMPANY_REC = '' THEN
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "Missing COMPANY_RECORD from SYSTEM_FILE"
  CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  RETURN
END
*
CALL GET.RECORD("VALIDATION_FILE",C.VALIDATION_FILE,"GL.TRANS.CODES",GLC_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF GLC_REC = '' THEN
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "Missing GL.TRANS.CODES from VALIDATION_FILE"
  CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  RETURN
END
*
*
* GET TERMS
*
CALL GET.RECORD("VALIDTAION_FILE",C.VALIDATION_FILE,"TERMS",TERMS.REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF TERMS.REC = '' THEN
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "TERMS not found in VALIDATION_FILE"
  CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  RETURN
END
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
  CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('POAP','POAP','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
GOSUB CLEAR.BUFFERS
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
  CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN RETURN
  IF GUIEVT EQ GEQUIT THEN
    GUI.DLG.EXIT = 1
  END ELSE
    GUIAPP=OCONV(GUIAPP,'MCU')
    GUIFRM=OCONV(GUIFRM,'MCU')
    GUICTL=OCONV(GUICTL,'MCU')
    GOSUB GUI.DECODE.EVENT
  END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
  GUI.APP.LIST = ''
  CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
  IF GUI.APP.LIST EQ '' THEN
    * Quit event fired after last GUI object is deleted - discard it
    CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
    * We could call ATGUISHUTDOWN here if we wanted, but there's no
    * harm just leaving the GUI environment initialized, in case we
    * want to use it again...
  END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
  * Add your code here...
END ELSE
  * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
  BEGIN CASE
    CASE GUIAPP='POAP'
      BEGIN CASE
        CASE GUIFRM='POAP'
          BEGIN CASE
            CASE GUICTL=''
              BEGIN CASE
                CASE GUIEVT=GECLOSE
                  GOSUB GUI.POAP.POAP.CLOSE;GUIEVT=0
              END CASE
            CASE GUICTL='BTNCANCEL'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.POAP.POAP.BTNCANCEL.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNFILE'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.POAP.POAP.BTNFILE.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='CHKHOLD'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.POAP.POAP.CHKHOLD.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='GRDLINES'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.POAP.POAP.GRDLINES.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='LSTITEM'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.POAP.POAP.LSTITEM.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='TXT1ORDVAL'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.POAP.POAP.TXT1ORDVAL.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTDATE'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.POAP.POAP.TXTDATE.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTINV'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.POAP.POAP.TXTINV.VALIDATE;GUIEVT=0
              END CASE
            CASE GUICTL='TXTINVAMT'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.POAP.POAP.TXTINVAMT.VALIDATE;GUIEVT=0
              END CASE
          END CASE
      END CASE
  END CASE
  IF GUIEVT THEN
    * Unhandled event - may be dynamic
    GOSUB GUI.DYNAMIC.EVENTS
  END
END ELSE
  GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POAP.POAP.BTNFILE.CLICK: *
IF PACKLIST.LIST = '' THEN
  PRMPT = 'No Packslips Selected'
  CAPTION = "Ap Entry"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
  * ADD RECEIVER (AND PO CHILD) ID
  *
  AP_REC<AP_RECEIPT_ID> = OC_ID
  *
  * ADD PACKSLIPS PAID TO AP_INVOICE RECORD
  *
  AP_REC<AP_PACKLIST_ID> = PACKLIST.LIST
  *
  * AND THE GL CODES AND AMOUNTS
  *
  AP_REC<AP_GL_AMTS>  = AMOUNT.LIST
  AP_REC<AP_GL_CODES> = GL.CODE.LIST
  AP_REC<AP_BAL_DUE>  = AP_REC<AP_INV_AMT>
  *
  IF AP_REC<AP_INV_AMT> # APPLIED.AMOUNT THEN   ;* NEED TO APPLY UNAPPLED AMOUNT, SEE HOW USER WANTS TO DO THIS
    IF UNAPPLIED.AMOUNT > 0 THEN  ;* ONLY ALLOW UNAPPLIED DIST ON INVOICES, NOT ON CREDITS
      CALL POAP.UNAPPLIED.DIALOG(AP_REC,UNAPPLIED.AMOUNT,GUIERRORS,GUISTATE)
    END ELSE
      CALL POAP.DISCOUNT.DIALOG(AP_REC,UNAPPLIED.AMOUNT,GUIERRORS,GUISTATE)
    END

  END
  *
  * RECALC APPLIED.AMOUNT AFTER CALL
  *
  LN.CNT = DCOUNT(AP_REC<AP_GL_AMTS>,@VM)
  APPLIED.AMOUNT = 0
  FOR I = 1 TO LN.CNT
    APPLIED.AMOUNT +=  AP_REC<AP_GL_AMTS,I>
  NEXT  I
  *
  * DO WE HAVE A VALID AP INVOICE RECORD?
  EMSG = ''
  BEGIN CASE
    CASE AP_REC<AP_INV_AMT> + 0 LE 0
      EMSG = 'No Invoice Amount'
    CASE AP_REC<AP_INV_AMT> # APPLIED.AMOUNT
      EMSG = 'Invoice Amount Does Not Equal Applied Amount'
  END CASE
  IF EMSG # '' THEN
    PRMPT = EMSG:' Cannot File Invoice'
    CAPTION = "Ap Entry"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  END ELSE
    *
    * ADD AMOUNT PAID BACK TO RECEIPTS RECORD
    *
    LN.CNT = DCOUNT(PACKLIST.LIST,@VM)
    FOR I = 1 TO LN.CNT
      PCK.ID = PACKLIST.LIST<1,I>
      LOCATE PCK.ID IN RC_REC<RC_PACKSLIPS,1> SETTING IDX THEN
        RC_REC<RC_VALUE,IDX> = AP_REC<AP_GL_AMTS,I>
      END
    NEXT I
    CALL WRITE.RECORD(RC_ID,RC_REC,C.RECEIPTS,@FALSE,ERROR_STATUS)
    *
    AP_ID =  OP_REC<PO_VEN>:'*':AP_INV_NBR
    CALL WRITE.RECORD(AP_ID,AP_REC,C.AP_INVOICE,@FALSE,ERROR_STATUS)
    *
    * NOW WRITE THE GLT TRANSACTIONS
    *
    LN.CNT = DCOUNT(AP_REC<AP_GL_AMTS>,@VM)
    FOR I =1 TO LN.CNT
      PCK_ID  = AP_REC<AP_PACKLIST_ID,I>
      IF PCK_ID = '' THEN PCK_ID = 'bal_to_apply'
      GL_CODE = AP_REC<AP_GL_CODES,I>
      DB_AMT  = AP_REC<AP_GL_AMTS,I>
      CR_AMT = DB_AMT
      CALL WRITE.GLT(GL_CODE,DB_AMT,CR_AMT,AP_REC<AP_INV_DATE>,"AP-INV",AP_ID,GUIERRORS,GUISTATE)
    NEXT I

    GOSUB GUI.POAP.POAP.BTNCANCEL.CLICK  ;* USE TO RESET FORM FOR NEXT INVOICE
  END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POAP.POAP.CHKHOLD.CLICK: *
AP_REC<AP_HOLD> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.POAP.POAP.CLOSE: *
*
IF RC_ID # '' THEN
  RELEASE C.FILE.VAR(C.RECEIPTS), RC_ID
END
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
  GOSUB GUI.DIALOG.RETURN
  CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
  GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POAP.POAP.BTNCANCEL.CLICK: *
IF RC_ID # '' THEN
  RELEASE C.FILE.VAR(C.RECEIPTS), RC_ID
END
CALL ATGUIRESET(GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
GOSUB CLEAR.BUFFERS
GOSUB LOAD.CHILD.LIST
GOSUB LOAD.CTRLS
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POAP.POAP.GRDLINES.CLICK: *
GRD.COL = GUIARGS<1,1>
GRD.ROW = GUIARGS<1,2>
*
* ONLY ALLOW RECEIVER SELECTIONS AFTER
* INV NBR
* DATE
* AMOUNT
* ARE ENTERED
*
EMSG = ''
BEGIN CASE
  CASE AP_INV_NBR = ''
    EMSG = 'Invoice Number Must Be Set'
  CASE  AP_REC<AP_INV_DATE> = ''
    EMSG = 'Invoice Date Must Be Set'
  CASE   AP_REC<AP_INV_AMT> = ''
    EMSG = 'Invoice Amount Must Be Set'
END CASE
IF EMSG # '' THEN
  PRMPT = EMSG:' Before Packlist Selection'
  CAPTION = "Ap Entry"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
  IF GRD.ROW LE RECVR.DETAIL.COUNT  THEN      ;* ONLY ROWS POPULATED WITH SALES DATA
    BEGIN CASE
      CASE GRD.COL = 1    ;* CHECK BOX
        *

        IF RECVR.DETAIL.LIST<1,GRD.ROW,1> THEN ;* ALREADY CHECKED, RESET
          RECVR.DETAIL.LIST<1,GRD.ROW,1> = 0
        END ELSE
          IF RECVR.DETAIL.LIST<1,GRD.ROW,6> = '' THEN ;* RECEIVER NOT INVOICED, OK TO ADD TO LIST
            RECVR.DETAIL.LIST<1,GRD.ROW,1> = 1
          END ELSE
            PRMPT = "This receipt all ready invoiced"
            CAPTION = "Ap Entry"
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            RECVR.DETAIL.LIST<1,GRD.ROW,1> = 0  ;* reset state
          END
        END

    END CASE
    GOSUB UPDATE.INV.ITEMS     ;* UPDATES / RELOADS ITEMS SELECTED ON RECEIVER LIST TO INVOICE LIST (INV.DETAIL.LIST)
  END
END
GOSUB UPDATE.APPLIED
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POAP.POAP.LSTITEM.CLICK: *
*
* VALID CHILD ID AT THIS CLICK ROW?
*
TEST.ID = CHILD.LIST<1,GUIARGS<1>,1>
IF TEST.ID # '' THEN
  *
  * DO WE NEED TO FREE UP A PREVIOUSLY SELECTED ITEM
  *
  IF RC_ID # '' THEN
    RELEASE C.FILE.VAR(C.RECEIPTS)
    RC_REC = ''
    RECVR.DETAIL.LIST = '' ;* LIST OF RECEIPTS FOR GRDLINES
    RECVR.DETAIL.COUNT  = 0
    INV.DETAIL.LIST = ''   ;* LIST FOR INVOICE ITEMS DISPLAYED IN GRDINVITESM
  END
  *
  OC_ID = TEST.ID
  *
  OC_REC      = '' ;* ORDER_CHILD RECORD

  CALL GET.PO.CHILD(OC_ID,OC_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)

  PN_ID = OC_REC<PC_PART_NBR>
  IF PN_ID # '' THEN
    CALL GET.RECORD("PARTS",C.PARTS,PN_ID,PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
  END ELSE
    PARTS_REC = ''
  END
  *
  RC_ID = OC_ID
  CALL GET.RECORD("RECEIPTS",C.RECEIPTS,RC_ID,RC_REC,@TRUE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
  BEGIN CASE
    CASE ERROR_STATUS = ERR_BUSY  ;* USER ENTERED ORDER IS LOCKED BY SOMEONE ELSE

      PRMPT = "Receipt: ":RC_ID:" is in Use"
      CAPTION = "Ap Entry"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

    CASE ERROR_STATUS = ERR_NOF  ;* NEW RECIEPT RECORD NOTHING TO SHOW
      RC_REC = ''
      GOSUB LOAD.RECVR.DETAIL
      GOSUB LOAD.CTRLS

      PRMPT = "No Receipts for this PO"
      CAPTION = "Ap Entry"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
    CASE 1
      RCT.CNT = DCOUNT(RC_REC<RC_PACKSLIPS>,@VM)
      TOT.PREV = 0
      *
      * CALC TOT PREVIOUSLY RECEIVED ON THIS RECEIPT
      FOR I = 1 TO RCT.CNT
        TOT.PREV = TOT.PREV + RC_REC<RC_QTY1,I> + RC_REC<RC_QTY2,I> + RC_REC<RC_QTY2,I> + RC_REC<RC_WO_QTY,I>
      NEXT I
      GOSUB LOAD.RECVR.DETAIL
      GOSUB LOAD.CTRLS
      *
  END CASE
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POAP.POAP.TXT1ORDVAL.VALIDATE: *
* USER ENTERED PO ORDER NUMBER
*
*  GET THE ORDER RECORD
*  GET THE VENOR RECORD
*  LOAD THE FORM
IF GUIARGS<2> # '' THEN
  GOSUB CLEAR.BUFFERS
  OP_ID = OCONV(GUIARGS<2>,"MCU")
  *
  EMSG = ""
  CALL GET.PO.PARENT(OP_ID,OP_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
  BEGIN CASE
    CASE ERROR_STATUS = ERR_NOF  ;* USER ENTERED NON - EXISTENT ORDER #
      EMSG = "Order number: ":OP_ID:" is not on file"
  END CASE
  *
  IF EMSG # '' THEN
    CAPTION = "Ap Entry"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(EMSG, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  END ELSE
    GOSUB GET.ORDER.DETAIL
    GOSUB LOAD.CTRLS
    *
  END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POAP.POAP.TXTDATE.VALIDATE: *
*
* CONVERT TERMS CODE TO PAYMENT DAYS
*
LOCATE OP_REC<PO_TERMS> IN TERMS.REC<1> SETTING IDX THEN
  TERM.DAYS = TERMS.REC<3,IDX>
END ELSE
  TERM.DAYS = 30
END
*
INV_DUE  = ''
INV_DATE = ICONV(GUIARGS<2>,"D")
*
EMSG = ''
BEGIN CASE
  CASE  INV_DATE > DATE()
    EMSG = "Cannot Future Date Invoice"
    *
  CASE INV_DATE LE COMPANY_REC<COMP_APCUTOFF>
    EMSG = 'Invoice Dated Prior to AP Cutoff (':OCONV(COMPANY_REC<COMP_APCUTOFF>,COMP_CUTOFF.CNV):'), Not Allowed!'
    *
  CASE INV_DATE  LT OP_REC<PO_DATE>
    EMSG = "Date cannot be prior to PO Date(":OCONV(OP_REC<PO_DATE>,PO_DATE.CNV):')'
    *
  CASE 1
    AP_REC<AP_INV_DATE> = INV_DATE
    AP_REC<AP_RECD_DATE> = DATE()
    AP_REC<AP_DUE_DATE> = INV_DATE + TERM.DAYS
    INV_DATE = OCONV(AP_REC<AP_INV_DATE>,AP_INV_DATE.CNV)
    INV_DUE  = OCONV(AP_REC<AP_DUE_DATE>,AP_DUE_DATE.CNV)
END CASE
*
IF EMSG # '' THEN
  PRMPT = EMSG
  CAPTION = "Ap Entry"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  *
  INV_DATE = ''
  INV_DUE = ''
END
*
CTRLIDS = "TXTDATE"
PROPS   = GPVALUE
VALUES  = INV_DATE
*
CTRLIDS<-1> = "LBLDUEV"
PROPS<-1>   = GPVALUE
VALUES<-1>  = INV_DUE
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POAP.POAP.TXTINV.VALIDATE: *
*
* VALIDATE INVOICE NUMBER, CANNOT ALREADY BE ON FILE!
*
TEST_AP_ID = OP_REC<PO_VEN>:'*':GUIARGS<2>
CALL GET.RECORD("AP_INVOICE",C.AP_INVOICE,TEST_AP_ID,TEST_AP_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF TEST_AP_REC = ''  THEN
  AP_INV_NBR  = OCONV(GUIARGS<2>,"MCU")
  *  AP_REC = ''
END ELSE
  AP_INV_NBR  = ''
  PRMPT = "Invoice ":GUIARGS<2>:" Already on File for Vendor, Re-enter"
  CAPTION = "Ap Entry"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.POAP.POAP.TXTINVAMT.VALIDATE: *
IF GUIARGS<2> GE 0 THEN
  AP_REC<AP_INV_AMT> = ICONV(GUIARGS<2>,AP_INV_AMT.CNV)
  INV_AMT = OCONV(AP_REC<AP_INV_AMT>,AP_INV_AMT.CNV)
  *
  GOSUB UPDATE.INV.ITEMS     ;* UPDATES / RELOADS ITEMS SELECTED ON RECEIVER LIST TO INVOICE LIST (INV.DETAIL.LIST)
  GOSUB UPDATE.APPLIED
  *
END ELSE
  PRMPT = "Invoice Amount Invalid, Please Correct"
  CAPTION = "Ap Entry"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  *
  INV_AMT = 0
END
CTRLIDS = "TXTINVAMT"
PROPS   = GPVALUE
VALUES  = INV_AMT
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
************************************************************
* $PAGE$
************************************************************
CLEAR.BUFFERS:
VN_ID       = '' ;* VENDOR ID
VN_REC      = '' ;* VENDOR RECORD BUFFER
OP_ID       = '' ;* ORDER PARENT ID
OP_REC      = '' ;* ORDER_PARENT RECORD
OC_ID       = '' ;* ORDER_CHILD ID
OC_REC      = '' ;* ORDER_CHILD RECORD
PN_ID       = '' ;* PARTS REC ID
PARTS_REC   = '' ;* PARTS RECORD FOR P/N IN ACTIVE ORDER_CHILD RECORD
RC_ID       = '' ;* RECEIVER ID
RC_REC      = '' ;* RECEIVER REC
AP_INV_NBR  = '' ;* AP INVOICE NUMBER
AP_REC      = '' ;* AP_INVOICE RECORD
*
TOT.PREV = 0 ;* total qty revd on po item
*
DATE_RCVD = DATE()
USER_ID = @LOGNAME
*
CHILD.LIST  = ''  ;* LIST FOR ORDER CHILD SELECTION ON ITEM DETIAL TAB
RECVR.DETAIL.LIST = '' ;* LIST OF RECEIPTS FOR GRDLINES
RECVR.DETAIL.COUNT  = 0
INV.DETAIL.LIST = ''   ;* LIST FOR INVOICE ITEMS DISPLAYED IN GRDINVITESM
PACKLIST.LIST = ''     ;* LIST OF SELECTED PACKSLIPS TO INCLUDE ON THIS INVOICE
*
UNAPPLIED.AMOUNT  = 0
APPLIED.AMOUNT    = 0
*
APPLY.UNAPPLIED.GLTCODE = ''
APPLY.UNAPPLIED.AMOUNT  = 0
*
RETURN
************************************************************
* $PAGE$
************************************************************
GET.ORDER.DETAIL:
*
* GET ORDER CHILD AND OP_ID
* ASSIGN AND ACCESS VN_ID / VN_REC, SHIPTO_ID / SHIPTO_REC, OC_ID / OC_REC
* FIND FIRST

GOSUB LOAD.CHILD.LIST
*
* GET VENDOR DATA
*
VN_ID  = OP_REC<PO_VEN>
CALL GET.VENDOR(VN_ID,VN_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
*
IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH VEN
  LOG.OPTS = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG = OP_ID:' Order has of non-existent VENDOR ':VN_ID
  CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
END ELSE
  CALL ATGUISETPROP(GUIAPP,GUIFRM,"LBLVENDORVAL",GPVALUE,"","",VN_REC<VN_NAME>,GUIERRORS,GUISTATE)
END
*
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CHILD.LIST:
*
* CREATE ORDER CHILD LIST AND SET ID TO FIRST NON DELETED RECORD
*
CHILD.LIST = ''
*
CHILD.COUNT = DCOUNT(OP_REC<PO_CHILD>,@VM)
FOR I = 1 TO CHILD.COUNT
  TEST.CHILD.ID = OP_ID:'*':I
  *
  CALL GET.RECORD("PO_CHILD",C.PO_CHILD,TEST.CHILD.ID,TEST.CHILD.REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
  IF ERROR_STATUS = ''  THEN
    CHILD.PN = TEST.CHILD.REC<PC_PART_NBR>
    CHILD.DESC = TEST.CHILD.REC<PC_PART_DESC>
    CHILD.STATUS = TEST.CHILD.REC<PC_ITEM_STAT>
    CHILD.WO =  TEST.CHILD.REC<PC_WO_NBR>
    CHILD.DUE = OCONV(TEST.CHILD.REC<PC_DUE_DATE>,PC_DUE_DATE.CNV)
    BEGIN CASE
      CASE CHILD.STATUS = "I" OR CHILD.STATUS = ""
        CHILD.STATUS = OE_CHILD_OPEN
      CASE CHILD.STATUS = "C"
        CHILD.STATUS = OE_CHILD_CLSD
    END CASE
  END ELSE
    *
    * MISSING CHILD RECORD, ASSUME DELETED
    *
    CHILD.PN = "Record Misssing!"
    CHILD.DESC = ""
    CHILD.STATUS = OE_CHILD_DEL
    CHILD.WO = ''
    CHILD.DUE = ''
  END

  CHILD.LIST<1,I,1> = TEST.CHILD.ID
  CHILD.LIST<1,I,2> = CHILD.PN
  CHILD.LIST<1,I,3> = CHILD.DESC
  CHILD.LIST<1,I,4> = CHILD.WO
  CHILD.LIST<1,I,5> = CHILD.DUE
  CHILD.LIST<1,I,6> = CHILD.STATUS
NEXT I
*
*
IF CHILD.LIST # '' THEN
  CTRLIDS = "LSTITEM"
  PROPS   = GPITEMS
  VALUES  = CHILD.LIST
  *
  CTRLIDS<2> = "LSTITEM"
  PROPS<2>   = GPENABLED
  VALUES<2>  = 1
END ELSE
  CTRLIDS = "LSTITEM"
  PROPS   = GPITEMS
  VALUES  = ""
  *
  CTRLIDS<2> = "LSTITEM"
  PROPS<2>   = GPENABLED
  VALUES<2>  = 0
END
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CTRLS:
*
* routine LOADS controls
*
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<-1> = "LBLCLOSED"
PROPS<-1>   = GPVISIBLE
IF OP_REC<PO_CLOSE> = "C" THEN
  VALUES<-1> = 1
END ELSE
  VALUES<-1> = 0
END
*
CTRLIDS<-1> = "LBLPNVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<PC_PART_NBR>
*
CTRLIDS<-1> = "LBLWOVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<PC_WO_NBR> :' ':OC_REC<PC_WO_SEQ>
*
CTRLIDS<-1> = "LBLDESCVAL"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<PC_PART_DESC>
*
CTRLIDS<-1> = "LBLORDQTYV"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OC_REC<PC_ORD_QTY>
*
CTRLIDS<-1> = "LBLPREVRCVDQTY"
PROPS<-1>   = GPVALUE
VALUES<-1>  = TOT.PREV
*
CTRLIDS<-1> = "LBLUSERIDV"
PROPS<-1>   = GPVALUE
VALUES<-1>  = USER_ID
*
* IF WE HAVE A PARTS RECORD, REFRESH THE LOCATION LABELS
*
* ENABLE RECEIVER SELECTION ONLY IF THERE IS A RECEIVER RECORD
*
IF RC_REC = '' THEN
  FRM.ENABLE_STATE = 0
END ELSE
  FRM.ENABLE_STATE = 1
END
*
CTRLIDS<-1> = "FRMPOITEM"
PROPS<-1>   = GPENABLED
VALUES<-1>  = FRM.ENABLE_STATE
*
CTRLIDS<-1> = "FRMINVDATA"
PROPS<-1>   = GPENABLED
VALUES<-1>  = FRM.ENABLE_STATE
*
CTRLIDS<-1> = "LBLPRICEV"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OCONV(OC_REC<PC_PRICE_EA>,PC_PRICE_EA.CNV)
*
CTRLIDS<-1> = "LBLlot"
PROPS<-1>   = GPVISIBLE
VALUES<-1>  = OC_REC<PC_LOT_FLAG>
*
CTRLIDS<-1> = "GRDLINES"
PROPS<-1>   = GPVALUE
VALUES<-1>  = RECVR.DETAIL.LIST
*
CTRLIDS<-1> = "LBLUNAPPLIEDV"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OCONV(UNAPPLIED.AMOUNT,PC_PRICE_EA.CNV)
*
CTRLIDS<-1> = "LBLTOTALV"
PROPS<-1>   = GPVALUE
VALUES<-1>  = OCONV(APPLIED.AMOUNT,PC_PRICE_EA.CNV)
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
* CREATE LIST TO DUMP INTO GRDLINES GRID
*
LOAD.RECVR.DETAIL:
RECVR.DETAIL.LIST = ''
RECVR.DETAIL.COUNT  = 0
*
*CALL GET.RECORD("RECEIPTS",C.RECEIPTS,OC_ID,RC_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF RC_REC # '' THEN
  *
  * ACCESS THE INVOIVE (AP_INVOICE RECORD)
  *
  SLIST = 'SSELECT AP_INVOICE WITH AP_RECEIPT_ID = "':OC_ID:'" TO 2'
  EXECUTE SLIST CAPTURING DMMY.OUT
  *
  IF @SELECTED GE 1 THEN
    READLIST IDLIST FROM 2 THEN
      LIST.CT = DCOUNT(IDLIST,@AM)
    END
  END ELSE
    LIST.CT = 0
  END
  *
  *
  RECVR.DETAIL.COUNT = DCOUNT(RC_REC<RC_PACKSLIPS>,@VM)
  FOR I = 1 TO RECVR.DETAIL.COUNT
    *
    RECVR.DETAIL.LIST<1,I,1> = 0   ;* SELECTED CHECK BOX, START WITH NON SELECTED
    RECVR.DETAIL.LIST<1,I,2> = RC_REC<RC_PACKSLIPS,I>
    RECVR.DETAIL.LIST<1,I,3> = OCONV(RC_REC<RC_DATE,I>,RC_DATE.CNV)
    QTY.RECVR = RC_REC<RC_QTY1,I> + RC_REC<RC_QTY2,I> + RC_REC<RC_QTY3,I> + RC_REC<RC_WO_QTY,I> + 0
    RECVR.DETAIL.LIST<1,I,4> =  QTY.RECVR
    RECVR.DETAIL.LIST<1,I,5> = RC_REC<RC_LOT_ID,I>
    *
    * NOW LOOK FOR AP_INVOICE
    *
    FOR AI = 1 TO LIST.CT
      AP_ID = IDLIST<AI,1>
      INVOICE_DATE = ''
      INVOICE_ID = ''
      CALL GET.RECORD("AP_INVOICE",C.AP_INVOICE,AP_ID,TEST_AP_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
      IF TEST_AP_REC = '' THEN
        LOG.OPTS = "DISPLAY"
        ERROR_NBR = ERR_SYS
        ERROR_MSG = 'AP_INVOICE record found with select but cannot be read: ':AP_ID
        CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)

      END ELSE
        *
        * LOOK FOR THIS RECEIPT PACKLIST ON AP RECORD
        *
        RC.PCKLST = TEST_AP_REC<AP_PACKLIST_ID>
        LOCATE RC_REC<RC_PACKSLIPS,I> IN RC.PCKLST<1,1> SETTING IDX THEN
          RECVR.DETAIL.LIST<1,I,6> = OCONV(TEST_AP_REC<AP_INV_DATE>,AP_INV_DATE.CNV)
          RECVR.DETAIL.LIST<1,I,7> = FIELD(AP_ID,"*",2)  ;* INVOICE NUMBER
          EXIT
        END
      END
    NEXT AI
    *
  NEXT I
END
RETURN
************************************************************
* $PAGE$
************************************************************
* CREATE LIST TO DUMP INVOICE SELECTED LIST
* UPDATES / RELOADS ITEMS SELECTED ON RECEIVER LIST TO INVOICE LIST (INV.DETAIL.LIST)
* UPDATE UNAPPLIED AND TOTAL LABELS
UPDATE.INV.ITEMS:
*
INV.DETAIL.LIST = ''   ;* LIST FOR INVOICE ITEMS DISPLAYED IN GRDINVITESM
APPLIED.AMOUNT  = 0
UNAPPLIED.AMOUNT = 0
*
* LIST FOR PACKLIST DATA  REM MUST SYNC WITH AMOUNT.LIST!
PACKLIST.LIST = ''
*
*  LISTS FOR GL DATA
AMOUNT.LIST  = ''   ;* REM MUST SYNC WITH PACKLIST.LIST!
GL.CODE.LIST = ''
LN.CNT = 0  ;* MUST KEEP TRACK OF LINES AS WE ADD THEM
*
RECVR.DETAIL.COUNT = DCOUNT(RC_REC<RC_PACKSLIPS>,@VM)
FOR I = 1 TO RECVR.DETAIL.COUNT
  IF  RECVR.DETAIL.LIST<1,I,1> THEN  ;* SELECTED PACKLIST?
    LN.CNT += 1
    INV.DETAIL.LIST<1,LN.CNT,1> =  RECVR.DETAIL.LIST<1,I,2>  ;* PACK LIST ID
    PACKLIST.LIST<1,-1>         = RECVR.DETAIL.LIST<1,I,2>   ;* SAVE PACK LIST ID FOR AP_INVOICE RECORD
    INV.DETAIL.LIST<1,LN.CNT,2> = RECVR.DETAIL.LIST<1,I,3>   ;* DATE RECVD
    INV.DETAIL.LIST<1,LN.CNT,3> =  RECVR.DETAIL.LIST<1,I,4>  ;* QTY RECVD
    INV.DETAIL.LIST<1,LN.CNT,4> = OCONV(OC_REC<PC_PRICE_EA>,PC_PRICE_EA.CNV) ;* PRICE
    *
    IF OC_REC<PC_LOT_FLAG> THEN   ;* LOT CHARGE?
      INV.DETAIL.LIST<1,LN.CNT,5> = OCONV(OC_REC<PC_PRICE_EA>,PC_PRICE_EA.CNV) ;* LOT PRICE
      LINE.AMT = OC_REC<PC_PRICE_EA>
    END ELSE
      LINE.AMT = OC_REC<PC_PRICE_EA> * INV.DETAIL.LIST<1,LN.CNT,3>
      INV.DETAIL.LIST<1,LN.CNT,5> = OCONV(LINE.AMT,PC_PRICE_EA.CNV) ;*
    END
    APPLIED.AMOUNT += LINE.AMT
    *
    * FIND GL TRANS CODE DESC
    *
    GLC.VALUE = OC_REC<PC_GL_TRANS_CD>
    LOCATE GLC.VALUE IN GLC_REC<1,1> BY "AL" SETTING IDX THEN
      GL.DESC = GLC.VALUE : ' - ':GLC_REC<2,IDX>
    END ELSE
      GL.DESC = GLC.VALUE : ' - Not On File!'
    END
    INV.DETAIL.LIST<1,LN.CNT,6> =  GL.DESC
    *
    AMOUNT.LIST<1,-1>  = LINE.AMT
    GL.CODE.LIST<1,-1> = GLC.VALUE
    *
  END
NEXT I
UNAPPLIED.AMOUNT =  (AP_REC<AP_INV_AMT> + 0) - APPLIED.AMOUNT
IF UNAPPLIED.AMOUNT < 0 THEN
  PRMPT = "Invoice Amount Exceeded"
  CAPTION = "Ap Entry"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
************************************************************
* $PAGE$
************************************************************
UPDATE.APPLIED:
* UPDATE UNAPPLIED AND TOTAL LABELS
*
* update the selected receicpt list
*
CTRLIDS = ""
PROPS   = ""
VALUES  = ""
*
CTRLIDS<1> = "GRDLINES"
PROPS<1>   = GPVALUE
VALUES<1>  = RECVR.DETAIL.LIST
*
CTRLIDS<2> = "GRDINVITEMS"
PROPS<2>   = GPVALUE
VALUES<2>  = INV.DETAIL.LIST
*
CTRLIDS<3> = "LBLTOTALV"
PROPS<3>   = GPVALUE
VALUES<3>  = OCONV(APPLIED.AMOUNT,AP_INV_AMT.CNV)
*
CTRLIDS<4> = "LBLUNAPPLIEDV"
PROPS<4>   = GPVALUE
VALUES<4>  = OCONV(UNAPPLIED.AMOUNT,AP_INV_AMT.CNV)
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
END
