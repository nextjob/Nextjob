SUBROUTINE WC.DIALOG(GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: WC.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 03/05/2013
* UPDATED:
*
* MAINTENANCE RECORD:
* 1/5/16 - CORRECT BTNDELETE LOGIC
* 1/9/16 - ADD FLAT RATE OPTION
*
* EQUATE:
*
*
* VARIABLES:
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* DIALOG IS CALLED TO MAINTAIN work centers (WC) FILE
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES WC.H
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "WC.DIALOG"
GUIERRORS = ''
GUIAPP = "wc"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "wc"  ;* crease dialog startup time.
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'WC','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'WC' ELSE
   CALL ATGUIERROR(3,'WC','',0,GRFATAL,"'WC' is not on file.",GUIERRORS)
   RETURN
END
*
* INIT VARIABLES
*
GET_REC_MSG_LIST = '';* DEFAULT MESSAGE LIST FOR GET.RECORD ROUTINE
NEW_ID = ''          ;* wc RECORD IDS MUST BE INITED
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('WC','WC','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
*
* LOAD SIGNOFF BLOCK DROP DOWN LIST
*
SOFF.LIST = ''
SOFF.IDX = ''
CALL LIST.LOAD(C.VALIDATION_FILE,"SIGNOFF","2",'',SOFF.LIST,SOFF.IDX,LIST.COUNT,EMSG)
CALL ATGUISETPROP('WC','WC',"LSTSIGNOFF",GPITEMS,0,0,SOFF.LIST,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* load Work Center drop down list
*
WC.LIST = '' ;* list of  WORK CENTERS
GOSUB LOAD.LSTWC
GOSUB CLEAR.BUFFERS
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
 BEGIN CASE
 CASE GUIAPP='WC'
 BEGIN CASE
  CASE GUIFRM='WC'
  BEGIN CASE
   CASE GUICTL=''
   BEGIN CASE
    CASE GUIEVT=GECLOSE
    GOSUB GUI.WC.WC.CLOSE;GUIEVT=0
    END CASE
   CASE GUICTL='BTNCANCEL'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.WC.WC.BTNCANCEL.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='BTNDELETE'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.WC.WC.BTNDELETE.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='BTNFILE'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.WC.WC.BTNFILE.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='BTNNEW'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.WC.WC.BTNNEW.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='BTNSAVEAS'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.WC.WC.BTNSAVEAS.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='CHKAUTOIP'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.WC.WC.CHKAUTOIP.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='CHKCAPACITY'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.WC.WC.CHKCAPACITY.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='CHKDISPATCH'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.WC.WC.CHKDISPATCH.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='CHKFLATRATE'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.WC.WC.CHKFLATRATE.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='CHKSUB'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.WC.WC.CHKSUB.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='LSTSIGNOFF'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.WC.WC.LSTSIGNOFF.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='LSTWC'
   BEGIN CASE
    CASE GUIEVT=GECLICK
    GOSUB GUI.WC.WC.LSTWC.CLICK;GUIEVT=0
    END CASE
   CASE GUICTL='TXTCAPHOZ'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTCAPHOZ.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTDEPT'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTDEPT.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTDESC'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTDESC.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTEFF'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTEFF.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTEOVERHEAD'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTEOVERHEAD.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTERUNRATE'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTERUNRATE.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTESURATE'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTESURATE.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTFRI'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTFRI.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTMON'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTMON.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTMOVE'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTMOVE.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTMOVERHEAD'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTMOVERHEAD.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTMRUNRATE'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTMRUNRATE.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTMSURATE'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTMSURATE.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTNAME'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTNAME.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTNEWID'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTNEWID.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTQUEUE'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTQUEUE.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTSAT'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTSAT.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTSAVEAS'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTSAVEAS.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTSUN'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTSUN.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTTHUR'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTTHUR.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTTUE'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTTUE.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTU1'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTU1.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTU2'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTU2.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTU3'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTU3.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTU4'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTU4.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTU5'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTU5.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTU6'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTU6.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTUNITS'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTUNITS.VALIDATE;GUIEVT=0
    END CASE
   CASE GUICTL='TXTWED'
   BEGIN CASE
    CASE GUIEVT=GEVALIDATE
    GOSUB GUI.WC.WC.TXTWED.VALIDATE;GUIEVT=0
    END CASE
   END CASE
  END CASE
 END CASE
 IF GUIEVT THEN
  * Unhandled event - may be dynamic
  GOSUB GUI.DYNAMIC.EVENTS
 END
END ELSE
 GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.CHKAUTOIP.CLICK: *
WC_REC<WC_AUTOIP> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.CHKCAPACITY.CLICK: *
WC_REC<WC_CAP> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.CHKDISPATCH.CLICK: *
WC_REC<WC_DISPATCH> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.CHKFLATRATE.CLICK: *
WC_REC<WC_FLATRATE> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.CHKSUB.CLICK: *
WC_REC<WC_SUB> = GUIARGS<1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.WC.WC.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.BTNCANCEL.CLICK: *
*
* USER WANTS TO CANCEL WHAT WE WERE DOING, CHECK TO SEE IF A SAVE IS REQUIRED
*
GOSUB SAVE.WC.CHECK
IF SAVE.WC.CHECK.OK THEN
   GOSUB CLEAR.BUFFERS
   GOSUB LOAD.CONTROLS
   GOSUB RESET.FORM
   ENABLE.STATE = 0
   GOSUB ENABLE.CONTROLS
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.BTNDELETE.CLICK: *
EMSG = ''
*
* VERIFY THAT WE CAN DELETE THIS WORK CENTER
*
* TEST FOR ROUTINGS WITH THIS WC
SLIST = 'SELECT RT WITH WRT_WCID = "':WC_ID:'"'
EXECUTE SLIST CAPTURING DMMY.OUT
IF @SELECTED GE 1 THEN
   EMSG = "Routing record(s) on file for Work Center, deleted not allowed"
END ELSE
   *
   * TEST FOR WORK ORDERS WITH THIS WC
   CLEARSELECT
   SLIST = 'SELECT WR WITH WRT_WCID = "':WC_ID:'"'
   EXECUTE SLIST CAPTURING DMMY.OUT
   IF @SELECTED GE 1 THEN
      EMSG = "Work Order(s) on file for Work Center, deleted not allowed"
   END
END
CLEARSELECT
*
IF EMSG = '' THEN
   PRMPT = "Delete Work Center: ":WC_ID
   CAPTION = "Work Center Maint"
   STYLE   = 2  ;* !
   BUTTONS = 4  ;* YES/NO
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   IF RESPONSE = 6 THEN  ;* YES
      DELETE C.FILE.VAR(C.WC), WC_ID
      GOSUB CLEAR.BUFFERS
      GOSUB LOAD.CONTROLS
      GOSUB LOAD.LSTWC
      GOSUB RESET.FORM
      ENABLE.STATE = 0
      GOSUB ENABLE.CONTROLS
   END
END ELSE
   PRMPT = EMSG
   CAPTION = "Work Center Maint"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* OK
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.BTNFILE.CLICK: *
*
* VALIDATE WC RECORD
*
REC.OK = @TRUE
*
BEGIN CASE
   CASE WC_REC<WC_DESC> = ''
      EMSG = 'Work Center Description Required, Please correct'
      REC.OK = @FALSE
   CASE WC_REC<WC_FLATRATE>
      IF WC_REC<WC_MACHSU>  LE 0 THEN
         EMSG = 'Flat Rate Selected with No Amount Entered (Use Machine Setup Field), Please correct'
         REC.OK = @FALSE
      END
END CASE

*
IF REC.OK THEN
   CALL WRITE.RECORD(WC_ID,WC_REC,C.WC,@FALSE,ERROR_STATUS)
   GOSUB CLEAR.BUFFERS
   GOSUB LOAD.CONTROLS
   GOSUB LOAD.LSTWC
   GOSUB RESET.FORM
   *
   ENABLE.STATE = 0
   GOSUB ENABLE.CONTROLS
   *
END ELSE
   PRMPT = EMSG
   CAPTION = "Work Center Maint"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.BTNNEW.CLICK: *
* user click new button, must want to add Work center,
* if there is not an active edit going on,
* make text window visable and active.
*
GOSUB SAVE.WC.CHECK
IF SAVE.WC.CHECK.OK THEN
   GOSUB CLEAR.BUFFERS
   GOSUB LOAD.CONTROLS
   *
   CTRLIDS = "LSTWC"
   PROPS   = GPENABLED
   VALUES  = 0
   *
   CTRLIDS<-1> = "LSTWC"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = 0
   *
   CTRLIDS<-1> = "FRMNEWID"
   PROPS<-1>   = GPVISIBLE
   VALUES<-1>  = 1
   *
   *
   CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   *
   CALL ATGUIACTIVATE(GUIAPP, GUIFRM, "TXTNEWID", GUIERRORS, GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.BTNSAVEAS.CLICK: *
*
CTRLIDS = "LSTWC"
PROPS   = GPENABLED
VALUES  = 0
*
CTRLIDS<-1> = "LSTWC"
PROPS<-1>   = GPVALUE
VALUES<-1>  = 0
*
CTRLIDS<-1> = "FRMSAVEAS"
PROPS<-1>   = GPVISIBLE
VALUES<-1>  = 1
*
*
CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
CALL ATGUIACTIVATE(GUIAPP, GUIFRM, "TXTSAVEAS", GUIERRORS, GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.LSTSIGNOFF.CLICK: *
SIGNOFF.ID = GUIARGS<1>
WC_REC<WC_SIGNOFF> = SOFF.LIST<1,SIGNOFF.ID,1>   ;* REM COMBO BOX CLICK RETURNS ACTUAL VALUE CLICK ON
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.LSTWC.CLICK: *
NEW_ID  =  WC.LIST<1,GUIARGS<1>,1>
IF NEW_ID # '' THEN
   *
   * IF WE SELECTED A NEW WC, DO WE NEED TO SAVE THE OLD ONE?
   IF NEW_ID # WC_ID THEN
      GOSUB SAVE.WC.CHECK
      IF SAVE.WC.CHECK.OK THEN
         IF WC_ID # '' THEN RELEASE C.FILE.VAR(C.WC), WC_ID
         GOSUB CLEAR.BUFFERS
         WC_ID = NEW_ID
         *
         CALL GET.RECORD("WC",C.WC,WC_ID,WC_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
         BEGIN CASE
            CASE ERROR_STATUS = ERR_NOF  ;* USER ENTERED NON - EXISTENT WC id #
               *
               * UNLOCK, REPORT AND EXIT
               RELEASE C.FILE.VAR(C.WC), WC_ID
               LOG.OPTS = "DISPLAY"
               ERROR_NBR = ERR_SYS
               ERROR_MSG =  "Missing WC record: ":WC_ID
               CALL LOG.ERROR(LOG.OPTS,"WC.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)

            CASE ERROR_STATUS = ERR_BUSY  ;* USER ENTERED ORDER IS LOCKED BY SOMEONE ELSE
               PRMPT = "Work Center: ":WC_ID:" in use, try later"
               CAPTION = "Work Center Maint"
               STYLE   = 2  ;* !
               BUTTONS = 0  ;* ok
               HELPID = ""
               CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            CASE 1
               GOSUB LOAD.CONTROLS
               ENABLE.STATE = 1
               GOSUB ENABLE.CONTROLS
               SAVE_WC_REC = WC_REC
         END CASE
      END
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTCAPHOZ.VALIDATE: *
WC_REC<WC_CAPHRZ> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTDEPT.VALIDATE: *
WC_REC<WC_DEPT> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTDESC.VALIDATE: *
WC_REC<WC_DESC> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTEFF.VALIDATE: *
WC_REC<WC_EFF> = ICONV(GUIARGS<2>,WC_EFF.CNV)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTEOVERHEAD.VALIDATE: *
WC_REC<WC_EMPOH> = ICONV(GUIARGS<2>,WC_EMPOH.CNV)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTERUNRATE.VALIDATE: *
WC_REC<WC_EMPRN> = ICONV(GUIARGS<2>,WC_EMPRN.CNV)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTESURATE.VALIDATE: *
WC_REC<WC_EMPSU> = ICONV(GUIARGS<2>,WC_EMPSU.CNV)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTFRI.VALIDATE: *
WC_REC<WC_FRI> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTMON.VALIDATE: *
WC_REC<WC_MON> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTMOVE.VALIDATE: *
WC_REC<WC_MOVE> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTMOVERHEAD.VALIDATE: *
WC_REC<WC_MACHOH> = ICONV(GUIARGS<2>,WC_MACHOH.CNV)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTMRUNRATE.VALIDATE: *
WC_REC<WC_MACHRN> = ICONV(GUIARGS<2>,WC_MACHRN.CNV)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTMSURATE.VALIDATE: *
WC_REC<WC_MACHSU> = ICONV(GUIARGS<2>,WC_MACHSU.CNV)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTNAME.VALIDATE: *
WC_REC<WC_NAME> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTNEWID.VALIDATE: *
WC_ID = GUIARGS<2>
CALL GET.RECORD("WC",C.WC,WC_ID,TEST_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
BEGIN CASE
   CASE ERROR_STATUS = ERR_NOF  ;* USER ENTERED NON - EXISTENT WC id #
      *
      * WE EXPECT NEW WC TO NOT BE ON FILE, START ENTERING
      ENABLE.STATE = 1
      GOSUB ENABLE.CONTROLS
      WC_REC = ''
      * INIT RATES
      WC_REC<WC_EMPOH> = 0
      WC_REC<WC_EMPSU> = 0
      WC_REC<WC_EMPRN> = 0
      WC_REC<WC_MACHOH> = 0
      WC_REC<WC_MACHSU> = 0
      WC_REC<WC_MACHRN> = 0
      WC_REC<WC_FLATRATE> = 0
      * INIT ROUTINGS
      WC_REC<WC_SUB> = 0
      WC_REC<WC_AUTOIP> = 0
      WC_REC<WC_EMPMACH> = 0
      * INIT SCHEDULING
      *WC_REC<WC_HRSDAY> = 0
      *WC_REC<WC_DAYSWK> = 0
      WC_REC<WC_EFF> = 100000
      WC_REC<WC_PRDUNITS> = 1
      WC_REC<WC_QUEUE> = 0
      WC_REC<WC_MOVE> = 0
      WC_REC<WC_CAP> = 0
      WC_REC<WC_CAPHRZ> = 60
      WC_REC<WC_MON> = DFLT.SCHD.HRS
      WC_REC<WC_TUE> = DFLT.SCHD.HRS
      WC_REC<WC_WED> = DFLT.SCHD.HRS
      WC_REC<WC_THUR> = DFLT.SCHD.HRS
      WC_REC<WC_FRI> = DFLT.SCHD.HRS
      WC_REC<WC_SAT> = 0
      WC_REC<WC_SUN> = 0
      WC_REC<WC_DISPATCH> = 0
      *
      GOSUB LOAD.CONTROLS

   CASE 1  ;* OTHERWISE WE HAVE ISSUES
      PRMPT = "WORK CENTER: ":WC_ID:" Already on file"
      CAPTION = "Work Center Maint"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      RELEASE C.FILE.VAR(C.WC), WC_ID
END CASE

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTQUEUE.VALIDATE: *
WC_REC<WC_QUEUE> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTSAT.VALIDATE: *
WC_REC<WC_SAT> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTSAVEAS.VALIDATE: *
SAVEAS_ID = GUIARGS<2>
*

*
* NOW LOOK FOR A WC RECORD BY THIS NAME, ALSO A NO NO
*
CALL GET.RECORD("WC",C.WC,SAVEAS_ID,SAVEAS_REC,@TRUE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
BEGIN CASE
   CASE ERROR_STATUS = ERR_NOF  ;* USER ENTERED NON - EXISTENT WC id #
      *
      * WE EXPECT SAVE AS WC TO NOT BE ON FILE
      * UNLOCK ORIGINALLY OPENNED WC
      *
      RELEASE C.FILE.VAR(C.WC), WC_ID
      WC_ID = SAVEAS_ID
      *
      PRMPT = "Click File Button to save ":WC_ID
      CAPTION = "Work Center Maint"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      *
      *
   CASE 1  ;* OTHERWISE WE HAVE ISSUES
      PRMPT = "Work Center: ":SAVEAS_ID:" Already on file"
      CAPTION = "Work Center Maint"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      RELEASE C.FILE.VAR(C.WC), SAVEAS_ID
END CASE

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTSUN.VALIDATE: *
WC_REC<WC_SUN> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTTHUR.VALIDATE: *
WC_REC<WC_THUR> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTTUE.VALIDATE: *
WC_REC<WC_TUE> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTU1.VALIDATE: *
WC_REC<WC_USER1> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTU2.VALIDATE: *
WC_REC<WC_USER2> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTU3.VALIDATE: *
WC_REC<WC_USER3> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTU4.VALIDATE: *
WC_REC<WC_USER4> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTU5.VALIDATE: *
WC_REC<WC_USER5> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTU6.VALIDATE: *
WC_REC<WC_USER6> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTUNITS.VALIDATE: *
WC_REC<WC_PRDUNITS> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WC.WC.TXTWED.VALIDATE: *
WC_REC<WC_WED> = GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"WC.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
CLEAR.BUFFERS:
*
*  INIT VARIBALES
*
WC_ID  = ''
WC_REC = ''        ;* WORK CENTER RECORD
SAVE_WC_REC = ''   ;* RECORD AS READ IN (US FOR CHANGED TEST)
*
RETURN
************************************************************
ENABLE.CONTROLS: *
* ENBALE OR DISABLE FORM CONTROLS
*  ENABLE.STATE = 1 OR 0 PASSED BY CALLER
*

*
CTRLIDS = "TXTNAME"
PROPS   = GPENABLED
VALUES  = ENABLE.STATE
*
CTRLIDS<2> = "TXTDESC"
PROPS<2>   = GPENABLED
VALUE<2>  = ENABLE.STATE
*
CTRLIDS<3> = "TXTDEPT"
PROPS<3>   = GPENABLED
VALUES<3>  = ENABLE.STATE
*
CTRLIDS<4> = "FRMROUT"
PROPS<4>   = GPENABLED
VALUES<4>  = ENABLE.STATE
*
CTRLIDS<5> = "FRMRATES"
PROPS<5>   = GPENABLED
VALUES<5>  = ENABLE.STATE
*
CTRLIDS<6> = "FRMSCHD"
PROPS<6>   = GPENABLED
VALUES<6>  = ENABLE.STATE
*
CTRLIDS<7> = "FRMUSERS"
PROPS<7>   = GPENABLED
VALUES<7>  = ENABLE.STATE
*
CTRLIDS<8> = "BTNNEW"
PROPS<8>   = GPENABLED
VALUES<8>  = NOT(ENABLE.STATE)
*
CTRLIDS<9> = "BTNFILE"
PROPS<9>   = GPENABLED
VALUES<9>  = ENABLE.STATE
*
CTRLIDS<10> = "BTNSAVEAS"
PROPS<10>   = GPENABLED
VALUES<10>  = ENABLE.STATE
*
CTRLIDS<11> = "BTNDELETE"
PROPS<11>   = GPENABLED
VALUES<11>  = ENABLE.STATE
*
CTRLIDS<12> = "LSTWC"
PROPS<12>   = GPENABLED
VALUES<12>  = NOT(ENABLE.STATE)
*
CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
******************************************************************************************
LOAD.CONTROLS:
*

*
CTRLIDS = "TXTNAME"
PROPS   = GPVALUE
VALUES  = WC_REC<WC_NAME>
*
CTRLIDS<2> = "TXTDESC"
PROPS<2>   = GPVALUE
VALUES<2>  = WC_REC<WC_DESC>
*
CTRLIDS<3> = "TXTDEPT"
PROPS<3>   = GPVALUE
VALUES<3>  = WC_REC<WC_DEPT>
*
LOCATE WC_REC<WC_SIGNOFF> IN SOFF.IDX<1> SETTING IDX THEN
   CTRLIDS<4> = "LSTSIGNOFF"
   PROPS<4>   = GPVALUE
   VALUES<4>  = IDX
END ELSE
   CTRLIDS<4> = "LSTSIGNOFF"
   PROPS<4>   = GPVALUE
   VALUES<4>  = 0
END
*
CTRLIDS<5> = "CHKSUB"
PROPS<5>   = GPVALUE
VALUES<5>  = WC_REC<WC_SUB>
*
CTRLIDS<6> = "CHKAUTOIP"
PROPS<6>   = GPVALUE
VALUES<6>  = WC_REC<WC_AUTOIP>
*
CTRLIDS<7> = "TXTESURATE"
PROPS<7>   = GPVALUE
VALUES<7>  = OCONV(WC_REC<WC_EMPSU>,WC_EMPSU.CNV)
*
CTRLIDS<8> = "TXTERUNRATE"
PROPS<8>   = GPVALUE
VALUES<8>  = OCONV(WC_REC<WC_EMPRN>,WC_EMPRN.CNV)
*
CTRLIDS<9> = "TXTEOVERHEAD"
PROPS<9>   = GPVALUE
VALUES<9>  = OCONV(WC_REC<WC_EMPOH>,WC_EMPOH.CNV)
*
CTRLIDS<10> = "TXTMSURATE"
PROPS<10>   = GPVALUE
VALUES<10>  = OCONV(WC_REC<WC_MACHSU>,WC_MACHSU.CNV)
*
CTRLIDS<11> = "TXTMRUNRATE"
PROPS<11>   = GPVALUE
VALUES<11>  = OCONV(WC_REC<WC_MACHRN>,WC_MACHRN.CNV)
*
CTRLIDS<12> = "TXTMOVERHEAD"
PROPS<12>   = GPVALUE
VALUES<12>  = OCONV(WC_REC<WC_MACHOH>,WC_MACHOH.CNV)
*
*CTRLIDS<13> = "TXTHRSDAY"
*PROPS<13>   = GPVALUE
*VALUES<13>  = WC_REC<WC_HRSDAY>
**
*CTRLIDS<14> = "TXTDAYSWEEK"
*PROPS<14>   = GPVALUE
*VALUES<14>  = WC_REC<WC_DAYSWK>
*
CI = 13
CTRLIDS<CI> = "TXTEFF"
PROPS<CI>   = GPVALUE
VALUES<CI>  = OCONV(wc_REC<WC_EFF>,WC_EFF.CNV)
*
CI = 14
CTRLIDS<CI> = "TXTQUEUE"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_QUEUE>
*
CI = 15
CTRLIDS<CI> = "TXTMOVE"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_MOVE>
*
CI = 16
CTRLIDS<CI> = "TXTUNITS"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_PRDUNITS>
*
CI = 17
CTRLIDS<CI> = "TXTCAPHOZ"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_CAPHRZ>
*
CI = 18
CTRLIDS<CI> = "CHKCAPACITY"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_CAP>
*
CI = 19
CTRLIDS<CI> = "TXTU1"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_USER1>
*
CI = 20
CTRLIDS<CI> = "TXTU2"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_USER2>
*
CI = 21
CTRLIDS<CI> = "TXTU3"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_USER3>
*
CI = 22
CTRLIDS<CI> = "TXTU4"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_USER4>
*
CI = 23
CTRLIDS<CI> = "TXTU5"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_USER5>
*
CI = 24
CTRLIDS<CI> = "TXTU6"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_USER6>
*
CI = 25
CTRLIDS<CI> = "TXTMON"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_MON>
*
CI = 26
CTRLIDS<CI> = "TXTTUE"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_TUE>
*
CI = 27
CTRLIDS<CI> = "TXTWED"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_WED>
*
CI = 28
CTRLIDS<CI> = "TXTTHUR"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_THUR>
*
CI = 29
CTRLIDS<CI> = "TXTFRI"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_FRI>
*
CI = 30
CTRLIDS<CI> = "TXTSAT"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_SAT>
*
CI = 31
CTRLIDS<CI> = "TXTSUN"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_SUN>
*
WCHRS = WC_REC<WC_SUN> + WC_REC<WC_MON> + WC_REC<WC_TUE> + WC_REC<WC_WED> + WC_REC<WC_THUR> + WC_REC<WC_FRI> + WC_REC<WC_SAT>
CI = 32
CTRLIDS<CI> = "LBLHRSWKV"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WCHRS
*
CI = 33
CTRLIDS<CI> = "LBLTOTCAPV"
PROPS<CI>   = GPVALUE
VALUES<CI>  = OCONV(WCHRS * WC_REC<WC_PRDUNITS> * OCONV(wc_REC<WC_EFF>,WC_EFF.CNV),"MD12")
*
CI = 34
CTRLIDS<CI> = "CHKFLATRATE"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_FLATRATE>
*
CI = 35
CTRLIDS<CI> = "CHKDISPATCH"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WC_REC<WC_DISPATCH>
*
CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
LOAD.LSTWC: *
*
* LOADS LSTWC THE WORK CENTER LIST DROP DOWN LIST
*
MAX.LIST = 500
START.LIST = 1
CALL GUI.SEARCH2 ("WC","","*","@ID","@ID  WC_DESC",MAX.LIST,START.LIST,WC.LIST,LST.IDS,LIST.CT,EMSG)
*
IF LIST.CT = 0 THEN  ;* NO ITEMS FOUND
   VALUE = ''
END ELSE
   VALUE = WC.LIST
END
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"LSTWC",GPITEMS,0,0,VALUE,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
RESET.FORM:
*
* SETUP FORM FOR NEXT workcenter
*
CTRLIDS = "LSTWC"
PROPS   = GPENABLED
VALUES  = 1
*
CTRLIDS<1> = "LSTWC"
PROPS<1>   = GPVALUE
VALUES<1>  = 0
*
CTRLIDS<2> = "FRMNEWID"
PROPS<2>   = GPVISIBLE
VALUES<2>  = 0
*
CTRLIDS<3> = "FRMSAVEAS"
PROPS<3>   = GPVISIBLE
VALUES<3>  = 0
*
CTRLIDS<4> = "TXTNEWID"
PROPS<4>   = GPVALUE
VALUES<4>  = ""
*
CTRLIDS<5> = "TXTSAVEAS"
PROPS<5>   = GPVALUE
VALUES<5>  = ""
*
CALL ATGUISETPROPS(GUIAPP, GUIFRM, CTRLIDS,PROPS, VALUES, GUIERRORS, GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
SAVE.WC.CHECK: *
*
* TEST TO SEE IF WE NEED TO UPDATE FILES:
* PREOCESS_STEP
SAVE.WC.CHECK.OK = @TRUE
IF SAVE_WC_REC # WC_REC THEN
   PRMPT = "Work Center Record has changed but not saved.":@SVM:"Select Cancel, then File to save changes ":@SVM:"or Ok to proceed without saving changes to item"
   CAPTION = "Work Center Maint"
   STYLE   = 2  ;* ?
   BUTTONS = 1  ;* ok / cancel
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   IF RESPONSE = 2 THEN  ;* CANCEL THE CANCEL OR CLOSE REQUEST
      SAVE.WC.CHECK.OK = @FALSE
   END
END
RETURN
************************************************************
END
