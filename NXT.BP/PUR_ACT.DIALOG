SUBROUTINE PUR_ACT.DIALOG(PN_ID,PARTS_REC,OPTIONS,RTN.DATA,GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: PUR_ACT.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2007
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
* PN_ID = PARTS NUMBER TO DISPLAY PO.ACTIVITY FOR
* PART_REC = PART RECORD
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* ROUTINE IS CALLED TO DISPLAY PART PO ACTIVITY
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES VENDORS.H
$INCLUDE NXT.INCLUDES AP_INVOICE.H
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES RECEIPTS.H
$INCLUDE NXT.INCLUDES PO_CHILD.H
$INCLUDE NXT.INCLUDES PO_PARENT.H
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "PUR_ACT.DIALOG"
GUIERRORS = ''
GUIAPP = "PO.ACTIVITY"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "PO.ACT"
*
MSG_LIST = ''   ;* FOR GET RECORD ROUTINES
*
GUIERRORS = ''
* Open the GUI project file
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
  CALL ATGUIERROR(3,'PURCHASE.ACTIVITY','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
  RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'PURCHASE.ACTIVITY' ELSE
  CALL ATGUIERROR(3,'PURCHASE.ACTIVITY','',0,GRFATAL,"'PURCHASE.ACTIVITY' is not on file.",GUIERRORS)
  RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
  CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('PO.ACTIVITY','PO.ACT','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
*
* INIT SOME VARIBALES
*
PROCESS.STEP.SELECTED = 0    ;* PROCESSES STEP SELECTED
GET_REC_MSG_LIST = ''
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"NETWORK_PATH",NETWORK_PATH_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
NETWORK.PATH = OCONV(NETWORK_PATH_REC<1>,"MCU")
SERVER.PATH = OCONV(NETWORK_PATH_REC<2>,"MCU")
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"DEFAULTS",DEFAULTS_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
USER_RECORD_ID = "USER*":@LOGNAME
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,USER_RECORD_ID,USER_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
IF USER_REC # '' THEN
  IF USER_REC<USER_PRICE_RESTRICTED> THEN
    USER.IS.RESTRICTED = @TRUE
  END ELSE
    USER.IS.RESTRICTED = @FALSE
  END
  *
END ELSE
  LOG.OPTS  = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG =  "Unknow User: ":@LOGNAME
  CALL LOG.ERROR(LOG.OPTS,"ACT.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
  GOSUB GUI.PO.ACTIVITY.PO.ACT.CLOSE;GUIEVT=0
END
*
GOSUB LOAD.DATA
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
  CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN RETURN
  IF GUIEVT EQ GEQUIT THEN
    GUI.DLG.EXIT = 1
  END ELSE
    GUIAPP=OCONV(GUIAPP,'MCU')
    GUIFRM=OCONV(GUIFRM,'MCU')
    GUICTL=OCONV(GUICTL,'MCU')
    GOSUB GUI.DECODE.EVENT
  END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
  GUI.APP.LIST = ''
  CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
  IF GUI.APP.LIST EQ '' THEN
    * Quit event fired after last GUI object is deleted - discard it
    CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
    * We could call ATGUISHUTDOWN here if we wanted, but there's no
    * harm just leaving the GUI environment initialized, in case we
    * want to use it again...
  END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
  * Add your code here...
END ELSE
  * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
  BEGIN CASE
    CASE GUIAPP='PO.ACTIVITY'
      BEGIN CASE
        CASE GUIFRM='PO.ACT'
          BEGIN CASE
            CASE GUICTL=''
              BEGIN CASE
                CASE GUIEVT=GECLOSE
                  GOSUB GUI.PO.ACTIVITY.PO.ACT.CLOSE;GUIEVT=0
              END CASE
            CASE GUICTL='GRDACT'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.PO.ACTIVITY.PO.ACT.GRDACT.CLICK;GUIEVT=0
              END CASE
          END CASE
      END CASE
  END CASE
  IF GUIEVT THEN
    * Unhandled event - may be dynamic
    GOSUB GUI.DYNAMIC.EVENTS
  END
END ELSE
  GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.PO.ACTIVITY.PO.ACT.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
  GOSUB GUI.DIALOG.RETURN
  CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
  GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.PO.ACTIVITY.PO.ACT.GRDACT.CLICK: *
CLICK.COL = GUIARGS<1,1>
CLICK.ROW = GUIARGS<1,2>
PO.CHILD.ID = ACT.LIST<1,CLICK.ROW,3>
IF PO.CHILD.ID # '' THEN
  GOSUB LOAD.RECVR.DETAIL
END ELSE
  RECVR.DETAIL.LIST = ''
END
CTRLIDS = "GRDLINES"
PROPS   = GPVALUE
VALUES  = RECVR.DETAIL.LIST
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"ACT.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
************************************************************
* $PAGE$
************************************************************
* LOAD DATA INTO CONTROLS
LOAD.DATA: *
*
* GET CURRENT ACTIVITY FROM ORDER_CHILD
*
ACT.LIST = ''
SLIST = 'SSELECT PO_CHILD WITH PC_PART_NBR = "':PN_ID:'" BY.DSND PC_DUE_DATE TO 2'
EXECUTE SLIST CAPTURING DMMY.OUT
BEGIN CASE
    *
  CASE @SELECTED LT 1
    NULL
    *
  CASE 1
    *
    *     CREATE THE LIST OF ITEM IDS
    *
    READLIST IDLIST FROM 2 THEN
      LIST.CT = DCOUNT(IDLIST,@AM)
      ACT.IDX = 0
      FOR I = 1 TO LIST.CT
        OC_ID = IDLIST<I>
        CALL GET.PO.CHILD(OC_ID,OC_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
        IF ERROR_STATUS = '' THEN
          OP_ID = FIELD(OC_ID,"*",1)
          CALL GET.PO.PARENT(OP_ID,OP_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
          IF ERROR_STATUS = '' THEN
            VN_ID = OP_REC<PO_VEN>
            VEN.NAME = TRANS("VENDORS",VN_ID,VN_NAME,"C")
            ACT.IDX += 1
            ACT.LIST<1,ACT.IDX,1> = OCONV(OC_REC<PC_DUE_DATE>,PC_DUE_DATE.CNV)
            ACT.LIST<1,ACT.IDX,2> = VEN.NAME
            ACT.LIST<1,ACT.IDX,3> = OC_ID
            ACT.LIST<1,ACT.IDX,4> = OC_REC<PC_ORD_QTY>
          END
        END
      NEXT I
    END

    *
END CASE
*
CTRLIDS = ""
PROPS   = ""
VALUES  = ""
*
CTRLIDS<1> = "LBLPNVAL"
PROPS<1>   =  GPVALUE
VALUES<1>  = PN_ID
*
CTRLIDS<2> = "LBLDESCVAL"
PROPS<2>   =  GPVALUE
VALUES<2>  = PARTS_REC<PT_DESC>
*
CTRLIDS<3> = "PICTURE1"
PROPS<3>   =  GPVALUE
VALUES<3>  = ""
IF PARTS_REC<PT_PICTURE> # '' THEN
   *
   * RESOLVE TO SERVER WHERE FILES ARE STORED
   *
   CALL SHARE.FILE.PATH.CALC(PARTS_REC<PT_PICTURE>,NETWORK_PATH_REC,SHARE.FILE.PATH,'EXPAND')
   IF SHARE.FILE.PATH # "" THEN
      VALUES<3>  =   SHARE.FILE.PATH
   END
   *
END
*
CTRLIDS<4> = "GRDACT"
PROPS<4>   = GPVALUE
VALUES<4>  = ACT.LIST
*
CTRLIDS<5> = "GRDLINES"
PROPS<5>   = GPVALUE
VALUES<5>  = ""
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.RECVR.DETAIL:
RECVR.DETAIL.LIST = ''
RECVR.DETAIL.COUNT  = 0
*
CALL GET.RECORD("RECEIPTS",C.RECEIPTS,PO.CHILD.ID,RCVR_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF RCVR_REC # '' THEN
  *
  * ACCESS THE INVOIVE (AP_INVOICE RECORD)
  *
  SLIST = 'SSELECT AP_INVOICE WITH AP_RECEIPT_ID = "':OC_ID:'" TO 2'
  EXECUTE SLIST CAPTURING DMMY.OUT
  *
  IF @SELECTED GE 1 THEN
    READLIST IDLIST FROM 2 THEN
      LIST.CT = DCOUNT(IDLIST,@AM)
    END
  END ELSE
    LIST.CT = 0
  END
  *
  *
  RECVR.DETAIL.COUNT = DCOUNT(RCVR_REC<RC_PACKSLIPS>,@VM)
  FOR I = 1 TO RECVR.DETAIL.COUNT
    *
    RECVR.DETAIL.LIST<1,I,1> = RCVR_REC<RC_PACKSLIPS,I>
    RECVR.DETAIL.LIST<1,I,2> = OCONV(RCVR_REC<RC_DATE,I>,RC_DATE.CNV)
    QTY.RECVR = RCVR_REC<RC_QTY1,I> + RCVR_REC<RC_QTY2,I> + RCVR_REC<RC_QTY3,I> + RCVR_REC<RC_WO_QTY,I> + 0
    RECVR.DETAIL.LIST<1,I,3> =  QTY.RECVR
    RECVR.DETAIL.LIST<1,I,4> = RCVR_REC<RC_LOT_ID,I>
    *
    * NOW LOOK FOR AP_INVOICE
    *
    FOR AI = 1 TO LIST.CT
      AP_ID = IDLIST<AI,1>
      INVOICE_DATE = ''
      INVOICE_ID = ''
      CALL GET.RECORD("AP_INVOICE",C.AP_INVOICE,AP_ID,AP_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
      IF AP_REC = '' THEN
        LOG.OPTS = "DISPLAY"
        ERROR_NBR = ERR_SYS
        ERROR_MSG = 'AP_INVOICE record found with select but cannot be read: ':AP_ID
        CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)

      END ELSE
        *
        * LOOK FOR THIS RECEIPT PACKLIST ON AP RECORD
        *
        RC.PCKLST = AP_REC<AP_PACKLIST_ID>
        LOCATE RCVR_REC<RC_PACKSLIPS,I> IN RC.PCKLST<1,1> SETTING IDX THEN
          RECVR.DETAIL.LIST<1,I,5> = OCONV(AP_REC<AP_INV_DATE>,AP_INV_DATE.CNV)
          RECVR.DETAIL.LIST<1,I,6> = FIELD(AP_ID,"*",2)  ;* INVOICE NUMBER
          EXIT
        END
      END
    NEXT AI
    *
  NEXT I
  *
END
RETURN
END
