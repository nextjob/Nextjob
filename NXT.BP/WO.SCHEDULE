SUBROUTINE WO.SCHEDULE(WO_ID,WO_REC,SCHD_FLAGS,GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: WO.SCHEDULE
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 11/26/2013
*
*
* MAINTENANCE RECORD:
* 04/25/16 -  SET WO_REC<WO_STATUS> TO COMPLETE IF THERE IS NO LOAD FOUND ON THE WORK ORDER
* 04/25/16 -  DEFINE SCHD_FLAGS<1> AND TEST FOR NO WR RECORDS
*
* EQUATE:
*
*
* VARIABLES:
* WO_ID      - WORK ORDER ID TO SCHEDULE
* WO_REC     - WORK ORDER RECORD
* SCHD_FLAGS - <1> - T - SHOW CONFIRM DIALOG F - SKIP
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* ROUTINE IS CALLED TO SCHEDULE / RESCHEDULE THE PASSED WORK ORDER
* NOTE! ROUTINE ASSUMES CALLER WILL WRITE UPDATED WO_REC TO FILE WO
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES NXT.WO.STATUS.DEF
$INCLUDE NXT.INCLUDES WO.H
$INCLUDE NXT.INCLUDES WR.H
*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID = "WO.SCHEDULE"
*
*
ERROR_STATUS = ''
MSG_LIST =''
DIM SEQ.ARRAY(1,1)
*
SCH.TYPE = WO_REC<WO_SCHD_TYPE>
*
* GET THE HOLDAYS RECORD (NON WORK DAYS)
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"HOLIDAYS",HOLIDAY_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF ERROR_STATUS # '' THEN
   ERR_MSG = "Cannot locate HOLDAYS record in SYSTEM_FILE, See SysAdmin"
   CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_SYS, ERR_MSG, GUIERRORS, GUISTATE)
   HOLIDAY_REC = ''
END

*
OPTS = 1
CALL WO.GRDRT.UPDATE(WO_ID,MAT SEQ.ARRAY,WR.COUNT,OPTS,"","","","","")
* RETURNS -  SEQ.ARRAY WITH THE FOLLOWING INFORMATION FOR EACH SEQ:
*********
*
IF WR.COUNT > 0 THEN     ;* ONLY SCHEDULE IF WE HAVE SEQ RECORDS
   BEGIN CASE
      CASE SCH.TYPE = 'BCK'
         *
         GOSUB CLEAR.WC.LOAD
         DUE.DT = WO_REC<WO_DUE_DATE>

         CALL WRT.BACKWARD.SCHD(DUE.DT,MAT SEQ.ARRAY,EXCPT,HOLIDAY_REC)
         WO_REC<WO_START_DATE> = SEQ.ARRAY(1,SQI_NSTR)
         *
         * NOTE - SEQ.ARRAY(1,SQI_NSTR) HOLDS THE FIRST DATE THAT ACTUAL WORK LOAD IS ASSIGNED,
         *        NOT THE DATE THAT QUEUE AND MOVE TIME START ACCURING.  I AM NOT SURE WHAT MAKES
         *        SENSE HERE, BUT FOR NOW LEAVE AS IS.
         *        THIS WILL RESULT IN FWD AND BCK SCHEDULES NOT HITTING THE SAME DATES
         *
      CASE SCH.TYPE = "FWD"
         GOSUB CLEAR.WC.LOAD
         START.DT = WO_REC<WO_START_DATE>

         CALL WRT.FORWARD.SCHD(START.DT,MAT SEQ.ARRAY,EXCPT,HOLIDAY_REC)
         * DETERMINE NUMBER OF ROUTING SEQS
         * COUNT ROWS (VIA SEQ.ARRAY DATA)
         ROWS = INMAT(SEQ.ARRAY)
         SEQ.COUNT = ROWS<1,1>
         WO_REC<WO_DUE_DATE> = SEQ.ARRAY(SEQ.COUNT,SQI_NEND)
      CASE 1
         ERR_MSG = "Invalid Schedule Type: ":SCH.TYPE:" passed for WO: ":WO_ID:" , See SysAdmin"
         CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_SYS, ERR_MSG, GUIERRORS, GUISTATE)
         GOTO 9999
   END CASE
   *
   * UPDATE WO AND WR RECORDSS
   *
   * DETERMINE NUMBER OF ROUTING SEQS
   * COUNT ROWS (VIA SEQ.ARRAY DATA)
   ROWS = INMAT(SEQ.ARRAY)
   SEQ.COUNT = ROWS<1,1>
   TOTAL.WC.LOAD = 0
   FOR I = 1 TO SEQ.COUNT
      *
      * GET WR RECORD
      *
      WR_ID = WO_ID:'*':SEQ.ARRAY(I,SQI_ID)
      CALL NXT.LOCKWAITING("WR",C.WR,WR_ID,GUIERRORS,GUISTATE)
      CALL GET.RECORD("WR",C.WR,WR_ID,WR_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
      IF ERROR_STATUS = '' THEN
         *
         * UPDATE SCHEDULE DATA
         *
         IF NOT(WR_REC<WR_FREEZE_SCHD>) THEN    ;* ONLY UPDATE IF FREEZE SCHEDULE NOT SET ON SEQ REC
            *
            WR_REC<WR_SCHD_START> = SEQ.ARRAY(I,SQI_NSTR)
            WR_REC<WR_SCHD_END> = SEQ.ARRAY(I,SQI_NEND)
            *
            * WRITE IT OUT
            *
            CALL WRITE.RECORD(WR_ID,WR_REC,C.WR,@FALSE,ERROR_STATUS)
         END
      END ELSE
         ERR_MSG = "Cannot locate WR record: ":WR_ID:" See SysAdmin"
         CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_SYS, ERR_MSG, GUIERRORS, GUISTATE)
      END
      RELEASE C.FILE.VAR(C.WR), WR_ID
      *
      TOTAL.WC.LOAD += (SEQ.ARRAY(I,SQI_EMPL) + SEQ.ARRAY(I,SQI_MCHL)) ;* SUM UP TOTAL LOAD HOURS ON WORK ORDER
   NEXT I
   *
   * SHOULD THIS WORK ORDER BE MARKED COMPLETE?
   IF TOTAL.WC.LOAD LE 0 THEN
      * NO LOAD HOURS, IF CURRENT STATUS IS AT RELEASED THEN MARK MFG CLOSED
      IF WO_REC<WO_STATUS> = WORK.ORDER.STATUS.LIST<1,WO.RELEASED.IDX,1> THEN
         WO_REC<WO_STATUS> = WORK.ORDER.STATUS.LIST<1,WO.MFG.CLOSE.IDX,1>
         WO_REC<WO_STAT_DATE>  = DATE()
      END
   END
   *
   *  DEBUG STATEMENTS
   *
   *DB_REC = ""
   *FOR I = 1 TO SEQ.COUNT
   *FOR C = 1 TO SQI_COLUMNS
   *DB_REC<C> = SEQ.ARRAY(I,C)
   *NEXT C
   *DB_ID = "WO.SCHEDULE*DEBUG*":I
   *CALL WRITE.RECORD(DB_ID,DB_REC,C.SYS_LOG,@FALSE,ERROR_STATUS)
   *NEXT I
   *
   PRMPT  = "WO.SCHEDULE: SCHEDULED WO: " : WO_ID
   IF EXCPT # '' THEN
      PRMPT<1,1,-1> = "The following exceptions occurred:"
      FOR E = 1 TO DCOUNT(EXCPT,@AM)
         PRMPT<1,1,-1> = EXCPT<E>
      NEXT E
   END
   *
   IF SCHD_FLAGS<1> THEN
      *
      CAPTION = "WO.SCHEDULE"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END
   *
END
9999: *
RETURN
!
* REMOVE WORK CENTER LOADING RECORDS FOR THIS WO
!
CLEAR.WC.LOAD: *
SLIST = 'SELECT WC_LOAD WITH WCL_WO_ID = "':WO_ID:'" TO 2'
EXECUTE SLIST CAPTURING DMMY.OUT
*
IF @SELECTED GE 1 THEN
   READLIST IDLIST FROM 2 THEN
      LIST.CT = DCOUNT(IDLIST,@AM)
      FOR I = 1 TO LIST.CT
         DELETE C.FILE.VAR(C.WC_LOAD), IDLIST<I>
      NEXT I
   END
END
RETURN
END
