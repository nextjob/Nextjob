SUBROUTINE WO.TREE.DIALOG(CALLER_PN_ID,CALLER_PN_REC,CALLER_OC_ID,CALLER_WO_ID,CALLER_ACTION,GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: WO.TREE.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 06/10/2013
* UPDATED:
*
* MAINTENANCE RECORD:
* 7/6/15 - Add Status Labor Costing buttons / dialogs
*
* EQUATE:
*
*
* VARIABLES:
*
* CALLER_ACTION = WO_CREATE OR WO_MODIFY OR WO_PROMPT
*
* IF CALLER_ACTION = WO_CREATE - created  work order
*    CALLER_PN_ID AND CALLER_PN_REC -  PART NUMBER TO CREATE WORK ORDER FOR (CALLER_WO_ID IS ASSUMED TO BE NULL)
*    CALLER_OC_ID - ORDER CHILD RECORD TO RELEASE WORK ORDER
*    THIS OPTION IS CURRENTLY ONLY USED BY OE.DIALOG!
*
* IF CALLER_ACTION = WO_MODIFY
*    CALLER_WO_ID WORK ORDER TO MAINTAIN (CALLER_PN_ID & CALLER_PN_REC &  CALLER_OC_ID IS ASSUMED TO BE NULL, FRMWO IS left disabled!)
*
* IF CALLER_ACTION = WO_PROMPT
*    CALLER_WO_ID, CALLER_PN_ID, CALLER_PN_REC  &  CALLER_OC_ID IS ASSUMED TO BE NULL
*
*
* CALLER_OC_ID SALES ORDER TO LINK WORK ORDER TO OR NULL
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* DIALOG IS CALLED TO CONTROL THE RELEASE OR MODIFY OF WORK ORDER (VIA CALLS TO WO.DIALOG)
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES NXT.WO.STATUS.DEF
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES RTREV.H
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES WC.H
$INCLUDE NXT.INCLUDES WO.H
$INCLUDE NXT.INCLUDES WRT.H


$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "WO.TREE.DIALOG"
GUIERRORS = ''
GUIAPP = "WO.TREE"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "WO.TREE"  ;* crease dialog startup time.
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'WO.TREE.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END

* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'WO.TREE.DIALOG' ELSE
   CALL ATGUIERROR(3,'WO.TREE','',0,GRFATAL,"'WO.TREE.DIALOG' is not on file.",GUIERRORS)
   RETURN
END

* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW("WO.TREE","WO.TREE",'','',GUIERRORS,GUISTATE)
*
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
* Add schedule types to dropdown list(predefined in NXT.EQUATES)
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"LSTSCHTYPE",GPITEMS,0,0,SCHEDULE.TYPE.LIST,GUIERRORS,GUISTATE)
*
MSG_LIST = ''
GRDWO.SELECTED = 0      ;* INIT ROW SELECTED OF GRDWOREL
WO.GRD.LIST = ''        ;* AND INIT THE DYNAMIC ARRAY TO HOLD THE GRID DATA
*
* WORK.ORDER.RELEASE.INIT
*
GOSUB WORK.ORDER.RELEASE.INIT
* WO.REL.INIT.OK    ;* STATUS RETURNED BY WORK.ORDER.RELEASE.ININT
IF NOT(WO.REL.INIT.OK) THEN
   GOSUB GUI.WO.TREE.WO.TREE.CLOSE
   RETURN
END
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='WO.TREE'
         BEGIN CASE
            CASE GUIFRM='WO.TREE'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.WO.TREE.WO.TREE.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNADD'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.TREE.WO.TREE.BTNADD.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNBOM'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.TREE.WO.TREE.BTNBOM.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCANCEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.TREE.WO.TREE.BTNCANCEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCOSTING'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.TREE.WO.TREE.BTNCOSTING.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNLABOR'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.TREE.WO.TREE.BTNLABOR.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNMODIFY'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.TREE.WO.TREE.BTNMODIFY.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNREL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.TREE.WO.TREE.BTNREL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNSTATUS'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.TREE.WO.TREE.BTNSTATUS.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='GRDWOREL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.TREE.WO.TREE.GRDWOREL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LSTRTLIST'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.TREE.WO.TREE.LSTRTLIST.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='LSTSCHTYPE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.WO.TREE.WO.TREE.LSTSCHTYPE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXT2PN'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.TREE.WO.TREE.TXT2PN.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTDATE'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.TREE.WO.TREE.TXTDATE.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTQTY'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.WO.TREE.WO.TREE.TXTQTY.VALIDATE;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.BTNADD.CLICK: *
*
REL_WO_ID    = ''
REL_PN    = ''
REL_ENG_ID = ''
REL_QTY    = ''
REL_DATE   = ''
REL_PN_REC = ''
REL_SCH_TYPE = ''
**
* USER WANTS TO ADD A WORK ORDER ASSOCIATED WITH THIS WORK ORDER
* WO.BASE WILL BE THE SAME
* LEG.ID WILL BE INCREMENTED IF THIS IS A DIFFERENT PART NUMBER THAN BASE (BASE.0.1.0)
* REL.ID WILL BE INCREMENTED IF THIS IS THE SAME PART NUMBER AS BASE
*
* FIRST WE NEED A PART NUMBER
*
CALL PN.PROMPT(PN_ID,GUIERRORS,GUISTATE)
IF PN_ID # '' THEN
   GOSUB PN.GET
   *
   * NOW PARSE THOUGH WO.GRD.IDS (WE ASSUME THAT LOAD.FRMASSOCIATIONS HAS BEEN CALLED AND WO.GRD.IDS IS POPULATED)
   *
   * FIND MAX.LEG.ID AND MAX.RELEASE.ID
   MAX.RELEASE = 0
   MAX.LEG     = 0
   FOR I = 1 TO DCOUNT(WO.GRD.IDS<1>,@VM)
      TEST.WO = WO.GRD.IDS<1,I>
      TEST.LEG = FIELD(TEST.WO,'.',2)
      IF TEST.LEG > MAX.LEG THEN MAX.LEG = TEST.LEG
      TEST.RELEASE = FIELD(TEST.WO,'.',3)
      IF TEST.RELEASE > MAX.RELEASE THEN MAX.RELEASE = TEST.RELEASE
   NEXT I
   *
   *
   WO.BASE.ID = FIELD(WO.GRD.IDS<1,1>,'.',1):'.0.1.0'
   CALL GET.RECORD("WO",C.WO,WO.BASE.ID,WO_TEST,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
   IF WO_TEST = '' THEN
      LOG.OPTS  = "DISPLAY"
      ERROR_NBR = ERR_SYS
      ERROR_MSG =  "Missing Work Order Base: ":WO.BASE.ID
      CALL LOG.ERROR(LOG.OPTS,"WO.TREE.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
   END ELSE
      IF PN_ID  =  WO_TEST<WO_PARTNBR> THEN  ;* NEW RELEASE
         REL_WO_ID = FIELD(WO.BASE.ID,'.',1):'.0.':MAX.RELEASE+1:'.0'
      END ELSE                               ;* NEW LEG
         REL_WO_ID = FIELD(WO.BASE.ID,'.',1):'.':MAX.LEG+1:'.1.0'
      END
      REL_PN = PN_ID
      REL_PN_REC = PARTS_REC
      *
      *
      *   ENABLE FRMWO AND ENABLE FRMASSOCIATIONS
      *
      CTRLIDS = "FRMWO"
      PROPS   = GPENABLED
      VALUES  = 1
      *
      CI = 2
      CTRLIDS<CI> = "FRMASSOCIATIONS"
      PROPS<CI>   = GPENABLED
      VALUES<CI>  = 0
      *
      CI = 3
      CTRLIDS<CI> = "TXTQTY"
      PROPS<CI>   = GPVALUE
      VALUES<CI>  = ''
      **
      CI = 4
      CTRLIDS<CI> = "TXTDATE"
      PROPS<CI>   = GPVALUE
      VALUES<CI>  = ''
      
      CI = 5
      CTRLIDS<CI> = "TXT2PN"
      PROPS<CI>   = GPVALUE
      VALUES<CI>  = REL_PN
      
      CI = 6
      CTRLIDS<CI> = "TXTWO"
      PROPS<CI>   = GPVALUE
      VALUES<CI>  = REL_WO_ID
      *
      CI = 7
      CTRLIDS<CI> = "TXT2PN"
      PROPS<CI>   = GPENABLED
      VALUES<CI>  = 0
      *
      CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   END
   *
END
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.BTNBOM.CLICK: *
*
*  When we get to adding BOM this click will auto release all legs defined in the BOM
*  we will need a way to keep this from happening twice
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.BTNCANCEL.CLICK: *
* ACTUAL LABEL IS RETRY *
GRDWO.SELECTED = 0      ;* INIT ROW SELECTED OF GRDWOREL
WO.GRD.LIST = ''
WO_ID = ''
WO_REC = ''
GOSUB LOAD.WO.TREE.CTRLS
GOSUB WORK.ORDER.RELEASE.INIT
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.BTNCOSTING.CLICK: *
*
* IF THERE IS A ASSOCIATED WORK ORDER SELECTED AND COSTING CLICKED, PRODUCE REPORT
IF GRDWO.SELECTED > 0 THEN
   WO.CALLER_WO_ID =  WO.GRD.LIST<1,GRDWO.SELECTED,1>
   *  CALL WO.COSTING(WO.CALLER_WO_ID,WO.CALLER_RESULT,GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.BTNLABOR.CLICK: *
*
* IF THERE IS A ASSOCIATED WORK ORDER SELECTED AND LABOR CLICKED, PRODUCE REPORT
IF GRDWO.SELECTED > 0 THEN
   WO.CALLER_WO_ID =  WO.GRD.LIST<1,GRDWO.SELECTED,1>
   SELECT.STR =  'SORT LABOR_TRANS WITH LBT_WO_ID = "':WO.CALLER_WO_ID:'" BY LBT_SEQ_ID BY LBT_DATE BY LBT_CLK_IN LBT_DATE LBT_EMP LBT_WO_ID LBT_SEQ_ID LBT_CLK_IN LBT_CLK_OUT LBT_ELAPSED LBT_BREAK LBT_LAB_HRS LBT_QTY_CMP LBT_QTY_SCRP LBT_SEQ_STAT LBT_EMPMACH LBT_RATE LBT_DOLLARS '
   OPTIONS = ''
   REPORT.NAME = WO.CALLER_WO_ID:"_ID_REPORT.CSV"
   CALL NXT.SPREADSHEET.REPORT(SELECT.STR,REPORT.NAME,@TRUE,OPTIONS, GUIERRORS, GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.BTNMODIFY.CLICK: *
*
* IF THERE IS A ASSOCIATED WORK ORDER SELECTED AND MODIFY CLICKED, GO DUE IT.
IF GRDWO.SELECTED > 0 THEN
   WO.CALLER_WO_ID =  WO.GRD.LIST<1,GRDWO.SELECTED,1>
   WO.CALLER_RESULT = ''
   CALL WO.DIALOG(WO.CALLER_WO_ID,WO.CALLER_RESULT,GUIERRORS,GUISTATE)
   GOSUB LOAD.FRMASSOCIATIONS
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.BTNREL.CLICK: *
*
*
*   VALIDATE PN, WO, QTY, ENG ID POPULATED
*
EMSG = ''
BEGIN CASE
   CASE REL_WO_ID    = ''
      EMSG = 'Work Order Id Not Specified'
   CASE REL_PN    = ''
      EMSG = 'Part Number Not Specified'
   CASE REL_ENG_ID = ''
      EMSG = 'Engineering Id Not Specified'
   CASE REL_QTY    = ''
      EMSG = 'Qty to Mfg Not Specified'
   CASE REL_DATE   = ''
      EMSG = 'Work Order Date Not Specified'
   CASE NOT(REL_SCH_TYPE = SCHEDULE.TYPE.LIST<1,1,1> OR REL_SCH_TYPE = SCHEDULE.TYPE.LIST<1,2,1> OR REL_SCH_TYPE = SCHEDULE.TYPE.LIST<1,3,1>)
      EMSG = 'Invalid Schedule Type:':REL_SCH_TYPE
END CASE
IF EMSG # '' THEN
   PRMPT = EMSG:', Please Correct'
   CAPTION = "Work Order Tree"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
   **
   ** TEST ENG REV FOR OBSOLETE FLAG
   **
   ENG_REV_ID = REL_PN:'*':REL_ENG_ID
   CALL GET.RECORD("RTREV",C.RTREV,ENG_REV_ID,REV_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
   IF REV_REC<RTR_OBS> THEN
      PRMPT = 'Selected Routing is Market Obsolete, Cannot Release'
      CAPTION = "Work Order Tree"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END ELSE
      **
      ** RELEASE THE WORK ORDER
      **
      CALL WO.RELEASE (REL_WO_ID,REL_PN,REL_PN_REC,REL_ENG_ID,REL_QTY,REL_DATE,REL_SCH_TYPE,CALLER_OC_ID,GUIERRORS,GUISTATE)
      **
      ** ALLOW MODIFICATIONS TO THE WORK ORDER
      **
      WO.CALLER_WO_ID =  REL_WO_ID
      WO.CALLER_RESULT = ""
      CALL WO.DIALOG(WO.CALLER_WO_ID,WO.CALLER_RESULT,GUIERRORS,GUISTATE)
      *
      GOSUB LOAD.FRMASSOCIATIONS
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.BTNSTATUS.CLICK: *
*
* IF THERE IS A ASSOCIATED WORK ORDER SELECTED AND STATUS CLICKED, SHOW DIALOG
IF GRDWO.SELECTED > 0 THEN
   WO.CALLER_WO_ID =  WO.GRD.LIST<1,GRDWO.SELECTED,1>
   CALL WO.STATUS.DIALOG(WO.CALLER_WO_ID,WO.CALLER_RESULT,GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.GRDWOREL.CLICK: *
IF GUIARGS<1,2> > 0 THEN   ;* ACTAUL ROW SELECTED?
   PREVIOUS.GRDWO.SELECTED = GRDWO.SELECTED
   GRDWO.SELECTED = GUIARGS<1,2> ;* ROW NUMBER
   *
   IF WO.GRD.LIST # '' THEN
      * RESET PREVIOUS SELECTED STEP COLOR
      IF GRDWO.SELECTED > 0 THEN
         CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDWOREL",GPBACKCOLOR,"",PREVIOUS.GRDWO.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      END
      *
      * DO NOT ALLOW SELECTION PAST END OF LIST
      IF GRDWO.SELECTED > DCOUNT(WO.GRD.LIST<1>,@VM) THEN
         GRDWO.SELECTED =  DCOUNT(WO.GRD.LIST<1>,@VM)
         CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDWOREL",GPROW,"","",GRDWO.SELECTED,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      END
      *
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDWOREL",GPBACKCOLOR,"",GRDWO.SELECTED,CLRGRAY,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      *
      * now display this selected work order in the work order frame (frmwo)
      *
      *
      WO_ID = WO.GRD.IDS<1,GRDWO.SELECTED>
      IF WO_ID # '' THEN
         GOSUB WO.GET
         IF NOT(WO.GET.OK) THEN
            WO_ID = ''
         END
         GOSUB LOAD.WO.TREE.CTRLS
      END ELSE
         LOG.OPTS  = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG =  "Click on frmAsscoations grdWoREL returned null work order id"
         CALL LOG.ERROR(LOG.OPTS,"WO.TREE.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      END
      *
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.LSTRTLIST.CLICK: *
REL_ENG_ID = ENG.LIST<1,GUIARGS<1>,1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.LSTSCHTYPE.CLICK: *
REL_SCH_TYPE = SCHEDULE.TYPE.LIST<1,GUIARGS<1>,1>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.TXT2PN.VALIDATE: *
PN_ID = OCONV(GUIARGS<2>,"MCU")
GOSUB PN.GET
IF PARTS_REC = '' THEN
   REL_PN = ''
   REL_PN_REC = ''
END ELSE
   REL_PN = PN_ID
   REL_PN_REC = PARTS_REC
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.TXTDATE.VALIDATE: *
REL_DATE = ICONV(GUIARGS<2>,"D")
IF REL_DATE < DATE() THEN
   PRMPT = "Warning, Work Order Date is < Today! ??"
   CAPTION = "Work Order Tree"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.WO.TREE.WO.TREE.TXTQTY.VALIDATE: *
IF GUIARGS<2> LE 0 THEN
   PRMPT = "Quantity cannot be <= 0, Please Correct"
   CAPTION = "Work Order Tree"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   REL_QTY = ''
END ELSE
   REL_QTY = GUIARGS<2>
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"WO.TREE.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
WO.GET:
*
* ATTEMPT TO READ IN WO RECORD WO_ID
*
MSG_LIST = ''
WO_REC = ''
WO.GET.OK = @FALSE
*
* NOTE, WE CHECK TO SEE IF ORDER IS LOCK TO PREVENT CONTINUATION, WE UNLOCK BEFORE WE LEAVE HERE!
CALL GET.RECORD("WO",C.WO,WO_ID,WO_REC,@TRUE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF ERROR_STATUS = ERR_BUSY THEN
   * DISPLAY WO INFO
   GOSUB LOAD.WO.TREE.CTRLS
   * BUT STOP EDIT
   PRMPT = "Work Order in use, Update Not Allowed"
   CAPTION = "Work Order Tree"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   *
END ELSE
   IF ERROR_STATUS = ERR_NOF OR WO_REC = '' THEN
      RELEASE C.FILE.VAR(C.WO), WO_ID
      PRMPT = "Work Order Not Found"
      CAPTION = "Work Order Tree"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok only
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END ELSE
      WO.GET.OK = @TRUE
      SAVE_WO_REC = WO_REC   ;* SAVE COPY FOR FILE TEST
   END
END
RELEASE C.FILE.VAR(C.WO), WO_ID   ;* UNLOCK REGARDLESS
RETURN
******************************************************************************************
PN.GET: *
PARTS_REC = ""
CALL GET.RECORD("PARTS",C.PARTS,PN_ID,PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
IF PARTS_REC # '' THEN
   * POP ENG ID LIST, DESC AND DRAWING INFO
   *
   CALL WRT.LSTRTLIST.UPDATE(PN_ID,ENG.LIST,PARTS_REC,"LSTRTLIST",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
   *
   CTRLIDS = "TXT2PN"
   PROPS   = GPVALUE
   VALUES  = PN_ID
   *
   CTRLIDS<2> = "LBLDESCV"
   PROPS<2>   = GPVALUE
   VALUES<2>  = PARTS_REC<PT_DESC>
   *
   CTRLIDS<3> = "LBLDRAWV"
   PROPS<3>   = GPVALUE
   VALUES<3>  = PARTS_REC<PT_DRAWING>
   *
   IF PARTS_REC<PT_DFLT_ENG_ID> # '' THEN
      CTRLIDS<4> = "LSTRTLIST"
      PROPS<4>   = GPVALUE
      VALUES<4>  = PARTS_REC<PT_DFLT_ENG_ID>
      REL_ENG_ID =  PARTS_REC<PT_DFLT_ENG_ID>
   END
   *
   CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   *
END ELSE
   *  *
   PRMPT = "Part Number:":PN_ID:" Not On File, Search?"
   CAPTION = "Work Order Tree"
   STYLE   = 0  ;* no icon
   BUTTONS = 4  ;* yes / no
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

   IF RESPONSE = 6 THEN  ;* yes, search for part
      PN_TO_SEARCH = PN_ID
      CALL PN.SEARCH(PN_TO_SEARCH,PN_SELECTED,GUIERRORS,GUISTATE)
      IF PN_SELECTED = '' THEN   ;* NONE FOUND OR SELECTED
         *
         * WE NOW HAVE AN INVALID PART NUMBER IN THE TEXT BOX, CLEAR IT ALL OUT AFTER ERROR MSG DISPLAYED
         *
         GOSUB CLEAR.PART.FIELDS
      END ELSE
         PN_ID = PN_SELECTED
         GOTO PN.GET
      END
   END ELSE ;* NO DO NOT SEARCH FOR PART
      *
      * WE NOW HAVE AN INVALID PART NUMBER IN THE TEXT BOX, CLEAR IT ALL OUT AFTER ERROR MSG DISPLAYED
      *
      GOSUB CLEAR.PART.FIELDS
   END
END
RETURN
******************************************************************************************
CLEAR.PART.FIELDS:
*
* CLEAR OUT PART DATA ON FRMWO
*
CTRLIDS = "TXT2PN"
PROPS   = GPVALUE
VALUES  = ''
*
CTRLIDS<2> = "LBLDESCV"
PROPS<2>   = GPVALUE
VALUES<2>  = ''
*
CTRLIDS<3> = "LBLDRAWV"
PROPS<3>   = GPVALUE
VALUES<3>  = ''
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
RETURN
******************************************************************************************
LOAD.WO.TREE.CTRLS:
*
* routine LOADS WORK ORDER controls
*
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CI = 1
CTRLIDS<CI> = "TXTWO"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_ID
*
CI = 2
CTRLIDS<CI> = "TXTQTY"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_QTY_TO_MFG>
*
CI = 3
CTRLIDS<CI> = "TXT2PN"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_PARTNBR>
*
CI = 4
CTRLIDS<CI> = "LBLASSOCV"
PROPS<CI>   = GPVALUE
IF WO_REC<WO_OC_REF> # '' THEN
   VALUES<CI>  = WO_REC<WO_OC_REF>
END ELSE
   VALUES<CI>  = WO_REC<WO_ASSOC>
END
*
CI = 5
CTRLIDS<CI> = "LBLDESCV"
PROPS<CI>  = GPVALUE
VALUES<CI>  = WO_REC<WO_PT_DESC>
*
CI = 6
CTRLIDS<CI> = "LBLDRAWV"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO_REC<WO_PT_DRAWING>
*
CI = 7
CTRLIDS<CI> = "TXTDATE"
PROPS<CI>   = GPVALUE
VALUES<CI>  =OCONV(WO_REC<WO_DUE_DATE>,WO_DUE_DATE.CNV)
*
CI = 8
CTRLIDS<CI> =  "LSTSCHTYPE"
PROPS<CI>   = GPVALUE
VALUES<CI>  = 0
*
CI = 9
CTRLIDS<CI> =  "LSTRTLIST"
PROPS<CI>   = GPVALUE
VALUES<CI>  = 0
*
CI = 10
CTRLIDS<CI> =  "GRDWOREL"
PROPS<CI>   = GPVALUE
VALUES<CI>  = WO.GRD.LIST
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
*****************************************************************************************
LOAD.FRMASSOCIATIONS:
*
* CREATE A LIST OF WORK ORDERS AND POPULATED GRID GRDWOREL (ASSOCIATIONS GRID)
* rem association is just all work orders with the same base id
*
MAX.LIST = 500
START.LIST = 1
WO.GRD.LIST = ''
WO.GRD.IDS = ''
WO.BASE = FIELD(WO_ID,'.',1)
CALL GUI.SEARCH2 ("WO","WO.BASE",'!':WO.BASE,"@ID","WO_PARTNBR WO_QTY_TO_MFG WO_DUE_DATE WO_STATUS",MAX.LIST,START.LIST,WO.GRD.LIST,WO.GRD.IDS,WO.GRD.CT,EMSG)
IF WO.GRD.CT > 0 THEN
   *
   * NOW INSERT INTO GRID
   *
   CALL ATGUISETPROPS(GUIAPP,GUIFRM,"GRDWOREL",GPVALUE,WO.GRD.LIST,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   *
   * RESET PREVIOUSLY SELECTED GRID ROW?
   IF GRDWO.SELECTED > 0 THEN
      CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDWOREL",GPBACKCOLOR,"",GRDWO.SELECTED,CLRWINDOWBACKGROUND,GUIERRORS,GUISTATE)
   END
   *
   * AND SET ROW ONE TO SELECTED
   GRDWO.SELECTED = 1
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"GRDWOREL",GPBACKCOLOR,"",GRDWO.SELECTED,CLRGRAY,GUIERRORS,GUISTATE)
   *
   * AND DISPLAY THE SELECTED WORK ORDERS DATA IN WOFRM
   *
   WO_ID = WO.GRD.IDS<1,1>
   GOSUB WO.GET
   IF NOT(WO.GET.OK) THEN
      WO_ID = ''
   END
   GOSUB LOAD.WO.TREE.CTRLS
   *
   *
   *   DISABLE FRMWO AND ENABLE FRMASSOCIATIONS
   *
   CTRLIDS = "FRMWO"
   PROPS   = GPENABLED
   VALUES  = 0
   *
   CTRLIDS<2> = "FRMASSOCIATIONS"
   PROPS<2>   = GPENABLED
   VALUES<2>  = 1
   *
   CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END ELSE
   PRMPT = "No Work Orders Found With WO.BASE = ":WO.BASE
   CAPTION = "Work Order Tree"
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
*
RETURN
*****************************************************************************************
WORK.ORDER.RELEASE.INIT:
*
* RETURNS WO.REL.INIT.OK   T/F
*
* INIT ALL THE VARIABLES USED BY WO.RELEASE
REL_WO_ID    = ''
REL_PN    = ''
REL_PN_REC = ''
REL_ENG_ID = ''
REL_QTY    = ''
REL_DATE   = ''
REL_SCH_TYPE = ''
WO.REL.INIT.OK = @TRUE
*
*
*  START OUT WITH  FRMWO AND FRMASSOCIATIONS DISABLED
*
CTRLIDS = "FRMWO"
PROPS   = GPENABLED
VALUES  = 0
*
CTRLIDS<2> = "FRMASSOCIATIONS"
PROPS<2>   = GPENABLED
VALUES<2>  = 0
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
* SEE WHAT USER WANTS TO DO.......
* REMEBER THIS ROUTE CAN BE CALLED PRIOR TO THE EVENT LOOP.  BE CAREFUL OF CHANGES!
*
ACTION.TO.PROCESS = CALLER_ACTION  ;* TEMP ASSIGNMENT HERE TO ALLOW ACTION TO BE CHANGED BY THE FOLLOWING CODE THEN RE EVALUATE (KEEPING ORIGINAL CALLER VALUE)
PROCESS.ACTION: *

BEGIN CASE
      * IF CALLER_ACTION = WO_CREATE
      * CALLER_PN_ID PART NUMBER TO CREATE WORK ORDER (CALLER_WO_ID IS ASSUMED TO BE NULL)
      *
      * WO_CREATE IS ASSUMED TO BE USED BY OE.DIALOG ONLY!!
      *
   CASE ACTION.TO.PROCESS = WO_CREATE
      IF CALLER_PN_ID = '' THEN
         *CALLED TO CREATE WITH NO PART NUMBER, REPORT ERROR
         LOG.OPTS  = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG =  "Called to create Work Order but no part number passed"
         CALL LOG.ERROR(LOG.OPTS,"WO.TREE.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         WO.REL.INIT.OK = @FALSE
         *
      END ELSE
         * POP ENG ID LIST, PART NUMBER AND DISABLE TXT2PN (DO NOT ALLOW USER TO CHANGE PART NUMBER)
         CALL WRT.LSTRTLIST.UPDATE(CALLER_PN_ID,ENG.LIST,CALLER_PN_REC,"LSTRTLIST",GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
         *
         CTRLIDS = "TXT2PN"
         PROPS   = GPVALUE
         VALUES  = CALLER_PN_ID
         *
         CTRLIDS<2> = "LBLDESCV"
         PROPS<2>   = GPVALUE
         VALUES<2>  = CALLER_PN_REC<PT_DESC>
         *
         CTRLIDS<3> = "LBLDRAWV"
         PROPS<3>   = GPVALUE
         VALUES<3>  = CALLER_PN_REC<PT_DRAWING>
         *
         CTRLIDS<4> = "TXT2PN"
         PROPS<4>   = GPENABLED
         VALUES<4>  = 0
         *
         IF CALLER_PN_REC<PT_DFLT_ENG_ID> # '' THEN
            CTRLIDS<5> = "LSTRTLIST"
            PROPS<5>   = GPVALUE
            VALUES<5>  = CALLER_PN_REC<PT_DFLT_ENG_ID>
            REL_ENG_ID =  CALLER_PN_REC<PT_DFLT_ENG_ID>
         END
         *
         CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         *
         PN_ID = CALLER_PN_ID
         REL_PN = CALLER_PN_ID
         REL_PN_REC = CALLER_PN_REC

         *
         * GET WORK ORDER NUMBER
         *
         CALLER.BASE = CALLER_OC_ID
         CONVERT '*' TO 'S' IN CALLER.BASE
         *
         * DISPLAY WO ASSOCIATIONS (IF ANY)
         *
         MAX.LIST = 500
         START.LIST = 1
         WO.GRD.LIST = ''
         WO.GRD.IDS = ''
         *
         CALL GUI.SEARCH2 ("WO","WO.BASE",'!':CALLER.BASE,"@ID","WO_PARTNBR WO_QTY_TO_MFG WO_DUE_DATE WO_STATUS",MAX.LIST,START.LIST,WO.GRD.LIST,WO.GRD.IDS,WO.GRD.CT,EMSG)
         IF WO.GRD.CT > 0 THEN
            *
            * NOW INSERT INTO GRID
            *
            CALL ATGUISETPROPS(GUIAPP,GUIFRM,"GRDWOREL",GPVALUE,WO.GRD.LIST,GUIERRORS,GUISTATE)
            IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         END
         *
         CALLER.LEG = '0'
         CALLER.RELEASE = '1'
         CALLER.SPLIT   = '0'
         *
         CALL GET.WO.NBR.DIALOG(WO_ID,"NEW",CALLER.BASE,CALLER.LEG,CALLER.RELEASE,CALLER.SPLIT,GUIERRORS,GUISTATE)
         **
         BEGIN CASE
            CASE WO_ID = ''
               *
               * USER DID NOT ENTER VALID WORK ORDER NUMBER, LET CALLER KNOW
               WO.REL.INIT.OK = @FALSE
            CASE CALLER.BASE NE FIELD(WO_ID,'.',1)
               *
               * USER CHANGED BASE ID ON RELEASE FROM SALES, THIS IS NOT ALLOWED!
               *
               PRMPT = "Entered Work Order: ":WO_ID:" Does Not Mactch Base Id = ":CALLER.BASE:", Retry"
               CAPTION = "Work Order Tree"
               STYLE   = 2  ;* !
               BUTTONS = 0  ;* ok only
               HELPID = ""
               CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
               GOTO PROCESS.ACTION
            CASE 1
               *  ENABLE: WORK ORDER RELEASE FRAME
               REL_WO_ID = WO_ID   ;* SAVE USER SPECIFIED WORK ORDER ID
               *
               CTRLIDS = "FRMWO"
               PROPS   = GPENABLED
               VALUES  = 1
               *
               CTRLIDS<2> = "TXTWO"
               PROPS<2>   = GPVALUE
               VALUES<2>  = WO_ID
               *
               CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
               IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         END CASE

      END
      *
   CASE ACTION.TO.PROCESS = WO_MODIFY
      *
      * NOTE ACTUAL MODIFY ACTION TAKES PLACE WITH SELECTION ON ASSOCIATIONS GRID (GRDWOREL) AND MODIFY CLICK
      *
      * IF CALLER_ACTION = WO_MODIFY
      * CALLER_WO_ID WORK ORDER TO MAINTAIN (CALLER_PN_ID &  CALLER_OC_ID IS ASSUMED TO BE NULL, FRMWO IS left disabled!)
      IF CALLER_WO_ID = '' THEN
         *CALLED TO MODIFY WITH NO WORK ORDER NUMBER, REPORT ERROR
         LOG.OPTS  = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG =  "Called to Modify Work Order but no Work Order Passed"
         CALL LOG.ERROR(LOG.OPTS,"WO.TREE.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         WO.REL.INIT.OK = @FALSE
      END ELSE
         WO_ID = CALLER_WO_ID
         GOSUB WO.GET
         BEGIN CASE
            CASE WO_REC = ''
               * BAD REPORT
               LOG.OPTS  = "DISPLAY"
               ERROR_NBR = ERR_SYS
               ERROR_MSG =  "Invalid To Work Order Id Passed: ":CALLER_WO_ID
               CALL LOG.ERROR(LOG.OPTS,"WO.TREE.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
               * AND RETURN TO CALLER
               WO.REL.INIT.OK = @FALSE
            CASE NOT(WO.GET.OK)
               * COULD NOT GET WORK ORDER (BUSY?) RETURN TO CALLER WITH BAD STATUS
               WO.REL.INIT.OK = @FALSE
            CASE 1
               *
               **** POPULATE WORK ORDER INFORMATION AND ASSOCIATION GRIND
               *
               GOSUB LOAD.FRMASSOCIATIONS
               *
         END CASE
      END
      **
   CASE ACTION.TO.PROCESS = WO_PROMPT
      *
      * GET WORK ORDER NUMBER
      *
      CALLER.BASE = ''
      CALLER.LEG = '0'
      CALLER.RELEASE = '1'
      CALLER.SPLIT   = '0'
      *
      CALL GET.WO.NBR.DIALOG(WO_ID,"ANY",CALLER.BASE,CALLER.LEG,CALLER.RELEASE,CALLER.SPLIT,GUIERRORS,GUISTATE)
      IF WO_ID = '' THEN
         *
         * USER DID NOT ENTER VALID WORK ORDER NUMBER, LET CALLER KNOW
         WO.REL.INIT.OK = @FALSE
      END ELSE
         *  IF WORK ORDER ON FILE THEN
         *   RESET CALLER_ACTION TO WO_MODIFY AND JUMP UP TO BEGINNING OF CASE STATEMENT
         CALL GET.RECORD("WO",C.WO,WO_ID,GWO_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
         IF GWO_REC # '' THEN
            ACTION.TO.PROCESS = WO_MODIFY
            CALLER_WO_ID = WO_ID
            GOTO PROCESS.ACTION
         END ELSE
            *
            * THIS IS AN ATTEMPT TO RELEASE A NEW BASE WORK ORDER, DOUBLE CHECK LEG = 0 RELEASE = 1 SPLIT = 0
            *
            TEST.WO = FIELD(WO_ID,'.',1)
            TEST.WO = TEST.WO:'.0.1.0'
            IF WO_ID = TEST.WO THEN
               REL_WO_ID = WO_ID   ;* SAVE USER SPECIFIED WORK ORDER ID
               *  ENABLE: WORK ORDER RELEASE FRAMW FRMWO
               CTRLIDS = "FRMWO"
               PROPS   = GPENABLED
               VALUES  = 1
               *
               CTRLIDS<2> = "TXTWO"
               PROPS<2>   = GPVALUE
               VALUES<2>  = WO_ID
               *
               CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
               IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
            END ELSE
               PRMPT = "Work Order Id:":WO_ID:" Not of Correct Format for Initial Release (must be base.0.1.0)"
               CAPTION = "Work Order Tree"
               STYLE   = 2  ;* !
               BUTTONS = 0  ;* ok only
               HELPID = ""
               CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
               GOTO PROCESS.ACTION
            END
         END
      END
      *
   CASE 1  ;* CALLED WITH INVALID ACTION REQUEST
      * BAD REPORT
      LOG.OPTS  = "DISPLAY"
      ERROR_NBR = ERR_SYS
      ERROR_MSG =  "Invalid Caller Action Passed: ":ACTION.TO.PROCESS
      CALL LOG.ERROR(LOG.OPTS,"WO.TREE.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      * AND RETURN BAD STATUS TO CALLER
      WO.REL.INIT.OK = @FALSE
END CASE
*
* IF CALLER PASSED AN ORDER TO ASSOCIATE WITH, DISPLAY IT
IF CALLER_OC_ID # '' THEN
   CALL ATGUISETPROP(GUIAPP,GUIFRM,"LBLASSOCV",GPVALUE,"","",CALLER_OC_ID,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
END


RETURN
*
END
