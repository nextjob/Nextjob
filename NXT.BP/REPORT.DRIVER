SUBROUTINE REPORT.DRIVER(REPORT.NAME,SORT.CLAUSE,SELECT.CLAUSE,DISPLAY.CLAUSE,HEADING.STR,DATE.CLAUSE,FROM.FLAG,TO.FLAG,OPTIONS,RD.RESPONSE,GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: REPORT.DRIVER
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2009
* UPDATED:
*
* MAINTENANCE RECORD:
* 11/20/14 - WRITE REPORTS TO QMSYS TEMP DIRECTORY THEN TRANSFER TO USERS MY DOCUMENTS FOLDER
*
* EQUATE:
*
*
* VARIABLES:
* REPORT.NAME    - TEXT TO DISPLAY ON TITLE BAR
* SORT.CLAUSE    - specifies the order in which records are displayed
* SELECT.CLAUSE  - specifies criteria governing which records are processed (with keyword) may be null for none.
* DISPLAY.CLAUSE - specifies which files are included (from file's dictionary)
* HEADING.STR    - Heading string for printed reports
* DATE.CLAUSE    - FIELD NAME OF OPTIONAL DATE SELECTION CRITERIA
* FROM.FLAG      - T/F PROMPT FOR FROM DATE
* TO.FLAG        - T/F PROMPT FOR TO DATE
* OPTIONS<1>     - PRINTER UNIT
* OPTIONS<2>  obs   - SPREADSHEET FILE PATH (ACTUAL DIRECTORY PATH ON SERVER) - obs write to use my documents
* OPTIONS<3>  obs    - SPREADSHEET FILE PATH (SHARE PATH AS DEFINED BY SERVER) - obs write to use my documents
* RD.RESPONSE    - RESPONSE TEXT TO CALLER - ?
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* Generic Dialog to Create Report
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
*
$INCLUDE SYSCOM KEYS.H
*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "REPORT.DRIVER"
GUIERRORS = ''
GUIAPP = "REPORT.DRIVER"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "FORM1"
*
* INIT REPORT VARIABLES
CHK.PRINT  = @FALSE ;* PRINT THE REPORT
CHK.SSHEET = @TRUE  ;* SPREADSHEET REPORT
FROM.DATE = ''
TO.DATE = ''
SELECTION.DATA = ''
GET_REC_MSG_LIST = ''
*
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'REPORT.DRIVER','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'REPORT.DRIVER' ELSE
   CALL ATGUIERROR(3,'REPORT.DRIVER','',0,GRFATAL,"'REPORT.DRIVER' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,"NETWORK_PATH",NETWORK_PATH_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
REPORT.SRVR.TEMP.DIR = OCONV(NETWORK_PATH_REC<SYS_SERVER_REPORT_PATH >,"MCU")
REPORT.SHARE.TEMP.DIR = OCONV(NETWORK_PATH_REC<SYS_SHARE_REPORT_PATH >,"MCU")

*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('REPORT.DRIVER','FORM1','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*
* BASED ON CALLER DATA, PAINT FORM WITH REPORT SPECIFICS
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"",GPCAPTION,0,0,REPORT.NAME,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
IF SELECT.CLAUSE NE '' THEN     ;* DO WE NEED TO ACTIVATE THE SELECT TEXT BOX?
   CTRLIDS<-1> = "LBLSELECT"
   PROPS<-1>   = GPENABLED
   VALUES<-1>  = 1
   *
   CTRLIDS<-1> = "LBLSELECT"
   PROPS<-1>   = GPVALUE
   VALUES<-1>  = SELECT.CLAUSE
   *
   CTRLIDS<-1> = "TXTSELECT"
   PROPS<-1>   = GPENABLED
   VALUES<-1>  = 1
END
*
IF FROM.FLAG THEN     ;* DO WE NEED TO ACTIVATE THE FROM DATE?
   CTRLIDS<-1> = "LBLFROMDATE"
   PROPS<-1>   = GPENABLED
   VALUES<-1>  = 1
   *
   CTRLIDS<-1> = "TXTFROMDATE"
   PROPS<-1>   = GPENABLED
   VALUES<-1>  = 1
END
*
IF TO.FLAG THEN     ;* DO WE NEED TO ACTIVATE THE FROM DATE?
   CTRLIDS<-1> = "LBLTODATE"
   PROPS<-1>   = GPENABLED
   VALUES<-1>  = 1
   *
   CTRLIDS<-1> = "TXTTODATE"
   PROPS<-1>   = GPENABLED
   VALUES<-1>  = 1
END
*
IF OPTIONS<1> = '' THEN    ;* DO WE HAVE A PRINTER UNIT?
   PRINT.UNIT = 0
END ELSE
   PRINT.UNIT = OPTIONS<1>
   IF NOT(NUM(PRINT.UNIT)) THEN
      PRINT.UNIT = 0
   END
END
CTRLIDS<-1> = "LBLPRINTUNIT"
PROPS<-1>   = GPVALUE
VALUES<-1>  = PRINT.UNIT
*
* DISPLAY THE SPREADSHEET FILE PATH
**
*SHARE.PATH  = OPTIONS<3>:"\":REPORT.NAME:'.CSV'
*REPORT.PATH = OPTIONS<2>:"\":REPORT.NAME:'.CSV'
*CTRLIDS<-1> = "LBLSSPATH"
*PROPS<-1>   = GPVALUE
*VALUES<-1>  = SHARE.PATH
*
*  POPULATE THE FORM WITH THE LABEL DESRIPTIONS
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RD.RESPONSE = ''  ;* INIT RESPONSE TEXT TO NOTHING AS IN WE HAVE DONE NOTHING
*
*-->END GUI STARTUP<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='REPORT.DRIVER'
         BEGIN CASE
            CASE GUIFRM='FORM1'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.REPORT.DRIVER.FORM1.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCANCEL'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.REPORT.DRIVER.FORM1.BTNCANCEL.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNCREATE'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.REPORT.DRIVER.FORM1.BTNCREATE.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='OPTPRINT'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.REPORT.DRIVER.FORM1.OPTPRINT.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTFROMDATE'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.REPORT.DRIVER.FORM1.TXTFROMDATE.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTSELECT'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.REPORT.DRIVER.FORM1.TXTSELECT.VALIDATE;GUIEVT=0
                     END CASE
                  CASE GUICTL='TXTTODATE'
                     BEGIN CASE
                        CASE GUIEVT=GEVALIDATE
                           GOSUB GUI.REPORT.DRIVER.FORM1.TXTTODATE.VALIDATE;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.REPORT.DRIVER.FORM1.CLOSE: *
*
* report back to user report status
*
IF RD.RESPONSE = 'OK' THEN
   PRMPT = REPORT.NAME : " Processed"
END ELSE
   PRMPT = REPORT.NAME : " Cancelled"
END
*
CAPTION = "Reports"
STYLE   = 0  ;* no icon
BUTTONS = 0  ;* ok
HELPID = ""
CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)

* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.REPORT.DRIVER.FORM1.BTNCANCEL.CLICK: *
GOSUB GUI.REPORT.DRIVER.FORM1.CLOSE;GUIEVT=0
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.REPORT.DRIVER.FORM1.BTNCREATE.CLICK: *
*
* TEST FOR ALL ENTRIES COMPLETED
*
EMSG = ''
BEGIN CASE
      *
   CASE SELECT.CLAUSE NE '' AND  SELECTION.DATA = ''
      EMSG = "Missing Required Selection Data"
      *
   CASE FROM.FLAG AND FROM.DATE = ''
      EMSG = "Missing Required From Date"
      *
   CASE TO.FLAG AND TO.DATE = ''
      EMSG = "Missing Required To Date"
      *
END CASE
*
* MISSING OR INVALID USER ENTRIES FOR REPORT?
*
IF EMSG NE '' THEN
   PRMPT = EMSG : ", Please Correct "
   CAPTION = REPORT.NAME
   STYLE   = 2  ;* !
   BUTTONS = 0  ;* ok only
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
   *
   * SETUP SORT / SELECT PART OF SENTANCE
   * SELECT.CLAUSE,SORT.CLAUSE,DISPLAY.CLAUSE,HEADING.STR
   *
   IF SORT.CLAUSE # '' THEN
      STMT = SORT.CLAUSE
   END
   *
   * IF THERE IS SELECTION CRITERIA, ADD IT IN
   *
   IF SELECT.CLAUSE THEN
      STMT = STMT :' ': SELECT.CLAUSE : '"' : SELECTION.DATA : '"'
   END
   *
   * IF THERE IS DATE CRITERIA, ADD IT IN
   *
   IF DATE.CLAUSE NE '' THEN
      IF SELECT.CLAUSE THEN
         STMT = STMT : ' AND  '
      END
      BEGIN CASE
         CASE TO.FLAG AND FROM.FLAG
            STMT := ' WITH ':DATE.CLAUSE:' GE "':FROM.DATE:'"  AND WITH ':DATE.CLAUSE:' LE "':TO.DATE:'"'
         CASE TO.FLAG
            STMT := ' WITH ':DATE.CLAUSE:' LE "':TO.DATE:'"'
         CASE FROM.FLAG
            STMT := ' WITH ':DATE.CLAUSE:' GE "':FROM.DATE:'"'
      END CASE
   END

   *
   * ADD IN DIPLAY CLAUSE
   *
   STMT := ' ':DISPLAY.CLAUSE:' '
   *
   * PRINTED REPORT?
   *
   IF CHK.PRINT THEN
      *
      * IF THERE IS A HEADING TEXT, ADD IT IN
      *
      IF HEADING.STR NE '' THEN
         STMT := ' HEADING "':HEADING.STR:'"'
      END
      *
      * SET THE PRINTER
      *
      STMT := ' ID-SUPP LPTR ':PRINT.UNIT
      *
      * NOW KICK IT OFF
      *
      EXECUTE STMT CAPTURING DMMY
      *
      RD.RESPONSE = 'OK'
      *
   END ELSE
      *
      * SPREADSHEET REPORT
      *
      * create temp file to recieve report
      *
      * REPORT.SRVR.TEMP.DIR = OCONV(NETWORK_PATH_REC<SYS_SERVER_REPORT_PATH >,"MCU")
      * REPORT.SHARE.TEMP.DIR = OCONV(NETWORK_PATH_REC<SYS_SHARE_REPORT_PATH >,"MCU")
      CALL SHARE.FILE.PATH.CALC(REPORT.SHARE.TEMP.DIR,NETWORK_PATH_REC,SHARE.TEMP.DIR,'EXPAND')
      *
      TEMP.DIR = REPORT.SRVR.TEMP.DIR
      *
      TEMP.FILE= "_":SYSTEM(19)   ;* using QM TEMP FILE, FILE NAME REQUIRES "_" PREFIX TO PREVENT CONFLICT WITH QM SYS TEMP FILE NAMES
      OPENPATH TEMP.DIR TO TEMP.DIR.FV THEN

         REPORT.PATH = TEMP.DIR:@DS:TEMP.FILE
         SHARE.REPORT.PATH = SHARE.TEMP.DIR:@DS:TEMP.FILE
         STMT := ' ID-SUPP CSV TO ':REPORT.PATH: ' NO.QUERY'
         *
         * NOW KICK IT OFF
         *
    ** DEBUG
         EXECUTE STMT TRAPPING ABORTS CAPTURING DMMY
         IF @ABORT.CODE = 0 THEN
            *
            RD.RESPONSE = 'OK'

            *
            *
            * TRANSFER TO USER MY DOCUMENTS
            *
            CALL ATGETDOCPATH(MYDOCUMENTS_PATH)
            COPY_TO_FILE_LOC = MYDOCUMENTS_PATH:@DS:REPORT.NAME:'.CSV'
            CALL GUI.FILE.COPY(SHARE.REPORT.PATH,COPY_TO_FILE_LOC,STATUS)
            IF STATUS = '' THEN
               *
               * CALL UP REPORT
               *
               CRT ESC:STX:"<":COPY_TO_FILE_LOC
            END ELSE
               PRMPT = "Unable to copy Report to MY DOCUMENTS, reason ":STATUS
               CAPTION = PROG_ID
               STYLE   = 2  ;* !
               BUTTONS = 0  ;* ok
               HELPID = ""
               CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            END
            *
            * GET RID OF THE FILES STORED IN THE TEMP DIR
            *
            DELETE TEMP.DIR.FV, TEMP.FILE
            CLOSE TEMP.DIR.FV
            *
         END ELSE
            *
            * ERROR IN CSV CREATION
            *
            IF @ABORT.CODE = 3 THEN
               PRMPT = "Error in Report Creation: ":@ABORT.CODE:" ":REPORT.NAME:" in use?"
            END ELSE
               PRMPT = "Error in Report Creation: ":@ABORT.CODE
            END
            CAPTION = REPORT.NAME
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok only
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         END
      END ELSE
         *
         * CANNOT OPEN TEMP DIRECTORY
         *
         LOG.OPTS  = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG =  "Unable to open QM Temp Directory"
         CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      END
   END
   *
   * RETURN TO CALLER
   *
   GOSUB GUI.REPORT.DRIVER.FORM1.CLOSE;GUIEVT=0
   *
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.REPORT.DRIVER.FORM1.OPTPRINT.VALIDATE: *
OPTION.VALUE    = GUIARGS<2>
BEGIN CASE
   CASE OPTION.VALUE = 1
      CHK.PRINT  = @TRUE ;* PRINT THE REPORT
      CHK.SSHEET = @FALSE ;* SPREADSHEET REPORT
   CASE OPTION.VALUE = 2
      CHK.PRINT  = @FALSE ;* PRINT THE REPORT
      CHK.SSHEET = @TRUE ;* SPREADSHEET REPORT
END CASE

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.REPORT.DRIVER.FORM1.TXTFROMDATE.VALIDATE: *
FROM.DATE =  GUIARGS<2>
FROM.IDT = ICONV(FROM.DATE,"D")
FROM.DATE = OCONV(FROM.IDT,"D2/")
IF TO.FLAG THEN
   IF TO.DATE NE '' THEN
      TO.IDT = ICONV(TO.DATE,"D")
      IF FROM.IDT > TO.IDT THEN          ;* FROM DATE CANNOT BE later than TO DATE, ERROR!
         PRMPT = "Report From Date Cannot Be Later Than Report To Date, Please Correct "
         CAPTION = REPORT.NAME
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         FROM.DATE = ''
      END
   END
END
*
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.REPORT.DRIVER.FORM1.TXTSELECT.VALIDATE: *
SELECTION.DATA =  GUIARGS<2>
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.REPORT.DRIVER.FORM1.TXTTODATE.VALIDATE: *
TO.DATE =  GUIARGS<2>
TO.IDT = ICONV(TO.DATE,"D")
TO.DATE = OCONV(TO.IDT,"D2/")
IF FROM.FLAG THEN
   IF FROM.DATE NE '' THEN
      FROM.IDT = ICONV(FROM.DATE,"D")
      IF TO.IDT < FROM.IDT THEN          ;* TO DATE CANNOT BE BEFORE FROM DATE, ERROR!
         PRMPT = "Report To Date Cannot Be Before Report From Date, Please Correct "
         CAPTION = REPORT.NAME
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         TO.DATE = ''
      END
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
*
END
