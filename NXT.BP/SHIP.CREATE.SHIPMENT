SUBROUTINE SHIP.CREATE.SHIPMENT(SA_REC,CT_ID,CT_REC,DEL.QTY,NEXT.DEL.IDX,SCHD.NOTES,OC_ID,SA_ID,OP_REC,OC_REC,CM_REC,SHIPTO_REC)
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: SHIP.CREATE.SHIPMENT
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2007
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
* ON ENTRY
* DEL.QTY - QTY TO SHIP OR ZERO FOR PRE-CUT PAPER WORK (CREATE PRIOR TO ACTUAL SHIPMENT)
* NEXT.DEL.IDX - NEXT NON SHIPPED DELIVERY
* OC_ID   - ORDER CHILD ID
* SA_ID   - CALLER PROVIDED SALES RECORD ID
* OP_REC  - ORDER PARENT RECORD
* OC_REC  - ORDER CHILD RECORD
* CM_REC  - CUSTOMER RECORD
* SHIPTO_REC - CUSTOMER SHIPTO RECORD
*
* ON EXIT:
* SA_REC - SALES RECORD CREATED AND WRITTEN
* CT_ID  - CERT RECORD KEY ASSIGNED
* CT_REC - CERT RECORD CREATED AND WRITTEN
* OC_REC - ORDER CHILD UPDATED AND WRITTEN
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* PROCESS CREATE SHIPMENT REQUEST
* FILL IN THE SALES RECORD,
* WRITE IT OUT
* UPDATE ORDER CHILD
* WRITE IT OUT
* CREATE CERT RECORD
* WRITE IT OUT
*
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES CUSTOMERS.H
$INCLUDE NXT.INCLUDES SHIP_TO.H
$INCLUDE NXT.INCLUDES ORDER_CHILD.H
$INCLUDE NXT.INCLUDES ORDER_PARENT.H
$INCLUDE NXT.INCLUDES SALES.H
$INCLUDE NXT.INCLUDES PARTS.H
$INCLUDE NXT.INCLUDES CERTS.H
*
PROG_ID = 'SHIP.CREATE.SHIPMENT'
*
* GET CERT CODES FROM VALIDATION FILE
GET_REC_MSG_LIST = ''     ;* GENERIC GET RECORD ERROR MESSAGE LIST
CALL GET.RECORD("VALIDTAION_FILE",C.VALIDATION_FILE,"CERT.DESC",CERT.DESC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
CALL GET.RECORD("VALIDTAION_FILE",C.VALIDATION_FILE,"SALES.TAX",SALES.TAX.REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
*
* APPLY DEL.QTY OVER SCHD ITEMS ON ORDER_CHILD RECORD
*
APPLIED.SCHD.LIST = ''
APPLIED.QTY.LIST = ''
APPLIED.DUE.DATE.LIST = ''
APPLIED.DEL.DATE.LIST = ''
APPLIED.PRICE.LIST = ''
APPLIED.LOT.LIST  = ''
* FIRST CALCULATE THE FIRST DUE DATE
* USE THE FIRST SCHEDULE WITH  NOTHING APPLIED
* SET BY CALC.BAL.DUE -> NEXT.DEL.IDX
*
* DEL.QTY = QTY USER ENTERED TO SHIP
* QTY.TO.APPLY = BALANCE TO APPLY TO SCHD ITEMS
* QTY.APPLIED  = QTY TO APPLY AGAINST CURRENT SCHD ITEM POINTED TO BY SHIP.IDX
*
* CALCULATE SCHD.COUNT - NUMBER OF SCHEDULE ITEMS ON THIS CHILD RECORD
SCHD.COUNT = DCOUNT(OC_REC<OC_SCHD_ID>,@VM)
CT_ID = "C":SA_ID"8'0'R"   ;* CREATE CERT ID
*
* IF DEL.QTY > 0 THEN THIS IS AN ACTUAL SHIPMENT, APPLY IT
*
IF DEL.QTY > 0 THEN
  CALL SHIP.APPLY.SHIPMENT(DEL.QTY,SA_ID,CT_ID,NEXT.DEL.IDX,OC_REC,APPLIED.SCHD.LIST,APPLIED.QTY.LIST,APPLIED.DUE.DATE.LIST)
END ELSE
  *
  * PRE SHIPMENT, SAVE SA_ID BUT DO NOT APPLY A SHIPPED QTY (THERE IS NONE)
  OC_REC<OC_PACK_ID,NEXT.DEL.IDX>  = SA_ID
  OC_REC<OC_CERT_ID,NEXT.DEL.IDX>  = CT_ID
END
*
* DO WE NEED TO CALCULATE SALES TAX FOR THIS ITEM?
*
*
IF OC_REC<OC_TAX_FLAG> THEN
  GOSUB CREATE.TAX.EC
END
CALL WRITE.RECORD(OC_ID,OC_REC,C.ORDER_CHILD,@TRUE,ERROR_STATUS)
*
* CREATE SA RECORD
*
SA_REC = ''
SA_REC<SA_ORDER_ID> = OC_ID
SA_REC<SA_CUST_ID>  = OP_REC<OP_CUST>
SA_REC<SA_SHIP_TO>  = OP_REC<OP_SHIPTO>
SA_REC<SA_PO_NBR>  = OP_REC<OP_PO_NBR>
SA_REC<SA_BUYER>  = OP_REC<OP_BUYER>
SA_REC<SA_SHIP_VIA>  = OP_REC<OP_SHIP_VIA>
*
SA_REC<SA_NAME>   = CM_REC<CM_NAME>
SA_REC<SA_ADDR>   = CM_REC<CM_ADDR>
SA_REC<SA_ADDR2>  = CM_REC<CM_ADDR2>
SA_REC<SA_CITY>   = CM_REC<CM_CITY>
SA_REC<SA_STATE>  = CM_REC<CM_STATE>
SA_REC<SA_ZIP>    = CM_REC<CM_ZIP>
SA_REC<SA_CO>     = CM_REC<CM_COUNTRY>
*
SA_REC<SA_SHIP_NAME>  = SHIPTO_REC<CS_NAME>
SA_REC<SA_SHIP_ADDR>  = SHIPTO_REC<CS_ADDR>
SA_REC<SA_SHIP_ADDR2> = SHIPTO_REC<CS_ADDR2>
SA_REC<SA_SHIP_CITY>  = SHIPTO_REC<CS_CITY>
SA_REC<SA_SHIP_STATE> = SHIPTO_REC<CS_STATE>
SA_REC<SA_SHIP_ZIP>   = SHIPTO_REC<CS_ZIP>
SA_REC<SA_SHIP_CO>    = SHIPTO_REC<CS_COUNTRY>
*
SA_REC<SA_PART_NBR> = OC_REC<OC_PART_NBR>
SA_REC<SA_DRAWING>  = OC_REC<OC_DRAWING>
SA_REC<SA_PART_DESC> = OC_REC<OC_PART_DESC>
SA_REC<SA_REV>       = OC_REC<OC_REV>
*
SA_REC<SA_SCHD_ID>  = APPLIED.SCHD.LIST
SA_REC<SA_DUE_DATE> = APPLIED.DUE.DATE.LIST
SA_REC<SA_DUE_QTY>  = APPLIED.QTY.LIST
SA_REC<SA_DEL_DATE> = DATE()
SA_REC<SA_DEL_QTY>  = DEL.QTY
SA_REC<SA_PRICE_EA> =  OC_REC<OC_PRICE_EA>
SA_REC<SA_LOT_FLAG> =  OC_REC<OC_LOT_FLAG>
*
SA_REC<SA_PACK_NOTES> = SCHD.NOTES
*
SA_REC<SA_PACK_DATE> = DATE()  ;* DATE PACKSLIP CUT
SA_REC<SA_BY_WHOM>   = @LOGNAME
*
* IF WE ARE NOT RUNNING THE AR SYSTEM, MARK SALES RECORD WITH AN INVOICE ID
*
IF NOT(NX_AR_ACTIVE) THEN
  SA_REC<SA_INVOICE_ID> = -1
END
*
SA_REC<SA_SPC> =  OC_REC<OC_SPC>
SA_REC<SA_ORDER_TYPE> =  OP_REC<OP_ORDER_TYPE>
SA_REC<SA_ORDER_CLASS> =  OP_REC<OP_ORDER_CLASS>
SA_REC<SA_GL_TRANS_CD> =  OC_REC<OC_GL_TRANS_CD>
*
CALL WRITE.RECORD(SA_ID,SA_REC,C.SALES,@FALSE,ERROR_STATUS)

*
* CREATE CERT RECORD
*
CT_REC = ''
CT_REC<CT_ORDER_ID> = OC_ID
CT_REC<CT_CUST_ID>  = OP_REC<OP_CUST>
CT_REC<CT_PO_NBR>  = OP_REC<OP_PO_NBR>
*
CT_REC<CT_NAME>   = CM_REC<CM_NAME>
CT_REC<CT_ADDR>   = CM_REC<CM_ADDR>
CT_REC<CT_ADDR2>  = CM_REC<CM_ADDR2>
CT_REC<CT_CITY>   = CM_REC<CM_CITY>
CT_REC<CT_STATE>  = CM_REC<CM_STATE>
CT_REC<CT_ZIP>    = CM_REC<CM_ZIP>
CT_REC<CT_CO>     = CM_REC<CM_COUNTRY>
*
*
CT_REC<CT_PART_NBR> = OC_REC<OC_PART_NBR>
CT_REC<CT_DRAWING>  = OC_REC<OC_DRAWING>
CT_REC<CT_PART_DESC> = OC_REC<OC_PART_DESC>
CT_REC<CT_CM_REF>    = OC_REC<OC_CM_REF>
CT_REC<CT_REV>       = OC_REC<OC_REV>
CT_REC<CT_PACK_ID>   = SA_ID
*
CT_REC<CT_DEL_DATE> = DATE()
CT_REC<CT_DEL_QTY> = DEL.QTY
*
* CONVERT CERT CODE TO DESCRIPTION
* WE SAVE COMPLET CERT DESCRIPTION, NOT JUST CODE BECAUSE MIL SPEC REV COULD CHANGE
* BUT WE WANT CERT TO REFLECT REV OF SPEC AT TIME OF PROCESS
*
CERT.IDS = OC_REC<OC_PROCESS_CERT_CODE>
FOR I = 1 TO DCOUNT(CERT.IDS,@VM)
  CERT.ID = CERT.IDS<1,I>
  IF CERT.ID = "CUSTOM" THEN
    *
    * IF CERT CODE IS CUSTOM, THEN PICK UP THE CORRESPONDING PROCESS DESCRIPTION FIELD AND ADD IT TO THE CERT
    *
    CT_REC<CT_PROCESS_DESC,I> = OC_REC<OC_PROCESS_DESC,I>

  END ELSE
    LOCATE CERT.ID IN CERT.DESC<1,1> SETTING IDX THEN
      CT_REC<CT_PROCESS_DESC,I> = CERT.DESC<2,IDX>
    END ELSE
      CT_REC<CT_PROCESS_DESC,I> = CERT.ID:', Description not on file'
    END
  END
NEXT I
CT_REC<CT_PROCESS_CERT> = OC_REC<OC_PROCESS_CERT>
*

CALL WRITE.RECORD(CT_ID,CT_REC,C.CERTS,@FALSE,ERROR_STATUS)
*
RETURN
************************************************************
* $PAGE$
************************************************************
CREATE.TAX.EC:
*
* ROUTINE ADDS EXTRA CHARGE FOR SALES TAX TO ORDER.
*
EC.IDX = DCOUNT(OC_REC<OC_EC_CODE>,@VM) + 1  ;* NEXT EXTRA CHARGE ON ORDER CHILD
TAX.CODE = OC_REC<OC_TAX_CODE>
CALL NXT.NEXTNBR("SALES",EC_SA_ID,ERROR_STATUS,GUIERRORS,GUISTATE)
*
LOCATE TAX.CODE IN SALES.TAX.REC<1,1> SETTING IDX THEN
  SALES.TAX.DESC  = SALES.TAX.REC<2,IDX>
  TAX.RATE        = SALES.TAX.REC<3,IDX>
  *
  EC.AMT = DEL.QTY * OC_REC<OC_PRICE_EA> * TAX.RATE
  EC.AMT = OCONV(EC.AMT,"MD07")
  *
  OC_REC<OC_EC_CODE,EC.IDX> = NX_DFLT_TAX_EC
  OC_REC<OC_EC_DESC,EC.IDX> = SALES.TAX.DESC
  OC_REC<OC_EC_AMT,EC.IDX>  = EC.AMT
  OC_REC<OC_EC_SALES_ID,EC.IDX> = EC_SA_ID
  CALL SHIP.CREATE.EXTRA.CHARGE(EC_SA_REC,EC.IDX,OC_ID,EC_SA_ID,OP_REC,OC_REC,CM_REC,SHIPTO_REC)
END ELSE
  LOG.OPTS = "DISPLAY"
  ERROR_NBR = ERR_SYS
  ERROR_MSG = OC_ID:' Order child has ref to missing sales tax code ':TAX.CODE:', Tax cannot be calculated!'
  CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
END
RETURN

END
