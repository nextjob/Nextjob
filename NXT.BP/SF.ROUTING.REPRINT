      SUBROUTINE SF.ROUTING.REPRINT(GUIERRORS,GUISTATE)
      !
      **************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
      **************************************************************************
      *
      * MODULE: SF.ROUTING.REPRINT
      * AUTHOR: MAB
      * VERSION: 1.0.0
      * CREATED: 12/00/2012
      * UPDATED:
      *
      * MAINTENANCE RECORD:
      *
      * EQUATE:
      *
      *
      * VARIABLES:
      *
      * FILES:
      *
      *
      * DESIGN DESCRIPTION:
      * REPRINT SHOP FLOOR CUSTOM PROCESS FORM
      *
      !
      ** INCLUDE STANDARD VARIABLE, EQUATES
      *
      $INCLUDE NXT.INCLUDES NXT.COMMON
      $INCLUDE NXT.INCLUDES NXT.EQUATES
      $INCLUDE NXT.INCLUDES NXT.ERR.MSGS
      $INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
      $INCLUDE NXT.INCLUDES CUSTOMERS.H
      $INCLUDE NXT.INCLUDES SHIP_TO.H
      $INCLUDE NXT.INCLUDES ORDER_PARENT.H
      $INCLUDE NXT.INCLUDES ORDER_CHILD.H
      $INCLUDE NXT.INCLUDES PARTS.H
      *
      $INCLUDE GUIBP ATGUIEQUATES
      *
      PROG_ID   = "SF.ROUTING.REPRINT"
      GUIERRORS = ''
      GUIAPP = "SF_RT_PRT"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
      GUIFRM = "SF_RT_PRT"
      *
      GUIERRORS = ''
      * Open the GUI project file
      OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
         CALL ATGUIERROR(3,"SF_RT_PRT",'',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
         RETURN
      END
      * Read the GUI template into TEMPLATE
      READ TEMPLATE FROM GUI.PROJECT.FILE,"SF.ROUTING.REPRINT" ELSE
         CALL ATGUIERROR(3,"SF_RT_PRT",'',0,GRFATAL,"'SF.ROUTING.REPRINT' is not on file.",GUIERRORS)
         RETURN
      END
      *
      *
      ************************************************************
      *
      *
      *-->BEGIN GUI HEADER<--*
      * If GUISTATE is not NULL, assume GUI has been initialized
      IF GUISTATE EQ '' THEN
         CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= 3 THEN RETURN
      END
      * Load the dialog project template
      CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= 3 THEN RETURN
      *-->END GUI HEADER<--*
      *
      ************************************************************
      *
      *
      *-->BEGIN GUI STARTUP<--*
      ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
      * Add your code to load initial values here...
      CALL ATGUISHOW("SF_RT_PRT","SF_RT_PRT",'','',GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= 2 THEN RETURN
      *-->END GUI STARTUP<--*

      *
      * GET THE USER RECORD
      *
      MSG_LIST = ''
      USER_RECORD_ID = "USER*":@LOGNAME
      CALL GET.RECORD("SYSTEM_FILE",C.SYSTEM_FILE,USER_RECORD_ID,USER_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
      IF USER_REC # '' THEN
         IF USER_REC<USER_PRICE_RESTRICTED> THEN
            USER.IS.RESTRICTED = @TRUE
         END ELSE
            USER.IS.RESTRICTED = @FALSE
         END
         *
         IF USER_REC<USER_PROCESS_PRINTER> = '' THEN
            PROCESS.PRINTER = 0  ;* SET TO DEFAULT PRINTER
            LOG.OPTS  = "DISPLAY"
            ERROR_NBR = ERR_SYS
            ERROR_MSG =  "Missing PROCESS_PRINTER from USER record in, SYSTEM_FILE"
            CALL LOG.ERROR(LOG.OPTS,"SF.ROUTING.REPRINT", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         END ELSE
            PROCESS.PRINTER = USER_REC<USER_PROCESS_PRINTER>
         END
         *
         IF USER_REC<USER_LABEL_PRINTER> = '' THEN
            LABEL.PRINTER = 0  ;* SET TO DEFAULT PRINTER
            LOG.OPTS  = "DISPLAY"
            ERROR_NBR = ERR_SYS
            ERROR_MSG =  "Missing LABEL_PRINTER from USER record in, SYSTEM_FILE"
            CALL LOG.ERROR(LOG.OPTS,"SF.ROUTING.REPRINT", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         END ELSE
            LABEL.PRINTER = USER_REC<USER_LABEL_PRINTER>
         END
      END ELSE
         LOG.OPTS  = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG =  "Unknow User: ":@LOGNAME
         CALL LOG.ERROR(LOG.OPTS,"SF.ROUTING.REPRINT", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         GOSUB GUI.SF_RT_PRT.SF_RT_PRT.CLOSE;GUIEVT=0
         RETURN
      END
      *
      GOSUB CLEAR.BUFFERS
      *
      *
      *
      ************************************************************
      *
      *
      *-->BEGIN EVENT LOOP<--*
      GUI.DLG.EXIT = 0
      LOOP
         CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= 2 THEN RETURN
         IF GUIEVT EQ GEQUIT THEN
            GUI.DLG.EXIT = 1
         END ELSE
            GUIAPP=OCONV(GUIAPP,'MCU')
            GUIFRM=OCONV(GUIFRM,'MCU')
            GUICTL=OCONV(GUICTL,'MCU')
            GOSUB GUI.DECODE.EVENT
         END
      UNTIL GUI.DLG.EXIT DO REPEAT
      * Eat final Quit event
      IF GUIEVT <> GEQUIT THEN
         GUI.APP.LIST = ''
         CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
         IF GUI.APP.LIST EQ '' THEN
            * Quit event fired after last GUI object is deleted - discard it
            CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
            * We could call ATGUISHUTDOWN here if we wanted, but there's no
            * harm just leaving the GUI environment initialized, in case we
            * want to use it again...
         END
      END
      *-->END EVENT LOOP<--*
      *
      *
      ************************************************************
      *
      *
      *-->BEGIN GUI TRAILER<--*
      RETURN
      *
GUI.DIALOG.RETURN: *
      * This subroutine is called just before the GUI Dialog app
      * is deleted. Check the state of the ACCEPT variable, and
      * retrieve values from GUI controls and assign to appropriate
      * arguments for return to calling program here...
      IF ACCEPT THEN
         * Add your code here...
      END ELSE
         * Add your code here...
      END
      RETURN
      *-->END GUI TRAILER<--*
      *
      *
      ************************************************************
      *
      *
      *-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
      IF NUM(GUIEVT) THEN
         BEGIN CASE
            CASE GUIAPP='SF_RT_PRT'
               BEGIN CASE
                  CASE GUIFRM='SF_RT_PRT'
                     BEGIN CASE
                        CASE GUICTL=''
                           BEGIN CASE
                              CASE GUIEVT=GECLOSE
                                 GOSUB GUI.SF_RT_PRT.SF_RT_PRT.CLOSE;GUIEVT=0
                           END CASE
                        CASE GUICTL='BTN1FIND'
                           BEGIN CASE
                              CASE GUIEVT=GECLICK
                                 GOSUB GUI.SF_RT_PRT.SF_RT_PRT.BTN1FIND.CLICK;GUIEVT=0
                           END CASE
                        CASE GUICTL='BTNROUTER'
                           BEGIN CASE
                              CASE GUIEVT=GECLICK
                                 GOSUB GUI.SF_RT_PRT.SF_RT_PRT.BTNROUTER.CLICK;GUIEVT=0
                           END CASE
                        CASE GUICTL='LSTITEM'
                           BEGIN CASE
                              CASE GUIEVT=GECLICK
                                 GOSUB GUI.SF_RT_PRT.SF_RT_PRT.LSTITEM.CLICK;GUIEVT=0
                           END CASE
                        CASE GUICTL='TXT1ORDVAL'
                           BEGIN CASE
                              CASE GUIEVT=GEVALIDATE
                                 GOSUB GUI.SF_RT_PRT.SF_RT_PRT.TXT1ORDVAL.VALIDATE;GUIEVT=0
                           END CASE
                     END CASE
               END CASE
         END CASE
         IF GUIEVT THEN
            * Unhandled event - may be dynamic
            GOSUB GUI.DYNAMIC.EVENTS
         END
      END ELSE
         GOSUB GUI.CUSTOM.EVENTS
      END
      RETURN
      *-->END EVENT DECODER<--*
      *
      *
      ************************************************************
      *
      *
      *-->BEGIN EVENT HANDLER<--*
GUI.SF_RT_PRT.SF_RT_PRT.BTN1FIND.CLICK: *
      CALL ORDER.SEARCH(SEARCH_ID,GUIERRORS,GUISTATE)
      IF SEARCH_ID # '' THEN
         *
         * FAKE AN ORDER NUMBER ENTRY
         TEMP_ID = FIELD(SEARCH_ID,'*',1) ;* CONVERT TO ORDER ID (IF NECESSARY)
         GUIARGS<2> = TEMP_ID
         CALL ATGUISETPROP(GUIAPP,GUIFRM,"TXT1ORDVAL",GPVALUE,0,0,TEMP_ID,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
         GOSUB  GUI.SF_RT_PRT.SF_RT_PRT.TXT1ORDVAL.VALIDATE
      END
      RETURN
      *-->END EVENT HANDLER<--*
      *
      *
      ************************************************************
      *
      *
      *-->BEGIN EVENT HANDLER<--*
GUI.SF_RT_PRT.SF_RT_PRT.BTNROUTER.CLICK: *
      IF OC_REC # '' THEN
         *
         CALL CUSTOM.PROCESS.FORM(OC_REC,OC_ID,CM_REC<CM_NAME>,OP_REC<OP_PO_NBR>,OP_REC<OP_ENTER_BY>,OP_REC<OP_DATE>,PROCESS.PRINTER,GUIERRORS,GUISTATE)
         *
         PRMPT = "Process Sheet Sent to Printer"
         CAPTION = "Order Entry"
         STYLE   = 2  ;* !
         BUTTONS = 0  ;* ok only
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      END
      RETURN
      *-->END EVENT HANDLER<--*
      *
      *
      ************************************************************
      *
      *
      *-->BEGIN CLOSE EVENT HANDLER<--*
GUI.SF_RT_PRT.SF_RT_PRT.CLOSE: *
      * Default form close event handler
      CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
      CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
      IF NUM.FORMS = 0 THEN
         GOSUB GUI.DIALOG.RETURN
         CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
         GUI.DLG.EXIT = 1
      END
      RETURN
      *-->END CLOSE EVENT HANDLER<--*
      *
      *
      ************************************************************
      *
      *
      *-->BEGIN EVENT HANDLER<--*
GUI.SF_RT_PRT.SF_RT_PRT.LSTITEM.CLICK: *
      *
      * VALID CHILD ID AT THIS CLICK ROW?
      *
      TEST.ID = CHILD.LIST<1,GUIARGS<1>,1>
      IF TEST.ID # '' THEN
         *
         * new item, do we need to save old item first?
         *
         * VALID CHILD ID AT CLICK ROW?
         TEST.STAT = CHILD.LIST<1,GUIARGS<1>,4>
         IF TEST.STAT # OE_CHILD_DEL THEN
            *
            OC_ID = TEST.ID
            *
            OC_REC      = '' ;* ORDER_CHILD RECORD

            CALL GET.ORDER.CHILD(OC_ID,OC_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
            PN_ID = OC_REC<OC_PART_NBR>
            IF PN_ID # '' THEN
               MSG_LIST = ''
               CALL GET.RECORD("PARTS",C.PARTS,PN_ID,PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
            END ELSE
               PARTS_REC = ''
            END
            LBLITEM = 'Item: ':OC_ID
            LBLPART = 'Part: ':PN_ID:' \ ':OC_REC<OC_PART_DESC>
            *
            GOSUB LOAD.CTRLS
         END

      END
      RETURN
      *-->END EVENT HANDLER<--*
      *
      *
      ************************************************************
      *
      *
      *-->BEGIN EVENT HANDLER<--*
GUI.SF_RT_PRT.SF_RT_PRT.TXT1ORDVAL.VALIDATE: *
      * user entered order number, get it
      IF GUIARGS<2> # '' THEN
         GOSUB CLEAR.BUFFERS
         GOSUB LOAD.CTRLS
         OP_ID = GUIARGS<2>

         *
         CALL GET.ORDER.PARENT(OP_ID,OP_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
         BEGIN CASE
            CASE ERROR_STATUS = ERR_NOF  ;* USER ENTERED NON - EXISTENT ORDER #
               *
               * UNLOCK, REPORT AND EXIT
               RELEASE C.FILE.VAR(C.ORDER_PARENT), OP_ID
               PRMPT = "Order number: ":OP_ID:" is not on file"
               CAPTION = "Order Entry"
               STYLE   = 2  ;* !
               BUTTONS = 0  ;* ok
               HELPID = ""
               CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
            CASE 1
               GOSUB GET.ORDER.DETAIL
               GOSUB LOAD.CTRLS
         END CASE
      END
      RETURN
      *-->END EVENT HANDLER<--*
      *
      *
      ************************************************************
      *
      *
      *-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
      * Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
      * GUICTL and GUIARGS variables are valid and availble for your use.
      RETURN
      *-->END DYNAMIC EVENTS<--*
      *
      *
      ************************************************************
      *
      **-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
      * Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
      * GUICTL and GUIARGS variables are valid and availble for your use.
      RETURN
      *-->END CUSTOM EVENTS<--*
      *
      *
      ************************************************************
      *
      **-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
      GUI.DLG.EXIT = 1
      LOG.OPTS  = "DISPLAY"
      ERROR_NBR = ERR_GUI
      ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
      CALL LOG.ERROR(LOG.OPTS,"SF.ROUTING.REPRINT", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
      *
      RETURN
      *-->END ERROR HANDLER<--*
      *
      *
      ************************************************************
CLEAR.BUFFERS:
      CM_ID       = '' ;* CUSTOMER ID
      CM_REC      = '' ;* CUSTOMER RECORD BUFFER
      SHIPTO_ID   = '' ;* SHIP TO ID
      SHIPTO_REC  = '' ;* SHIP TO RECORD BUFFER
      OP_ID       = '' ;* ORDER PARENT ID
      OP_REC      = '' ;* ORDER_PARENT RECORD
      OC_ID       = '' ;* ORDER_CHILD ID
      OC_REC      = '' ;* ORDER_CHILD RECORD
      PN_ID       = '' ;* PARTS REC ID
      PARTS_REC   = '' ;* PARTS RECORD FOR P/N IN ACTIVE ORDER_CHILD RECORD
      MSG_LIST    = '' ;* ERROR MESSAGE LIST FOR GET ROUTINE SET TO NULL, ROUTINES USE DEFAULT
      *
      CHILD.LIST  = ''  ;* LIST FOR ORDER CHILD SELECTION ON ITEM DETIAL TAB
      LBLCUST     = 'Sold To:'  ;* TEXT TO OUTPUT FOR CUSTOMER LABEL
      LBLSHIPTO   = 'Ship To:'  ;* TEXT TO OUTPUT FOR SHIP TO
      LBLITEM = 'Item: '
      LBLPART = 'Part: '
      *
      RETURN
      ************************************************************
GET.ORDER.DETAIL:
      *
      * GET ORDER CHILD AND OP_ID
      * ASSIGN AND ACCESS CM_ID / CM_REC, SHIPTO_ID / SHIPTO_REC, OC_ID / OC_REC
      * FIND FIRST
      GET.ORDER.DETAIL.OK = @TRUE
      GOSUB LOAD.CHILD.LIST
      OC_ID = FIRST.CHILD.ID
      *
      * IF WE HAVE A VAILD ID, GET FIRST OPEN (NOT COMPLETE) CHILD RECORD
      *
      IF OC_ID # '' THEN

         CALL GET.ORDER.CHILD(OC_ID,OC_REC, @FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
         PN_ID = OC_REC<OC_PART_NBR>
         IF PN_ID # '' THEN
            MSG_LIST = ''
            CALL GET.RECORD("PARTS",C.PARTS,PN_ID,PARTS_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
         END ELSE
            PARTS_REC = ''
         END
         *
         LBLITEM = 'Item: ':OC_ID
         LBLPART = 'Part: ':PN_ID:' \ ':OC_REC<OC_PART_DESC>
      END
      *
      * GET CUSTOMER DATA
      *
      CM_ID  = OP_REC<OP_CUST>
      CALL GET.CUSTOMER(CM_ID,CM_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
      *
      IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH CUST
         LOG.OPTS = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG = OP_ID:' Order has of non-existent customer ':CM_ID
         CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         GET.ORDER.DETAIL.OK = @FALSE
      END ELSE
         LBLCUST = 'Sold To: ':CM_ID:' ':CM_REC<CM_NAME>
      END
      *
      SHIPTO_ID = OP_REC<OP_SHIPTO>
      CALL GET.SHIPTO(SHIPTO_ID,SHIPTO_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
      *
      IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH MISSING SHIP TO
         LOG.OPTS = "DISPLAY"
         ERROR_NBR = ERR_SYS
         ERROR_MSG = OP_ID:' Order has of non-existent customer ship to ':SHIPTO_ID
         CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         GET.ORDER.DETAIL.OK = @FALSE
      END ELSE
         LBLSHIPTO = 'Ship To: ':' ':SHIPTO_REC<CS_NAME>
      END
      *

      RETURN
      ************************************************************
LOAD.CHILD.LIST:
      *
      * CREATE ORDER CHILD LIST AND SET ID TO FIRST NON DELETED RECORD
      *
      FIRST.CHILD.ID = ''
      CHILD.LIST = ''
      *
      CHILD.COUNT = DCOUNT(OP_REC<OP_CHILD>,@VM)
      FOR I = 1 TO CHILD.COUNT
         TEST.CHILD.ID = OP_ID:'*':I
         *
         CALL GET.RECORD("ORDER_CHILD",C.ORDER_CHILD,TEST.CHILD.ID,TEST.CHILD.REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
         IF ERROR_STATUS = ''  THEN
            CHILD.PN = TEST.CHILD.REC<OC_PART_NBR>
            CHILD.DESC = TEST.CHILD.REC<OC_PART_DESC>
            CHILD.STATUS = TEST.CHILD.REC<OC_ITEM_STAT>
            BEGIN CASE
               CASE CHILD.STATUS = "I" OR CHILD.STATUS = ""
                  CHILD.STATUS = OE_CHILD_OPEN
                  IF FIRST.CHILD.ID = '' THEN         ;* SAVE FIRST OPEN CHILD RECORD
                     FIRST.CHILD.ID = TEST.CHILD.ID
                  END
               CASE CHILD.STATUS = "C"
                  CHILD.STATUS = OE_CHILD_CLSD
            END CASE
         END ELSE
            *
            * MISSING CHILD RECORD, ASSUME DELETED
            *
            CHILD.PN = "Record Deleted"
            CHILD.DESC = ""
            CHILD.STATUS = OE_CHILD_DEL
         END

         CHILD.LIST<1,I,1> = TEST.CHILD.ID
         CHILD.LIST<1,I,2> = CHILD.PN
         CHILD.LIST<1,I,3> = CHILD.DESC
         CHILD.LIST<1,I,4> = CHILD.STATUS
      NEXT I
      *
      * IF WE DID NOT FIND AN OPEN CHILD RECORD, ASSIGN FIRST.CHILD.ID TO FIRST CHILD
      IF FIRST.CHILD.ID = "" AND CHILD.LIST<1,1,1> # '' THEN
         FIRST.CHILD.ID = CHILD.LIST<1,1,1>
      END
      RETURN
      ************************************************************
LOAD.CTRLS:
      *
      * routine LOADS controls for Order *
      *
      CTRLIDS = ''
      PROPS   = ''
      VALUES  = ''
      *
      CTRLIDS<-1> = "LBLITEM"
      PROPS<-1>   = GPVALUE
      VALUES<-1>  = LBLITEM
      *
      CTRLIDS<-1> = "LBLPART"
      PROPS<-1>   = GPVALUE
      VALUES<-1>  = LBLPART
      *
      CTRLIDS<-1> = "LBLCUST"
      PROPS<-1>   = GPVALUE
      VALUES<-1>  = LBLCUST
      *
      CTRLIDS<-1> = "LBLSHIPTO"
      PROPS<-1>   = GPVALUE
      VALUES<-1>  = LBLSHIPTO
      *
      CTRLIDS<-1> = "TXT1ORDVAL"
      PROPS<-1>   = GPVALUE
      VALUES<-1>  = OP_ID
      *
      IF CHILD.LIST # '' THEN
         CTRLIDS<-1> = "LSTITEM"
         PROPS<-1>   = GPITEMS
         VALUES<-1>  = CHILD.LIST
      END ELSE
         CTRLIDS<-1> = "LSTITEM"
         PROPS<-1>   = GPITEMS
         VALUES<-1>  = " "
      END
      CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
      IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
      RETURN
      END

