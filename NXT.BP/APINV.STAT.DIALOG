SUBROUTINE APINV.STAT.DIALOG(GUIERRORS,GUISTATE)
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: APINV.STAT.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 00/00/2014
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
*
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* Voids or places on Hold AP Invoice
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES VENDORS.H
$INCLUDE NXT.INCLUDES AP_INVOICE.H
$INCLUDE NXT.INCLUDES RECEIPTS.H
$INCLUDE NXT.INCLUDES VALIDATION_FILE.H
*
*-->BEGIN GUI HEADER<--*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "APINV.STAT.DIALOG"
GUIERRORS = ''
GUIAPP = "APINV"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "APINV"
MSG_LIST = '' ;* MESSAGE LIST FOR GET RECORD ROUTINES
*
GUIERRORS = ''
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
  CALL ATGUIERROR(3,'APINV.STAT.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
  RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'APINV.STAT.DIALOG' ELSE
  CALL ATGUIERROR(3,'APINV.STAT.DIALOG','',0,GRFATAL,"'APINV.STAT.DIALOG' is not on file.",GUIERRORS)
  RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
  CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('APINV','APINV','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
GOSUB CLEAR.BUFFERS
GOSUB LOAD.VN.NAME.LIST
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
  CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 2 THEN RETURN
  IF GUIEVT EQ GEQUIT THEN
    GUI.DLG.EXIT = 1
  END ELSE
    GUIAPP=OCONV(GUIAPP,'MCU')
    GUIFRM=OCONV(GUIFRM,'MCU')
    GUICTL=OCONV(GUICTL,'MCU')
    GOSUB GUI.DECODE.EVENT
  END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
  GUI.APP.LIST = ''
  CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
  IF GUI.APP.LIST EQ '' THEN
    * Quit event fired after last GUI object is deleted - discard it
    CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
    * We could call ATGUISHUTDOWN here if we wanted, but there's no
    * harm just leaving the GUI environment initialized, in case we
    * want to use it again...
  END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
  * Add your code here...
END ELSE
  * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
  BEGIN CASE
    CASE GUIAPP='APINV'
      BEGIN CASE
        CASE GUIFRM='APINV'
          BEGIN CASE
            CASE GUICTL=''
              BEGIN CASE
                CASE GUIEVT=GECLOSE
                  GOSUB GUI.APINV.APINV.CLOSE;GUIEVT=0
              END CASE
            CASE GUICTL='BTNCLOSE'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.APINV.APINV.BTNCLOSE.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNPRINT'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.APINV.APINV.BTNPRINT.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='BTNVOID'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.APINV.APINV.BTNVOID.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='CHKHOLD'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.APINV.APINV.CHKHOLD.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='LST1VENNAME'
              BEGIN CASE
                CASE GUIEVT=GECLICK
                  GOSUB GUI.APINV.APINV.LST1VENNAME.CLICK;GUIEVT=0
              END CASE
            CASE GUICTL='TXTINVOICE'
              BEGIN CASE
                CASE GUIEVT=GEVALIDATE
                  GOSUB GUI.APINV.APINV.TXTINVOICE.VALIDATE;GUIEVT=0
              END CASE
          END CASE
      END CASE
  END CASE
  IF GUIEVT THEN
    * Unhandled event - may be dynamic
    GOSUB GUI.DYNAMIC.EVENTS
  END
END ELSE
  GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.APINV.APINV.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
  GOSUB GUI.DIALOG.RETURN
  CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
  GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APINV.APINV.BTNCLOSE.CLICK: *
GOSUB CLEAR.BUFFERS
GOSUB LOAD.CONTROLS
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APINV.APINV.BTNPRINT.CLICK: *
* Add your event code here...
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APINV.APINV.BTNVOID.CLICK: *
IF AP_ID # '' THEN
  IF AP_REC<AP_CHECK_KEY> = '' THEN
    PRMPT = "Void Invoice: ":FIELD(AP_ID,"*",2):"?"
    CAPTION = "Ap Invoice Status"
    STYLE   = 3  ;* ?
    BUTTONS = 4  ;* YES/NO
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
    IF RESPONSE = NXT.YES.RSP THEN
      *
      * DELETE INVOICE?
      *
      DELETE C.FILE.VAR(C.AP_INVOICE), AP_ID
      *
      *
      * NOW WRITE THE GLT TRANSACTIONS
      *
      LN.CNT = DCOUNT(AP_REC<AP_GL_AMTS>,@VM)
      FOR I =1 TO LN.CNT
        PCK_ID  = AP_REC<AP_PACKLIST_ID,I>
        IF PCK_ID = '' THEN PCK_ID = 'bal_to_apply'
        GL_CODE = AP_REC<AP_GL_CODES,I>
        DB_AMT  = AP_REC<AP_GL_AMTS,I> * -1
        CR_AMT = DB_AMT
        CALL WRITE.GLT(GL_CODE,DB_AMT,CR_AMT,AP_REC<AP_INV_DATE>,"AP-INV",AP_ID:'-VOID',GUIERRORS,GUISTATE)
      NEXT I
      *
      PRMPT = "Invoice: ":FIELD(AP_ID,"*",2):" Deleted"
      CAPTION = "Ap Invoice Status"
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      GOSUB CLEAR.BUFFERS
      GOSUB LOAD.CONTROLS
    END
  END ELSE
    PRMPT = "Cannot Void Paid Invoice"
    CAPTION = "Ap Invoice Status"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APINV.APINV.CHKHOLD.CLICK: *
IF AP_ID # '' THEN
  IF AP_REC<AP_CHECK_KEY> = '' THEN  ;* ONLY CHANGE HOLD STATUS ON UNPAID INVOICE
    CALL NXT.LOCKWAITING("AP_INVOICE",C.AP_INVOICE,AP_ID,GUIERRORS,GUISTATE)
    AP_REC<AP_HOLD> = NOT(AP_REC<AP_HOLD>)
    CALL WRITE.RECORD(AP_ID,AP_REC,C.AP_INVOICE,@FALSE,ERROR_STATUS)
  END ELSE
    PRMPT = "Invoice Has Been Paid, Hold Status Cannot Be Changed"
    CAPTION = "Ap Invoice Status"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APINV.APINV.LST1VENNAME.CLICK: *
*
IF GUIARGS<1> GT 0 THEN       ;* CLICKED EMPTY LIST TEST
  *
  VN_ID  = VENDORS.LIST<1,GUIARGS<1>,1>
  IF  VN_ID # '' THEN
    BEGIN CASE
      CASE  VN_ID = "$MORE$"      ;* USER NEEDS TO SEE MORE OF SEARCH LIST
        *        VENDORS.START.LIST = NEXT SELECTED ITEM INDEX TO DISPLAY FROM PRIOR GUI_SEARCH2 CALL
        VENDORS.LIST = ''
        LST.IDS = ''
        EMSG = ''
        CALL GUI.SEARCH2 ("VENDORS","","*","VN_NAME","VN_NAME VN_ADDR VN_CITY",VENDORS.MAX.LIST,VENDOR.START.LIST,VENDORS.LIST,LST.IDS,LIST.CT,EMSG)
        *
        CTRLIDS = ''
        PROPS   = ''
        VALUES  = ''
        *
        CTRLIDS<1> = "LST1VENNAME"
        PROPS<1>   = GPITEMS
        VALUES<1>  = VENDORS.LIST
        *
        CTRLIDS<2> =  "LST1VENNAME"
        PROPS<2>   = GPVALUE
        VALUES<2>  = ""
        CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
        IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
        *
      CASE VN_ID = "$TOP$"      ;* USER NEEDS TO SEE TOP OF LIST
        *         VENDORS.START.LIST = NEXT SELECTED ITEM INDEX TO DISPLAY FROM PRIOR GUI_SEARCH2 CALL
        VENDORS.LIST = ''
        LST.IDS = ''
        EMSG = ''
        CALL GUI.SEARCH2 ("VENDORS","","*","VN_NAME","VN_NAME VN_ADDR VN_CITY",VENDORS.MAX.LIST,VENDOR.START.LIST,VENDORS.LIST,LST.IDS,LIST.CT,EMSG)
        *
        CTRLIDS = ''
        PROPS   = ''
        VALUES  = ''
        *
        CTRLIDS<1> = "LST1VENNAME"
        PROPS<1>   = GPITEMS
        VALUES<1>  = VENDORS.LIST
        *
        CTRLIDS<2> = "LST1VENNAME"
        PROPS<2>   = GPVALUE
        VALUES<2>  = ""
        CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
        IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
        *
      CASE 1                     ;* SHOULD BE A VENDOR ID, GET VENDOR REC
        *
        CALL GET.VENDOR(VN_ID,VN_REC,@FALSE,ERROR_STATUS,GUIERRORS,GUISTATE)
        *
        IF ERROR_STATUS = ERR_NOF  THEN  ;* WE SHOULD NOT BE HERE WITH CUST
          LOG.OPTS = "DISPLAY"
          ERROR_NBR = ERR_SYS
          ERROR_MSG = 'Selection of non-existent vendor from list'
          CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
          VN_ID = ''
        END ELSE
          CALL ATGUISETPROP(GUIAPP,GUIFRM,"LBLVENDNAME",GPVALUE,0,0,VN_REC<VN_NAME>,GUIERRORS,GUISTATE)
        END
    END CASE
  END
END
LST1VENNAME.CLICK.99: *
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.APINV.APINV.TXTINVOICE.VALIDATE: *
*
* VALIDATE INVOICE NUMBER, CANNOT ALREADY BE ON FILE!
*
IF VN_ID # '' THEN
  AP_ID = VN_ID:'*':OCONV(GUIARGS<2>,"MCU")
  CALL GET.RECORD("AP_INVOICE",C.AP_INVOICE,AP_ID,AP_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
  IF AP_REC # ''  THEN
    *
    GOSUB LOAD.RECVR.DETAIL
    GOSUB LOAD.CONTROLS
  END ELSE
    PRMPT = "Invoice ":GUIARGS<2>:" for Vendor Not On File, Re-enter"
    CAPTION = "Ap Invoice Status"
    STYLE   = 2  ;* !
    BUTTONS = 0  ;* ok
    HELPID = ""
    CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
  END
END ELSE
  PRMPT = "Vendor Must Be Selected Prior to Invoice Entry"
  CAPTION = "Ap Invoice Status"
  STYLE   = 2  ;* !
  BUTTONS = 0  ;* ok
  HELPID = ""
  CALL NXT.ERR.MSG(PRMPT, CAPTION, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,"AP.DIALOG", ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
* $PAGE$
************************************************************
CLEAR.BUFFERS: *
VN_REC = ''
VN_ID = ''
AP_ID = ''
AP_REC = ''
RECVR.DETAIL.LIST = ''
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.VN.NAME.LIST: *
*
* LOADS THE LST1VENNAME LIST
*
VENDORS.MAX.LIST = 300
VENDORS.START.LIST = 1
CALL GUI.SEARCH2 ("VENDORS","","*","VN_NAME","VN_NAME VN_ADDR VN_CITY",VENDORS.MAX.LIST,VENDORS.START.LIST,VENDORS.LIST,LST.IDS,LIST.CT,EMSG)
*
IF EMSG<1> = 'No Items Found' THEN  ;* NO ITEMS FOUND
  VALUE = ''
END ELSE
  VALUE = VENDORS.LIST
END
*
CALL ATGUISETPROP(GUIAPP,GUIFRM,"LST1VENNAME",GPITEMS,0,0,VALUE,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
RETURN
************************************************************
* $PAGE$
************************************************************
* CREATE LIST TO DUMP INTO GRDLINES GRID
*
LOAD.RECVR.DETAIL:
RECVR.DETAIL.LIST = ''
RECVR.DETAIL.COUNT  = 0
*
RC_ID = AP_REC<AP_RECEIPT_ID>
IF RC_ID # '' THEN
  CALL GET.RECORD("RECEIPTS",C.RECEIPTS,RC_ID,RC_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
  IF RC_REC # '' THEN
    RC.PCKLST = RC_REC<RC_PACKSLIPS>
    *
    RECVR.DETAIL.COUNT = DCOUNT(AP_REC<AP_PACKLIST_ID>,@VM)
    FOR I = 1 TO RECVR.DETAIL.COUNT
      PACK_ID = AP_REC<AP_PACKLIST_ID,I>
      LOCATE  PACK_ID IN RC.PCKLST<1,1> SETTING IDX THEN
        *
        RECVR.DETAIL.LIST<1,I,1> = PACK_ID
        RECVR.DETAIL.LIST<1,I,2> = OCONV(RC_REC<RC_DATE,IDX>,RC_DATE.CNV)
        QTY.RECVR = RC_REC<RC_QTY1,IDX> + RC_REC<RC_QTY2,IDX> + RC_REC<RC_QTY3,IDX> + RC_REC<RC_WO_QTY,IDX> + 0
        RECVR.DETAIL.LIST<1,I,3> =  QTY.RECVR
        RECVR.DETAIL.LIST<1,I,4> = OCONV(AP_REC<AP_GL_AMTS,I>,AP_GL_AMTS.CNV)
        *
      END
      *
    NEXT I
  END
END
RETURN
************************************************************
* $PAGE$
************************************************************
LOAD.CONTROLS:
*
* routine LOADS controls
*
CTRLIDS = ''
PROPS   = ''
VALUES  = ''
*
CTRLIDS<1> = "LBLVENDNAME"
PROPS<1>   = GPVALUE
VALUES<1>  = VN_REC<VN_NAME>
*
CTRLIDS<2> = "LBLINVAMTV"
PROPS<2>   = GPVALUE
VALUES<2>  = OCONV(AP_REC<AP_BAL_DUE>,AP_BAL_DUE.CNV)
*
CTRLIDS<3> = "CHKHOLD"
PROPS<3>   = GPVALUE
VALUES<3>  = AP_REC<AP_HOLD>
*
CTRLIDS<4> = "GRDINVITEMS"
PROPS<4>   = GPVALUE
VALUES<4>  = RECVR.DETAIL.LIST
*
*
CTRLIDS<5> = "TXTINVOICE"
PROPS<5>   = GPVALUE
VALUES<5>  = FIELD(AP_ID,"*",2)
*
CTRLIDS<6> = "LBLCHKV"
PROPS<6>   = GPVALUE
VALUES<6>  = FIELD(AP_REC<AP_CHECK_KEY>,"*",1):' ':FIELD(AP_REC<AP_CHECK_KEY>,"*",2)
*
*
CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
*
IF VN_ID = '' THEN
  CALL ATGUISETPROP(GUIAPP,GUIFRM,"LST1VENNAME",GPVALUE,0,0,0,GUIERRORS,GUISTATE)
END
*
RETURN
END
