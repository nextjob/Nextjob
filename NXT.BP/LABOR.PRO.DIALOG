SUBROUTINE LABOR.PRO.DIALOG(GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: LABOR.PRO.DIALOG
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 8/5/2015
* UPDATED:
*
* MAINTENANCE RECORD:
*
* EQUATE:
*
*
* VARIABLES:
* FILES:
*
*
* DESIGN DESCRIPTION:
* DIALOG IS CALLED TO MAINTAIN LABOR_TICKETS OR LABOR_TRANS
* LABOR_TCIKETS - LABOR ENTRYS NOT POSTED
* LABOR_TRANS - LABOR ENTRYS THAT HAVE BEEN POSTED TO WORK ORDERS
*
* LABOR_TICKETS KEY = SYSTEM(19)
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES NXT.WO.STATUS.DEF
$INCLUDE NXT.INCLUDES EMPLOYEES.H
$INCLUDE NXT.INCLUDES LABOR_TICKETS.H
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "LABOR.PRO.DIALOG"
GUIERRORS = ''
GUIAPP = "LABOR.PRO"  ;* SEED GUIAPP AND GUIFRM PRIOR TO ACTUAL EVENT WAIT LOOP
GUIFRM = "LABOR.PRO"  ;* crease dialog startup time.
GET_REC_MSG_LIST = ''  ;* GET RECORD MESSAGE OVERRIDE
*
LABOR.LIST = ''       ;* LIST OF LABOR TICKETS IN GRID1
LABOR.ID.LIST = ''    ;* AND THE ASSOCIATED LABOR IDS
C.LABOR.FILE = 0      ;* NOT ASSIGNED
*
* Open the GUI project file
OPEN 'NXT.FORMS' TO GUI.PROJECT.FILE ELSE
   CALL ATGUIERROR(3,'LABOR.PRO.DIALOG','',0,GRFATAL,"'NXT.FORMS' is not a file name.",GUIERRORS)
   RETURN
END
* Read the GUI template into TEMPLATE
READ TEMPLATE FROM GUI.PROJECT.FILE,'LABOR.PRO.DIALOG' ELSE
   CALL ATGUIERROR(3,'LABOR.PRO.DIALOG','',0,GRFATAL,"'LABOR.PRO.DIALOG' is not on file.",GUIERRORS)
   RETURN
END
* Add your equates and code to open files here...
*
*
************************************************************
*
*
*-->BEGIN GUI HEADER<--*
* If GUISTATE is not NULL, assume GUI has been initialized
IF GUISTATE EQ '' THEN
   CALL ATGUIINIT2(TEMPLATE<2,2>,'',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN RETURN
END
* Load the dialog project template
CALL ATGUIRUNMACRO(TEMPLATE,'',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 3 THEN RETURN
*-->END GUI HEADER<--*
*
*
************************************************************
*
*
*-->BEGIN GUI STARTUP<--*
ACCEPT = 0 ;* Assume dialog cancelled (update in your OK button Click handler)
* Add your code to load initial values here...
CALL ATGUISHOW('LABOR.PRO','LABOR.PRO','','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN RETURN
*-->END GUI STARTUP<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT LOOP<--*
GUI.DLG.EXIT = 0
LOOP
   CALL ATGUIWAITEVENT(GUIAPP,GUIFRM,GUICTL,GUIEVT,GUIARGS,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 2 THEN RETURN
   IF GUIEVT EQ GEQUIT THEN
      GUI.DLG.EXIT = 1
   END ELSE
      GUIAPP=OCONV(GUIAPP,'MCU')
      GUIFRM=OCONV(GUIFRM,'MCU')
      GUICTL=OCONV(GUICTL,'MCU')
      GOSUB GUI.DECODE.EVENT
   END
UNTIL GUI.DLG.EXIT DO REPEAT
* Eat final Quit event
IF GUIEVT <> GEQUIT THEN
   GUI.APP.LIST = ''
   CALL ATGUIGETPROP('','','',GPSTATUS,2,0,GUI.APP.LIST,'',GUISTATE)
   IF GUI.APP.LIST EQ '' THEN
      * Quit event fired after last GUI object is deleted - discard it
      CALL ATGUIWAITEVENT('','','','','','',GUISTATE)
      * We could call ATGUISHUTDOWN here if we wanted, but there's no
      * harm just leaving the GUI environment initialized, in case we
      * want to use it again...
   END
END
*-->END EVENT LOOP<--*
*
*
************************************************************
*
*
*-->BEGIN GUI TRAILER<--*
RETURN
*
GUI.DIALOG.RETURN: *
* This subroutine is called just before the GUI Dialog app
* is deleted. Check the state of the ACCEPT variable, and
* retrieve values from GUI controls and assign to appropriate
* arguments for return to calling program here...
IF ACCEPT THEN
   * Add your code here...
END ELSE
   * Add your code here...
END
RETURN
*-->END GUI TRAILER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT DECODER<--*
GUI.DECODE.EVENT: *
IF NUM(GUIEVT) THEN
   BEGIN CASE
      CASE GUIAPP='LABOR.PRO'
         BEGIN CASE
            CASE GUIFRM='LABOR.PRO'
               BEGIN CASE
                  CASE GUICTL=''
                     BEGIN CASE
                        CASE GUIEVT=GECLOSE
                           GOSUB GUI.LABOR.PRO.LABOR.PRO.CLOSE;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNADD'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.LABOR.PRO.LABOR.PRO.BTNADD.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNPOST'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.LABOR.PRO.LABOR.PRO.BTNPOST.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNSELECT'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.LABOR.PRO.LABOR.PRO.BTNSELECT.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='BTNSELPOST'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.LABOR.PRO.LABOR.PRO.BTNSELPOST.CLICK;GUIEVT=0
                     END CASE
                  CASE GUICTL='GRID1'
                     BEGIN CASE
                        CASE GUIEVT=GECLICK
                           GOSUB GUI.LABOR.PRO.LABOR.PRO.GRID1.CLICK;GUIEVT=0
                     END CASE
               END CASE
         END CASE
   END CASE
   IF GUIEVT THEN
      * Unhandled event - may be dynamic
      GOSUB GUI.DYNAMIC.EVENTS
   END
END ELSE
   GOSUB GUI.CUSTOM.EVENTS
END
RETURN
*-->END EVENT DECODER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.LABOR.PRO.LABOR.PRO.BTNADD.CLICK: *
* GET LABOR FILE TO ADD TO
CALL ATGUIGETPROP(GUIAPP,GUIFRM, "OPTSOURCE", GPVALUE, 0, 0,SRC.IDX, GUIERRORS, GUISTATE)
CALL ATGUIGETPROP(GUIAPP,GUIFRM, "TXTDATE", GPVALUE, 0, 0,TXTDATE, GUIERRORS, GUISTATE)
IF TXTDATE = '' THEN
   LBR.DATE =  ''
END ELSE
   LBR.DATE = ICONV(TXTDATE,LBT_DATE.CNV)
END
*
BEGIN CASE
   CASE SRC.IDX  = 1 ;* "LABOR_TICKETS"
      OPTIONS = LBR_COLLECTION_MODE
      C.LABOR.FILE = C.LABOR_TICKETS
      LBT_ID = ''
      CALL LABOR.DIALOG(LBT_ID,OPTIONS,GUIERRORS,GUISTATE)
      IF LBR.DATE # '' THEN
         GOSUB GET.LABOR
         * POPULATE GRID
         CALL ATGUISETPROPS(GUIAPP,GUIFRM,"GRID1",GPVALUE,LABOR.LIST,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
      END
      *
   CASE SRC.IDX  = 2  ;* "LABOR_TRANS"
      OPTIONS = LBR_ENTRY_MODE
      C.LABOR.FILE =  C.LABOR_TRANS
      LBT_ID = ''
      CALL LABOR.DIALOG(LBT_ID,OPTIONS,GUIERRORS,GUISTATE)
      IF LBR.DATE # '' THEN
         GOSUB GET.LABOR
         * POPULATE GRID
         CALL ATGUISETPROPS(GUIAPP,GUIFRM,"GRID1",GPVALUE,LABOR.LIST,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
      END
   CASE 1
      PRMPT = 'No Labor Source Selected'
      STYLE   = 2  ;* !
      BUTTONS = 0  ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END CASE
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.LABOR.PRO.LABOR.PRO.BTNPOST.CLICK: *
CACHED.WR_WO_ID = ''  ;* INIT CACHE FOR WR IDS
CACHED.WR_ID_LIST = ''
* for each grid line with post selected:
LBT.ID.CT = DCOUNT(LABOR.ID.LIST,@AM)
FOR I = 1 TO LBT.ID.CT
   IF  LABOR.LIST<1,I,8> = 1 THEN
      LBT_ID = LABOR.ID.LIST<I>
      *
      * GET THE LABOR RECORD FOR THIS ITEM
      *
      MSG_LIST = NXT.CANCEL.ON.LOCKED
      CALL GET.RECORD(LABOR.FILE,C.LABOR.FILE,LBT_ID,LBT_REC,@TRUE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
      *
      BEGIN CASE
         CASE ERROR_STATUS = ERR_NOF
            EMP.NAME = "Record Missing?"
            LOG.OPTS = "DISPLAY"
            ERROR_NBR = ERR_SYS
            ERROR_MSG =  "Missing Selected Record, File: ":LABOR.FILE:" ID: ":LBT_ID
            CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         CASE ERROR_STATUS = ERR_BUSY
            PRMPT = 'Labor Ticket in use, Attempt to POST Later'
            STYLE   = 2  ;* !
            BUTTONS = 0  ;* ok
            HELPID = ""
            CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
         CASE 1
            ** DO WE ALREADY HAVE A LIST OF WR ID FOR THIS WORK ORDER?
            IF CACHED.WR_WO_ID = LBT_REC<LBT_WO_ID> THEN
               NULL  ;* YES, REUSE THEM
            END ELSE
               CACHED.WR_WO_ID = ''  ;* NO, POST.LABOR.SUB WILL FIND THEM
               CACHED.WR_ID_LIST = ''
            END
            CALL POST.LABOR.SUB(LBT_REC,UPDATE.WR.OK,CACHED.WR_WO_ID,CACHED.WR_ID_LIST,GUIERRORS,GUISTATE)
            *
            *
            IF UPDATE.WR.OK THEN
               * LABOR_TICKET HAS BEEN POSTED, MOVE TO LABOR_TRANS FILE
               CALL WRITE.RECORD(LBT_ID,LBT_REC,C.LABOR_TRANS,@FALSE,ERROR_STATUS)
               *  DELETE THE LABOR_TICKET
               DELETE C.FILE.VAR(C.LABOR_TICKETS), LBT_ID
               *
            END ELSE
               **
               ** for some reason we could not post this labor ticket, notify user and save as a LABOR_TICKET
               ** for posting later
               **
               PRMPT = 'Labor Post Unsuccessful: ':UPDATE.WR.OK<2>
               STYLE   = 2  ;* !
               BUTTONS = 0  ;* ok
               HELPID = ""
               CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
               **
            END
      END CASE
   END
NEXT I
*REMEBER TO RESET ON COMPLETION
LABOR.LIST = ''       ;* LIST OF LABOR TICKETS IN GRID1
LABOR.ID.LIST = ''    ;* AND THE ASSOCIATED LABOR IDS
C.LABOR.FILE = 0      ;* NOT ASSIGNED
* POPULATE GRID
CALL ATGUISETPROPS(GUIAPP,GUIFRM,"GRID1",GPVALUE,LABOR.LIST,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.LABOR.PRO.LABOR.PRO.BTNSELECT.CLICK: *
* GET LABOR DATE
CALL ATGUIGETPROP(GUIAPP,GUIFRM, "TXTDATE", GPVALUE, 0, 0,TXTDATE, GUIERRORS, GUISTATE)
IF TXTDATE = '' THEN
   PRMPT = "Labor Date Not Set"
   STYLE   = 2  ;* !
   BUTTONS = 0 ;* ok
   HELPID = ""
   CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
END ELSE
   LBR.DATE = ICONV(TXTDATE,LBT_DATE.CNV)
   * GET LABOR FILE TO SELECT
   CALL ATGUIGETPROP(GUIAPP,GUIFRM, "OPTSOURCE", GPVALUE, 0, 0,SRC.IDX, GUIERRORS, GUISTATE)
   *
   BEGIN CASE
      CASE SRC.IDX  = 1
         LABOR.FILE = "LABOR_TICKETS"
         C.LABOR.FILE = C.LABOR_TICKETS
         BTN.ENABLE.STATE = 1
         *
      CASE SRC.IDX  = 2
         LABOR.FILE = "LABOR_TRANS"
         C.LABOR.FILE =  C.LABOR_TRANS
         BTN.ENABLE.STATE = 0
      CASE 1
         LABOR.FILE = ""
         BTN.ENABLE.STATE = 0
   END CASE
   * ENABLE / DISABLE POST SPECIFIC BUTTONS BASED ON LABOR FILE BEING PROCESSED
   CTRLIDS = "BTNSELPOST"
   PROPS   = GPENABLED
   VALUES  = BTN.ENABLE.STATE
   *
   CTRLIDS<2> = "BTNPOST"
   PROPS<2>   = GPENABLED
   VALUES<2>  = BTN.ENABLE.STATE
   CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLIDS,PROPS,VALUES,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN GOSUB GUI.ERROR
   *
   *
   IF LABOR.FILE = '' THEN
      PRMPT = "Labor Source Not Selected"
      STYLE   = 2  ;* !
      BUTTONS = 0 ;* ok
      HELPID = ""
      CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
   END ELSE
      GOSUB GET.LABOR
      IF LABOR.LIST = '' THEN
         PRMPT = "No ":LABOR.FILE:" Records found for Labor Date: ":OCONV(LBR.DATE,LBT_DATE.CNV)
         STYLE   = 2  ;* !
         BUTTONS = 0 ;* ok
         HELPID = ""
         CALL NXT.ERR.MSG(PRMPT, PROG_ID, STYLE, BUTTONS, HELPID, RESPONSE, GUIERRORS,GUISTATE)
      END ELSE
         * POPULATE GRID
         CALL ATGUISETPROPS(GUIAPP,GUIFRM,"GRID1",GPVALUE,LABOR.LIST,GUIERRORS,GUISTATE)
         IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
      END
   END
END
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.LABOR.PRO.LABOR.PRO.BTNSELPOST.CLICK: *
LBT.ID.CT = DCOUNT(LABOR.ID.LIST,@AM)
FOR I = 1 TO LBT.ID.CT
   LABOR.LIST<1,I,8> = 1
NEXT I
* POPULATE GRID
CALL ATGUISETPROPS(GUIAPP,GUIFRM,"GRID1",GPVALUE,LABOR.LIST,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN CLOSE EVENT HANDLER<--*
GUI.LABOR.PRO.LABOR.PRO.CLOSE: *
* Default form close event handler
CALL ATGUIHIDE(GUIAPP,GUIFRM,'','',GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
CALL ATGUIGETPROP(GUIAPP,'','',GPSTATUS,0,0,NUM.FORMS,GUIERRORS,GUISTATE)
IF GUIERRORS<1> >= 2 THEN GOTO GUI.ERROR
IF NUM.FORMS = 0 THEN
   GOSUB GUI.DIALOG.RETURN
   CALL ATGUIDELETE(GUIAPP,'','',GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= 3 THEN GOTO GUI.ERROR
   GUI.DLG.EXIT = 1
END
RETURN
*-->END CLOSE EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN EVENT HANDLER<--*
GUI.LABOR.PRO.LABOR.PRO.GRID1.CLICK: *
GRD.COL = GUIARGS<1,1>
GRD.ROW = GUIARGS<1,2>
*

LBT.ID.CT = DCOUNT(LABOR.ID.LIST,@AM)
IF GRD.ROW LE LBT.ID.CT  THEN      ;* ONLY ROWS POPULATED WITH LABOR TICKETS / TRANS CAN BE CLICKED ON
   BEGIN CASE
      CASE GRD.COL = 8   ;* CHECK BOX
         *
         IF C.LABOR.FILE = C.LABOR_TICKETS THEN      ;* CLICK ONLY WORKS IF WE ARE PROCESSING LABOR_TICKETS
            IF LABOR.LIST<1,GRD.ROW,8> THEN ;* ALREADY CHECKED, RESET
               LABOR.LIST<1,GRD.ROW,8> = 0
            END ELSE
               LABOR.LIST<1,GRD.ROW,8> = 1 ;* NOT CHECKED, SET
            END
         END
      CASE 1    ;* ANY OTHER CLICK ASSUME WE ARE SELECTING A TICKET / TRANS RECORD TO PROCESS
         IF C.LABOR.FILE = C.LABOR_TICKETS THEN  ;* ASSIGNED FILE INDEX TELLS US WHAT RECORD TYPES ARE CURRENTLY DISPLAYED
            OPTIONS = LBR_EDIT_TICKET
         END ELSE
            OPTIONS = LBR_EDIT_TRANS
         END
         LBT_ID = LABOR.ID.LIST<GRD.ROW>
         CALL LABOR.DIALOG(LBT_ID,OPTIONS,GUIERRORS,GUISTATE)
         * NOW REFRESH THE DISPLAY
         GOSUB GET.LABOR
   END CASE
   *
   * REFRESH THE GRID
   CALL ATGUISETPROPS(GUIAPP,GUIFRM,"GRID1",GPVALUE,LABOR.LIST,GUIERRORS,GUISTATE)
   IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)

END

RETURN
*-->END EVENT HANDLER<--*
*
*
************************************************************
*
*
*-->BEGIN DYNAMIC EVENTS<--*
GUI.DYNAMIC.EVENTS: *
* Add any dynamic event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END DYNAMIC EVENTS<--*
*
*
************************************************************
*
**-->BEGIN CUSTOM EVENTS<--*
GUI.CUSTOM.EVENTS: *
* Add any custom event handling code here. The GUIEVT, GUIAPP, GUIFRM,
* GUICTL and GUIARGS variables are valid and availble for your use.
RETURN
*-->END CUSTOM EVENTS<--*
*
*
************************************************************
*
**-->BEGIN ERROR HANDLER<--*
GUI.ERROR: *
GUI.DLG.EXIT = 1
LOG.OPTS = "DISPLAY"
ERROR_NBR = ERR_GUI
ERROR_MSG =  ERR_MESSAGE(ERR_GUI)
CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
RETURN
*-->END ERROR HANDLER<--*
*
*
************************************************************
GET.LABOR:
*
* GET LABOR TICKETS FROM LABOR FILE LBR.FILE WITH LABOR DATE LBR.DATE
*
LABOR.LIST = ''
LABOR.ID.LIST = ''
SLIST = 'SSELECT ':LABOR.FILE:' BY LBT_EMP BY LBT_CLK_IN WITH LBT_DATE = "':OCONV(LBR.DATE,LBT_DATE.CNV):'" TO 2'
*
** CRT SLIST
*
EXECUTE SLIST CAPTURING DMMY.OUT
*
IF @SELECTED GE 1 THEN
   *
   READLIST LABOR.ID.LIST FROM 2 THEN
      LIST.CT = DCOUNT(LABOR.ID.LIST,@AM)
      *
      FOR I = 1 TO LIST.CT
         LBT_ID = LABOR.ID.LIST<I,1>
         *
         CALL GET.RECORD(LABOR.FILE,C.LABOR.FILE,LBT_ID,LBT_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
         *
         IF LBT_REC = '' THEN
            EMP.NAME = "Record Missing?"
            LOG.OPTS = "DISPLAY"
            ERROR_NBR = ERR_SYS
            ERROR_MSG =  "Missing Selected Record, File: ":LABOR.FILE:" ID: ":LBT_ID
            CALL LOG.ERROR(LOG.OPTS,PROG_ID, ERROR_NBR, ERROR_MSG, GUIERRORS, GUISTATE)
         END ELSE
            *
            * GET EMPLOYEE INFORMATION
            EMP_ID = LBT_REC<LBT_EMP>
            IF EMP_ID = LBR_MACHINE_ID THEN
               EMP.NAME =  LBR_MACHINE_NAME  ;* MACHINE HOURS ENTRY
            END ELSE
               CALL GET.RECORD("EMPLOYEES",C.EMPLOYEES,EMP_ID,EMP_REC,@FALSE,ERROR_STATUS,GET_REC_MSG_LIST,GUIERRORS,GUISTATE)
               IF EMP_REC = '' THEN
                  EMP.NAME = 'Emp: ':EMP_ID:' Not On File!'
               END ELSE
                  EMP.NAME = EMP_ID:' ':EMP_REC<EMP_LAST_NAME>:' ':EMP_REC<EMP_FIRST_NAME>
               END
            END
         END

         * BUILD LABOR.LIST FOR GRID UPDATE
         LABOR.LIST<1,I,1> = EMP.NAME  ;* EMP NAME
         LABOR.LIST<1,I,2> = LBT_REC<LBT_WO_ID>
         LABOR.LIST<1,I,3> = LBT_REC<LBT_SEQ_ID>
         LABOR.LIST<1,I,4> = OCONV(LBT_REC<LBT_CLK_IN>,LBT_CLK_IN.CNV)
         LABOR.LIST<1,I,5> = OCONV(LBT_REC<LBT_CLK_OUT>,LBT_CLK_OUT.CNV)
         LABOR.LIST<1,I,6> = LBT_REC<LBT_SEQ_STAT>
         LABOR.LIST<1,I,7> = LBT_REC<LBT_QTY_CMP>
         LABOR.LIST<1,I,8> = 0
      NEXT I
   END
END


RETURN
*
************************************************************
END
