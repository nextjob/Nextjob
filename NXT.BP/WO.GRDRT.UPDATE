SUBROUTINE WO.GRDRT.UPDATE(WO_ID,MAT SEQ.ARRAY,WR.COUNT,OPTS,CTRLID,GUIAPP,GUIFRM,GUIERRORS,GUISTATE)
!
**************************************************************************
* This is free and unencumbered software released into the public domain.
*
* Anyone is free to copy, modify, publish, use, compile, sell, or
* distribute this software, either in source code form or as a compiled
* binary, for any purpose, commercial or non-commercial, and by any
* means.
*
* In jurisdictions that recognize copyright laws, the author or authors
* of this software dedicate any and all copyright interest in the
* software to the public domain. We make this dedication for the benefit
* of the public at large and to the detriment of our heirs and
* successors. We intend this dedication to be an overt act of
* relinquishment in perpetuity of all present and future rights to this
* software under copyright law.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* For more information, please refer to <https://unlicense.org>
**************************************************************************
*
* MODULE: WO.GRDRT.UPDATE
* AUTHOR: MAB
* VERSION: 1.0.0
* CREATED: 10/28/2013
* UPDATED:
*
* MAINTENANCE RECORD:
* 04/26/16 RETURN WR.COUNT
*
* EQUATE:
*
*
* VARIABLES:
* WO_ID - WORK ORDER ID
* SEQ.ARRAY - 2 DIM ARRAY CONTAINING SEQ DATA IN ROWS SEE NXT.EQUATES FOR LAYOUT
*
* OPTS - OPTIONS
*          = 1 - INCLUDE SCHEDULING INFORMATION (RATES, QTYS,  MOVE AND QUEUE HOURS, SCHEDULING HOURS, ETC) IN SEQ.ARRAY
* CTRLID - CONTROL ID (USUALLY GRDRT)
*
* FILES:
*
*
* DESIGN DESCRIPTION:
* ROUTINE IS CALLED UPDATE THE GRID "CTRLID" WITH THE WORK ORDER SEQS FOR WORK ORDER "WO_ID" THE LIST VARIABLE SEQ.LIST
*
!
** INCLUDE STANDARD VARIABLE, EQUATES
*
$INCLUDE NXT.INCLUDES NXT.COMMON
$INCLUDE NXT.INCLUDES NXT.EQUATES
$INCLUDE NXT.INCLUDES NXT.ERR.MSGS
$INCLUDE NXT.INCLUDES SYSTEM_FILE.EQU
$INCLUDE NXT.INCLUDES WR.H
$INCLUDE NXT.INCLUDES WC.H
*
$INCLUDE GUIBP ATGUIEQUATES
*
PROG_ID   = "WO.GRDRT.UPDATE"
GUIERRORS = ''
*
* FIRST CLEAR OUT SEQ LIST
*
MSG_LIST = ""
SEQ.LIST = ''
IDX = 0
WR.COUNT = 0
*
* NOW GET OUR SEQ DATA
SLIST = 'SSELECT WR BY WR_WONBR BY WR_SEQNBR WITH WR_WONBR = "':WO_ID:'" TO 2'
EXECUTE SLIST CAPTURING DMMY.OUT
*
IF @SELECTED GE 1 THEN
  *
  READLIST IDLIST FROM 2 THEN
    LIST.CT = DCOUNT(IDLIST,@AM)
    WR.COUNT = LIST.CT
    *
    * SIZE SEQ.ARRAY TO HOLD THE RECORDS AVAILABLE
    *
    REDIM SEQ.ARRAY(LIST.CT,SQI_COLUMNS)
    FOR I = 1 TO LIST.CT
      RT_ID = IDLIST<I,1>
      IDX += 1

      CALL GET.RECORD("WR",C.WR,RT_ID,WR_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
      IF ERROR_STATUS = '' THEN
        WC_ID = WR_REC<WRT_WCID>     ;* WORK CENTER
        WR_DESC_TXT = WR_REC<WRT_DESC,1>
        CALL GET.RECORD("WC",C.WC,WC_ID,WC_REC,@FALSE,ERROR_STATUS,MSG_LIST,GUIERRORS,GUISTATE)
        IF ERROR_STATUS = '' THEN
          WCNAME = WC_REC<WC_NAME>
        END ELSE
          WCNAME = 'Unknown!'
        END

      END ELSE
        WR_REC = ''
        WC_ID  = "UNKNOWN"
        WCNAME = "UNKNOWN"
        WR_DESC_TXT = "WR Record Not Found!"
      END
      * BUILD SEQ.LIST FOR GUI UPDATE
      SEQ.LIST<1,IDX,1> = FIELD(RT_ID,"*",2)   ;* SEQ NUMBER
      SEQ.LIST<1,IDX,2> = WC_ID
      SEQ.LIST<1,IDX,3> = WCNAME
      SEQ.LIST<1,IDX,4> = WR_DESC_TXT
      SEQ.LIST<1,IDX,5> = OCONV(WR_REC<WR_SCHD_START>,WR_SCHD_START.CNV) ;* COLUMN FOR SEQ SCHEDULE START DATE
      SEQ.LIST<1,IDX,6> = OCONV(WR_REC<WR_SCHD_END>,WR_SCHD_END.CNV) ;* COLUMN FOR SEQ SCHEDULE END DATE
      SEQ.LIST<1,IDX,7> = OCONV(WR_REC<WR_ACT_START>,WR_ACT_START.CNV) ;* COLUMN FOR SEQ ACTUAL START DATE
      SEQ.LIST<1,IDX,8> = OCONV(WR_REC<WR_ACT_END>,WR_ACT_END.CNV) ;* COLUMN FOR SEQ ACTUAL END DATE
      SEQ.LIST<1,IDX,9> = WR_REC<WR_STATUS>
      SEQ.LIST<1,IDX,10> = WR_REC<WR_QTY_COMP> + 0       ;* QTY COMPLETE
      SEQ.LIST<1,IDX,11> = WR_REC<WR_SCRAP> + 0       ;* QTY COMPLETE
      *
      SEQ.ARRAY(IDX,SQI_WOID) = WO_ID    ;* WORK ORDER ID
      SEQ.ARRAY(IDX,SQI_ID) = FIELD(RT_ID,"*",2)   ;* SEQ NUMBER
      SEQ.ARRAY(IDX,SQI_WC) = WC_ID
      SEQ.ARRAY(IDX,SQI_WNM) = WCNAME
      SEQ.ARRAY(IDX,SQI_TXT) = WR_DESC_TXT
      SEQ.ARRAY(IDX,SQI_SSTR) = WR_REC<WR_SCHD_START>  ;*  SEQ SCHEDULE START DATE
      SEQ.ARRAY(IDX,SQI_SEND) = WR_REC<WR_SCHD_END>    ;* COLUMN FOR SEQ SCHEDULE END DATE
      SEQ.ARRAY(IDX,SQI_ASTR) = WR_REC<WR_ACT_START>   ;* COLUMN FOR SEQ ACTUAL START DATE
      SEQ.ARRAY(IDX,SQI_AEND) = WR_REC<WR_ACT_END>     ;* COLUMN FOR SEQ ACTUAL END DATE
      SEQ.ARRAY(IDX,SQI_STAT) = WR_REC<WR_STATUS>
      SEQ.ARRAY(IDX,SQI_CMP) = WR_REC<WR_QTY_COMP> + 0       ;* QTY COMPLETE
      * AND IF REQUESTED PASS BACK SCHEDULING INFORMATION
      IF OPTS = 1 THEN
        SEQ.ARRAY(IDX,SQI_QUE) = WC_REC<WC_QUEUE>         ;* WC QUEUE HOURS
        SEQ.ARRAY(IDX,SQI_MOV) = WC_REC<WC_MOVE>          ;* WC MOVE HOURS
        SEQ.ARRAY(IDX,SQI_DEP) = WC_REC<WC_DEPT>          ;* WC DEPARTMENT
        SEQ.ARRAY(IDX,SQI_MON) = WC_REC<WC_MON>           ;* WC SCHEDULED HOURS FOR MONDAY
        SEQ.ARRAY(IDX,SQI_TUE) = WC_REC<WC_TUE>           ;* WC SCHEDULED HOURS FOR TUESDAY
        SEQ.ARRAY(IDX,SQI_WED) = WC_REC<WC_WED>           ;* WC SCHEDULED HOURS FOR WEDNESDAY
        SEQ.ARRAY(IDX,SQI_THU) = WC_REC<WC_THUR>          ;* WC SCHEDULED HOURS FOR THURSDAY
        SEQ.ARRAY(IDX,SQI_FRI) = WC_REC<WC_FRI>           ;* WC SCHEDULED HOURS FOR FRIDAY
        SEQ.ARRAY(IDX,SQI_SAT) = WC_REC<WC_SAT>           ;* WC SCHEDULED HOURS FOR SATURDAY
        SEQ.ARRAY(IDX,SQI_SUN) = WC_REC<WC_SUN>           ;* WC SCHEDULED HOURS FOR SUNDAY
        SEQ.ARRAY(IDX,SQI_ESU) = WR_REC<WRT_SUEMP>+0      ;* EMP SU HRS
        SEQ.ARRAY(IDX,SQI_ERN) = WR_REC<WRT_EMPHPP> +0    ;* EMP HOURS PER PART RUN RATE
        SEQ.ARRAY(IDX,SQI_MSU) = WR_REC<WRT_SUMACH>+0     ;* MACHINE SU HRS
        SEQ.ARRAY(IDX,SQI_MRN) = WR_REC<WRT_MACHHPP>+0    ;* MACHINE HOURS PER PART RUN RATE
        SEQ.ARRAY(IDX,SQI_CCS) = WR_REC<WRT_SCHDCONCURRENT>+0  ;* CONCURRENT SCHEDULING
        SEQ.ARRAY(IDX,SQI_QTY) = WR_REC<WR_QTY_TO_MFG>         ;* QTY TO MFG
        SEQ.ARRAY(IDX,SQI_AESU) = WR_REC<WR_ACT_SUEMP>+0  ;* ACT EMP SU HRS
        SEQ.ARRAY(IDX,SQI_AMSU) = WR_REC<WR_ACT_SUMACH>+0  ;* ACT MACHINE SU HRS
*
        SEQ.ARRAY(IDX,SQI_EMPL) = 0   ;* EMP LOAD HOURS (VIA WRT.LOAD.CALC)   
        SEQ.ARRAY(IDX,SQI_MCHL) = 0   ;* MACHP LOAD HOURS (VIA WRT.LOAD.CALC)
        SEQ.ARRAY(IDX,SQI_SCHST) = "" ;* SCHEDULING STATUS CODE (VIA WRT.LOAD.CALC)
        SEQ.ARRAY(IDX,SQI_SCHRN) = "" ;* SCHEDULING IS RUNNING (VIA WRT.LOAD.CALC)
        SEQ.ARRAY(IDX,SQI_NSTR) = "" ;* NEW SCHEDULE START DATE (VIA SCHEDULING ROUTINES WRT.BACKWARD.SCHD)
        SEQ.ARRAY(IDX,SQI_NEND) = "" ;* NEW SCHEDULE END DATE (VIA SCHEDULING ROUTINES WRT.BACKWARD.SCHD)
      END
      *
    NEXT I
  END
END
*
* IF CONTROL ID PASSED, UPDATE IT
*
IF CTRLID # '' THEN
  CALL ATGUISETPROPS(GUIAPP,GUIFRM,CTRLID,GPVALUE,SEQ.LIST,GUIERRORS,GUISTATE)
  IF GUIERRORS<1> >= NXT.GUI.ERROR.LEVEL THEN CALL LOG.ERROR("DISPLAY",PROG_ID, ERR_GUI, ERR_MESSAGE(ERR_GUI), GUIERRORS, GUISTATE)
END

RETURN
END
